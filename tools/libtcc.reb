REBOL []

;recycle/torture
function-filter: func [
	f [object!]
][
	all [
		found? find/match f/name "tcc_"
		f/availability = clang/enum clang/CXAvailabilityKind 'CXAvailability_Available
	]
]

function-ns: func [
	f [object!]
][
	either found? find/match f/name "tcc__" [
		"tcc_"
	][
		""
	]
]

struct-filter: func [
	s [object!]
][
	true
]

enum-filter: func [
	e [object!]
][
	true
]

OUTPUT: %libtcc-binding.reb

do %../lib/c2r3.reb

argv-data: compose [
	(r2utf8-string "c2r3.reb")
	(r2utf8-string "/usr/include/libtcc.h")
]

argc: length? argv-data

argv-ptr: copy []
foreach v argv-data [append argv-ptr addr-of v]
argv: make struct! compose/deep/only [
	data: [pointer [(argc)]] (argv-ptr)
]

compile argc addr-of argv

write OUTPUT {REBOL [
	comment: "Generated by c2r3.reb, DO NOT EDIT"
]
make object! [
}
write-output OUTPUT ["libtcc" %libtcc.so]
write/append OUTPUT {
]
}
