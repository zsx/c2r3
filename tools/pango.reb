REBOL []

;recycle/torture
function-filter: func [
	f [object!]
][
	all [
		found? find/match f/name "pango_"
		f/availability = clang/enum clang/CXAvailabilityKind 'CXAvailability_Available
	]
]

function-ns: func [
	f [object!]
][
	either found? find/match f/name "pango_" [
		"pango_"
	][
		""
	]
]

struct-filter: func [
	s [object!]
][
	if found? find/match s/name "Pango" [return true]
	foreach a s/aliases [
		if found? find/match a "Pango" [return true]
	]
	false
]

enum-filter: func [
	e [object!]
][
	if any [
		empty? e/name
		empty? e/key-value
	][
		return false
	]
	if found? find/match e/name "Pango" [return true]
	foreach a e/aliases [
		if found? find/match a/name "Pango" [return true]
	]
	false
]

OUTPUT: %pango-binding.reb

do %../lib/c2r3.reb

argv-data: compose [
	(r2utf8-string "c2r3.reb")
	(r2utf8-string "-I/usr/lib/clang/3.5.0/include")
	(r2utf8-string "-fsyntax-only")
	(r2utf8-string "-I/usr/include/pango-1.0")
	(r2utf8-string "-I/usr/include/glib-2.0")
	(r2utf8-string "-I/usr/lib/glib-2.0/include")
	(r2utf8-string "/usr/include/pango-1.0/pango/pango.h")
]

argc: length? argv-data

argv-ptr: copy []
foreach v argv-data [append argv-ptr addr-of v]
argv: make struct! compose/deep/only [
	data: [pointer [(argc)]] (argv-ptr)
]

compile argc addr-of argv

write OUTPUT rejoin [ {REBOL [
	Date: } to string! now/date {
	comment: "Generated by c2r3.reb, DO NOT EDIT"
]
make object! [
} ]
write-output OUTPUT ["pango" %libpango-1.0.so]
write/append OUTPUT "]^/"
