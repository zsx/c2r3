REBOL [
	Date: 3-Feb-2015
	Note: "Generated by c2r3.reb, DO NOT EDIT"
]

make object! [
	enum: func [
		ser
		item
		/local i
	][
		i: select ser item
		while [word? i] [
			i: select ser i
		]
		i
	]

	CXErrorCode: [
		CXError_Success 0
		CXError_Failure 1
		CXError_Crashed 2
		CXError_InvalidArguments 3
		CXError_ASTReadError 4
	]

	CXAvailabilityKind: [
		CXAvailability_Available 0
		CXAvailability_Deprecated 1
		CXAvailability_NotAvailable 2
		CXAvailability_NotAccessible 3
	]

	CXGlobalOptFlags: [
		CXGlobalOpt_None 0
		CXGlobalOpt_ThreadBackgroundPriorityForIndexing 1
		CXGlobalOpt_ThreadBackgroundPriorityForEditing 2
		CXGlobalOpt_ThreadBackgroundPriorityForAll 3
	]

	CXDiagnosticSeverity: [
		CXDiagnostic_Ignored 0
		CXDiagnostic_Note 1
		CXDiagnostic_Warning 2
		CXDiagnostic_Error 3
		CXDiagnostic_Fatal 4
	]

	CXLoadDiag_Error: [
		CXLoadDiag_None 0
		CXLoadDiag_Unknown 1
		CXLoadDiag_CannotLoad 2
		CXLoadDiag_InvalidFile 3
	]

	CXDiagnosticDisplayOptions: [
		CXDiagnostic_DisplaySourceLocation 1
		CXDiagnostic_DisplayColumn 2
		CXDiagnostic_DisplaySourceRanges 4
		CXDiagnostic_DisplayOption 8
		CXDiagnostic_DisplayCategoryId 16
		CXDiagnostic_DisplayCategoryName 32
	]

	CXTranslationUnit_Flags: [
		CXTranslationUnit_None 0
		CXTranslationUnit_DetailedPreprocessingRecord 1
		CXTranslationUnit_Incomplete 2
		CXTranslationUnit_PrecompiledPreamble 4
		CXTranslationUnit_CacheCompletionResults 8
		CXTranslationUnit_ForSerialization 16
		CXTranslationUnit_CXXChainedPCH 32
		CXTranslationUnit_SkipFunctionBodies 64
		CXTranslationUnit_IncludeBriefCommentsInCodeCompletion 128
	]

	CXSaveTranslationUnit_Flags: [
		CXSaveTranslationUnit_None 0
	]

	CXSaveError: [
		CXSaveError_None 0
		CXSaveError_Unknown 1
		CXSaveError_TranslationErrors 2
		CXSaveError_InvalidTU 3
	]

	CXReparse_Flags: [
		CXReparse_None 0
	]

	CXTUResourceUsageKind: [
		CXTUResourceUsage_AST 1
		CXTUResourceUsage_Identifiers 2
		CXTUResourceUsage_Selectors 3
		CXTUResourceUsage_GlobalCompletionResults 4
		CXTUResourceUsage_SourceManagerContentCache 5
		CXTUResourceUsage_AST_SideTables 6
		CXTUResourceUsage_SourceManager_Membuffer_Malloc 7
		CXTUResourceUsage_SourceManager_Membuffer_MMap 8
		CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc 9
		CXTUResourceUsage_ExternalASTSource_Membuffer_MMap 10
		CXTUResourceUsage_Preprocessor 11
		CXTUResourceUsage_PreprocessingRecord 12
		CXTUResourceUsage_SourceManager_DataStructures 13
		CXTUResourceUsage_Preprocessor_HeaderSearch 14
		CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN 1
		CXTUResourceUsage_MEMORY_IN_BYTES_END 14
		CXTUResourceUsage_First 1
		CXTUResourceUsage_Last 14
	]

	CXCursorKind: [
		CXCursor_UnexposedDecl 1
		CXCursor_StructDecl 2
		CXCursor_UnionDecl 3
		CXCursor_ClassDecl 4
		CXCursor_EnumDecl 5
		CXCursor_FieldDecl 6
		CXCursor_EnumConstantDecl 7
		CXCursor_FunctionDecl 8
		CXCursor_VarDecl 9
		CXCursor_ParmDecl 10
		CXCursor_ObjCInterfaceDecl 11
		CXCursor_ObjCCategoryDecl 12
		CXCursor_ObjCProtocolDecl 13
		CXCursor_ObjCPropertyDecl 14
		CXCursor_ObjCIvarDecl 15
		CXCursor_ObjCInstanceMethodDecl 16
		CXCursor_ObjCClassMethodDecl 17
		CXCursor_ObjCImplementationDecl 18
		CXCursor_ObjCCategoryImplDecl 19
		CXCursor_TypedefDecl 20
		CXCursor_CXXMethod 21
		CXCursor_Namespace 22
		CXCursor_LinkageSpec 23
		CXCursor_Constructor 24
		CXCursor_Destructor 25
		CXCursor_ConversionFunction 26
		CXCursor_TemplateTypeParameter 27
		CXCursor_NonTypeTemplateParameter 28
		CXCursor_TemplateTemplateParameter 29
		CXCursor_FunctionTemplate 30
		CXCursor_ClassTemplate 31
		CXCursor_ClassTemplatePartialSpecialization 32
		CXCursor_NamespaceAlias 33
		CXCursor_UsingDirective 34
		CXCursor_UsingDeclaration 35
		CXCursor_TypeAliasDecl 36
		CXCursor_ObjCSynthesizeDecl 37
		CXCursor_ObjCDynamicDecl 38
		CXCursor_CXXAccessSpecifier 39
		CXCursor_FirstDecl 1
		CXCursor_LastDecl 39
		CXCursor_FirstRef 40
		CXCursor_ObjCSuperClassRef 40
		CXCursor_ObjCProtocolRef 41
		CXCursor_ObjCClassRef 42
		CXCursor_TypeRef 43
		CXCursor_CXXBaseSpecifier 44
		CXCursor_TemplateRef 45
		CXCursor_NamespaceRef 46
		CXCursor_MemberRef 47
		CXCursor_LabelRef 48
		CXCursor_OverloadedDeclRef 49
		CXCursor_VariableRef 50
		CXCursor_LastRef 50
		CXCursor_FirstInvalid 70
		CXCursor_InvalidFile 70
		CXCursor_NoDeclFound 71
		CXCursor_NotImplemented 72
		CXCursor_InvalidCode 73
		CXCursor_LastInvalid 73
		CXCursor_FirstExpr 100
		CXCursor_UnexposedExpr 100
		CXCursor_DeclRefExpr 101
		CXCursor_MemberRefExpr 102
		CXCursor_CallExpr 103
		CXCursor_ObjCMessageExpr 104
		CXCursor_BlockExpr 105
		CXCursor_IntegerLiteral 106
		CXCursor_FloatingLiteral 107
		CXCursor_ImaginaryLiteral 108
		CXCursor_StringLiteral 109
		CXCursor_CharacterLiteral 110
		CXCursor_ParenExpr 111
		CXCursor_UnaryOperator 112
		CXCursor_ArraySubscriptExpr 113
		CXCursor_BinaryOperator 114
		CXCursor_CompoundAssignOperator 115
		CXCursor_ConditionalOperator 116
		CXCursor_CStyleCastExpr 117
		CXCursor_CompoundLiteralExpr 118
		CXCursor_InitListExpr 119
		CXCursor_AddrLabelExpr 120
		CXCursor_StmtExpr 121
		CXCursor_GenericSelectionExpr 122
		CXCursor_GNUNullExpr 123
		CXCursor_CXXStaticCastExpr 124
		CXCursor_CXXDynamicCastExpr 125
		CXCursor_CXXReinterpretCastExpr 126
		CXCursor_CXXConstCastExpr 127
		CXCursor_CXXFunctionalCastExpr 128
		CXCursor_CXXTypeidExpr 129
		CXCursor_CXXBoolLiteralExpr 130
		CXCursor_CXXNullPtrLiteralExpr 131
		CXCursor_CXXThisExpr 132
		CXCursor_CXXThrowExpr 133
		CXCursor_CXXNewExpr 134
		CXCursor_CXXDeleteExpr 135
		CXCursor_UnaryExpr 136
		CXCursor_ObjCStringLiteral 137
		CXCursor_ObjCEncodeExpr 138
		CXCursor_ObjCSelectorExpr 139
		CXCursor_ObjCProtocolExpr 140
		CXCursor_ObjCBridgedCastExpr 141
		CXCursor_PackExpansionExpr 142
		CXCursor_SizeOfPackExpr 143
		CXCursor_LambdaExpr 144
		CXCursor_ObjCBoolLiteralExpr 145
		CXCursor_ObjCSelfExpr 146
		CXCursor_LastExpr 146
		CXCursor_FirstStmt 200
		CXCursor_UnexposedStmt 200
		CXCursor_LabelStmt 201
		CXCursor_CompoundStmt 202
		CXCursor_CaseStmt 203
		CXCursor_DefaultStmt 204
		CXCursor_IfStmt 205
		CXCursor_SwitchStmt 206
		CXCursor_WhileStmt 207
		CXCursor_DoStmt 208
		CXCursor_ForStmt 209
		CXCursor_GotoStmt 210
		CXCursor_IndirectGotoStmt 211
		CXCursor_ContinueStmt 212
		CXCursor_BreakStmt 213
		CXCursor_ReturnStmt 214
		CXCursor_GCCAsmStmt 215
		CXCursor_AsmStmt 215
		CXCursor_ObjCAtTryStmt 216
		CXCursor_ObjCAtCatchStmt 217
		CXCursor_ObjCAtFinallyStmt 218
		CXCursor_ObjCAtThrowStmt 219
		CXCursor_ObjCAtSynchronizedStmt 220
		CXCursor_ObjCAutoreleasePoolStmt 221
		CXCursor_ObjCForCollectionStmt 222
		CXCursor_CXXCatchStmt 223
		CXCursor_CXXTryStmt 224
		CXCursor_CXXForRangeStmt 225
		CXCursor_SEHTryStmt 226
		CXCursor_SEHExceptStmt 227
		CXCursor_SEHFinallyStmt 228
		CXCursor_MSAsmStmt 229
		CXCursor_NullStmt 230
		CXCursor_DeclStmt 231
		CXCursor_OMPParallelDirective 232
		CXCursor_OMPSimdDirective 233
		CXCursor_OMPForDirective 234
		CXCursor_OMPSectionsDirective 235
		CXCursor_OMPSectionDirective 236
		CXCursor_OMPSingleDirective 237
		CXCursor_OMPParallelForDirective 238
		CXCursor_OMPParallelSectionsDirective 239
		CXCursor_OMPTaskDirective 240
		CXCursor_OMPMasterDirective 241
		CXCursor_OMPCriticalDirective 242
		CXCursor_OMPTaskyieldDirective 243
		CXCursor_OMPBarrierDirective 244
		CXCursor_OMPTaskwaitDirective 245
		CXCursor_OMPFlushDirective 246
		CXCursor_SEHLeaveStmt 247
		CXCursor_LastStmt 247
		CXCursor_TranslationUnit 300
		CXCursor_FirstAttr 400
		CXCursor_UnexposedAttr 400
		CXCursor_IBActionAttr 401
		CXCursor_IBOutletAttr 402
		CXCursor_IBOutletCollectionAttr 403
		CXCursor_CXXFinalAttr 404
		CXCursor_CXXOverrideAttr 405
		CXCursor_AnnotateAttr 406
		CXCursor_AsmLabelAttr 407
		CXCursor_PackedAttr 408
		CXCursor_PureAttr 409
		CXCursor_ConstAttr 410
		CXCursor_NoDuplicateAttr 411
		CXCursor_CUDAConstantAttr 412
		CXCursor_CUDADeviceAttr 413
		CXCursor_CUDAGlobalAttr 414
		CXCursor_CUDAHostAttr 415
		CXCursor_LastAttr 415
		CXCursor_PreprocessingDirective 500
		CXCursor_MacroDefinition 501
		CXCursor_MacroExpansion 502
		CXCursor_MacroInstantiation 502
		CXCursor_InclusionDirective 503
		CXCursor_FirstPreprocessing 500
		CXCursor_LastPreprocessing 503
		CXCursor_ModuleImportDecl 600
		CXCursor_FirstExtraDecl 600
		CXCursor_LastExtraDecl 600
	]

	CXLinkageKind: [
		CXLinkage_Invalid 0
		CXLinkage_NoLinkage 1
		CXLinkage_Internal 2
		CXLinkage_UniqueExternal 3
		CXLinkage_External 4
	]

	CXLanguageKind: [
		CXLanguage_Invalid 0
		CXLanguage_C 1
		CXLanguage_ObjC 2
		CXLanguage_CPlusPlus 3
	]

	CXTypeKind: [
		CXType_Invalid 0
		CXType_Unexposed 1
		CXType_Void 2
		CXType_Bool 3
		CXType_Char_U 4
		CXType_UChar 5
		CXType_Char16 6
		CXType_Char32 7
		CXType_UShort 8
		CXType_UInt 9
		CXType_ULong 10
		CXType_ULongLong 11
		CXType_UInt128 12
		CXType_Char_S 13
		CXType_SChar 14
		CXType_WChar 15
		CXType_Short 16
		CXType_Int 17
		CXType_Long 18
		CXType_LongLong 19
		CXType_Int128 20
		CXType_Float 21
		CXType_Double 22
		CXType_LongDouble 23
		CXType_NullPtr 24
		CXType_Overload 25
		CXType_Dependent 26
		CXType_ObjCId 27
		CXType_ObjCClass 28
		CXType_ObjCSel 29
		CXType_FirstBuiltin 2
		CXType_LastBuiltin 29
		CXType_Complex 100
		CXType_Pointer 101
		CXType_BlockPointer 102
		CXType_LValueReference 103
		CXType_RValueReference 104
		CXType_Record 105
		CXType_Enum 106
		CXType_Typedef 107
		CXType_ObjCInterface 108
		CXType_ObjCObjectPointer 109
		CXType_FunctionNoProto 110
		CXType_FunctionProto 111
		CXType_ConstantArray 112
		CXType_Vector 113
		CXType_IncompleteArray 114
		CXType_VariableArray 115
		CXType_DependentSizedArray 116
		CXType_MemberPointer 117
	]

	CXCallingConv: [
		CXCallingConv_Default 0
		CXCallingConv_C 1
		CXCallingConv_X86StdCall 2
		CXCallingConv_X86FastCall 3
		CXCallingConv_X86ThisCall 4
		CXCallingConv_X86Pascal 5
		CXCallingConv_AAPCS 6
		CXCallingConv_AAPCS_VFP 7
		CXCallingConv_PnaclCall 8
		CXCallingConv_IntelOclBicc 9
		CXCallingConv_X86_64Win64 10
		CXCallingConv_X86_64SysV 11
		CXCallingConv_Invalid 100
		CXCallingConv_Unexposed 200
	]

	CXTypeLayoutError: [
		CXTypeLayoutError_Invalid -1
		CXTypeLayoutError_Incomplete -2
		CXTypeLayoutError_Dependent -3
		CXTypeLayoutError_NotConstantSize -4
		CXTypeLayoutError_InvalidFieldName -5
	]

	CXRefQualifierKind: [
		CXRefQualifier_None 0
		CXRefQualifier_LValue 1
		CXRefQualifier_RValue 2
	]

	CX_CXXAccessSpecifier: [
		CX_CXXInvalidAccessSpecifier 0
		CX_CXXPublic 1
		CX_CXXProtected 2
		CX_CXXPrivate 3
	]

	CXChildVisitResult: CXCursorVisitor: [
		CXChildVisit_Break 0
		CXChildVisit_Continue 1
		CXChildVisit_Recurse 2
	]

	CXObjCPropertyAttrKind: [
		CXObjCPropertyAttr_noattr 0
		CXObjCPropertyAttr_readonly 1
		CXObjCPropertyAttr_getter 2
		CXObjCPropertyAttr_assign 4
		CXObjCPropertyAttr_readwrite 8
		CXObjCPropertyAttr_retain 16
		CXObjCPropertyAttr_copy 32
		CXObjCPropertyAttr_nonatomic 64
		CXObjCPropertyAttr_setter 128
		CXObjCPropertyAttr_atomic 256
		CXObjCPropertyAttr_weak 512
		CXObjCPropertyAttr_strong 1024
		CXObjCPropertyAttr_unsafe_unretained 2048
	]

	CXObjCDeclQualifierKind: [
		CXObjCDeclQualifier_None 0
		CXObjCDeclQualifier_In 1
		CXObjCDeclQualifier_Inout 2
		CXObjCDeclQualifier_Out 4
		CXObjCDeclQualifier_Bycopy 8
		CXObjCDeclQualifier_Byref 16
		CXObjCDeclQualifier_Oneway 32
	]

	CXNameRefFlags: [
		CXNameRange_WantQualifier 1
		CXNameRange_WantTemplateArgs 2
		CXNameRange_WantSinglePiece 4
	]

	CXTokenKind: [
		CXToken_Punctuation 0
		CXToken_Keyword 1
		CXToken_Identifier 2
		CXToken_Literal 3
		CXToken_Comment 4
	]

	CXCompletionChunkKind: [
		CXCompletionChunk_Optional 0
		CXCompletionChunk_TypedText 1
		CXCompletionChunk_Text 2
		CXCompletionChunk_Placeholder 3
		CXCompletionChunk_Informative 4
		CXCompletionChunk_CurrentParameter 5
		CXCompletionChunk_LeftParen 6
		CXCompletionChunk_RightParen 7
		CXCompletionChunk_LeftBracket 8
		CXCompletionChunk_RightBracket 9
		CXCompletionChunk_LeftBrace 10
		CXCompletionChunk_RightBrace 11
		CXCompletionChunk_LeftAngle 12
		CXCompletionChunk_RightAngle 13
		CXCompletionChunk_Comma 14
		CXCompletionChunk_ResultType 15
		CXCompletionChunk_Colon 16
		CXCompletionChunk_SemiColon 17
		CXCompletionChunk_Equal 18
		CXCompletionChunk_HorizontalSpace 19
		CXCompletionChunk_VerticalSpace 20
	]

	CXCodeComplete_Flags: [
		CXCodeComplete_IncludeMacros 1
		CXCodeComplete_IncludeCodePatterns 2
		CXCodeComplete_IncludeBriefComments 4
	]

	CXCompletionContext: [
		CXCompletionContext_Unexposed 0
		CXCompletionContext_AnyType 1
		CXCompletionContext_AnyValue 2
		CXCompletionContext_ObjCObjectValue 4
		CXCompletionContext_ObjCSelectorValue 8
		CXCompletionContext_CXXClassTypeValue 16
		CXCompletionContext_DotMemberAccess 32
		CXCompletionContext_ArrowMemberAccess 64
		CXCompletionContext_ObjCPropertyAccess 128
		CXCompletionContext_EnumTag 256
		CXCompletionContext_UnionTag 512
		CXCompletionContext_StructTag 1024
		CXCompletionContext_ClassTag 2048
		CXCompletionContext_Namespace 4096
		CXCompletionContext_NestedNameSpecifier 8192
		CXCompletionContext_ObjCInterface 16384
		CXCompletionContext_ObjCProtocol 32768
		CXCompletionContext_ObjCCategory 65536
		CXCompletionContext_ObjCInstanceMessage 131072
		CXCompletionContext_ObjCClassMessage 262144
		CXCompletionContext_ObjCSelectorName 524288
		CXCompletionContext_MacroName 1048576
		CXCompletionContext_NaturalLanguage 2097152
		CXCompletionContext_Unknown 4194303
	]

	CXVisitorResult: [
		CXVisit_Break 0
		CXVisit_Continue 1
	]

	CXResult: [
		CXResult_Success 0
		CXResult_Invalid 1
		CXResult_VisitBreak 2
	]

	CXIdxEntityKind: [
		CXIdxEntity_Unexposed 0
		CXIdxEntity_Typedef 1
		CXIdxEntity_Function 2
		CXIdxEntity_Variable 3
		CXIdxEntity_Field 4
		CXIdxEntity_EnumConstant 5
		CXIdxEntity_ObjCClass 6
		CXIdxEntity_ObjCProtocol 7
		CXIdxEntity_ObjCCategory 8
		CXIdxEntity_ObjCInstanceMethod 9
		CXIdxEntity_ObjCClassMethod 10
		CXIdxEntity_ObjCProperty 11
		CXIdxEntity_ObjCIvar 12
		CXIdxEntity_Enum 13
		CXIdxEntity_Struct 14
		CXIdxEntity_Union 15
		CXIdxEntity_CXXClass 16
		CXIdxEntity_CXXNamespace 17
		CXIdxEntity_CXXNamespaceAlias 18
		CXIdxEntity_CXXStaticVariable 19
		CXIdxEntity_CXXStaticMethod 20
		CXIdxEntity_CXXInstanceMethod 21
		CXIdxEntity_CXXConstructor 22
		CXIdxEntity_CXXDestructor 23
		CXIdxEntity_CXXConversionFunction 24
		CXIdxEntity_CXXTypeAlias 25
		CXIdxEntity_CXXInterface 26
	]

	CXIdxEntityLanguage: [
		CXIdxEntityLang_None 0
		CXIdxEntityLang_C 1
		CXIdxEntityLang_ObjC 2
		CXIdxEntityLang_CXX 3
	]

	CXIdxEntityCXXTemplateKind: [
		CXIdxEntity_NonTemplate 0
		CXIdxEntity_Template 1
		CXIdxEntity_TemplatePartialSpecialization 2
		CXIdxEntity_TemplateSpecialization 3
	]

	CXIdxAttrKind: [
		CXIdxAttr_Unexposed 0
		CXIdxAttr_IBAction 1
		CXIdxAttr_IBOutlet 2
		CXIdxAttr_IBOutletCollection 3
	]

	CXIdxDeclInfoFlags: [
		CXIdxDeclFlag_Skipped 1
	]

	CXIdxObjCContainerKind: [
		CXIdxObjCContainer_ForwardRef 0
		CXIdxObjCContainer_Interface 1
		CXIdxObjCContainer_Implementation 2
	]

	CXIdxEntityRefKind: [
		CXIdxEntityRef_Direct 1
		CXIdxEntityRef_Implicit 2
	]

	CXIndexOptFlags: [
		CXIndexOpt_None 0
		CXIndexOpt_SuppressRedundantRefs 1
		CXIndexOpt_IndexFunctionLocalSymbols 2
		CXIndexOpt_IndexImplicitTemplateInstantiations 4
		CXIndexOpt_SuppressWarnings 8
		CXIndexOpt_SkipParsedBodiesInSession 16
	]

	CXCommentKind: [
		CXComment_Null 0
		CXComment_Text 1
		CXComment_InlineCommand 2
		CXComment_HTMLStartTag 3
		CXComment_HTMLEndTag 4
		CXComment_Paragraph 5
		CXComment_BlockCommand 6
		CXComment_ParamCommand 7
		CXComment_TParamCommand 8
		CXComment_VerbatimBlockCommand 9
		CXComment_VerbatimBlockLine 10
		CXComment_VerbatimLine 11
		CXComment_FullComment 12
	]

	CXCommentInlineCommandRenderKind: [
		CXCommentInlineCommandRenderKind_Normal 0
		CXCommentInlineCommandRenderKind_Bold 1
		CXCommentInlineCommandRenderKind_Monospaced 2
		CXCommentInlineCommandRenderKind_Emphasized 3
	]

	CXCommentParamPassDirection: [
		CXCommentParamPassDirection_In 0
		CXCommentParamPassDirection_Out 1
		CXCommentParamPassDirection_InOut 2
	]

	CXString: make struct! compose/deep [
		data [pointer]
		private_flags [uint32]
	]
	CXSourceLocation: make struct! compose/deep [
		ptr_data [pointer [2]]
		int_data [uint32]
	]
	CXSourceRange: make struct! compose/deep [
		ptr_data [pointer [2]]
		begin_int_data [uint32]
		end_int_data [uint32]
	]
	CXTUResourceUsage: make struct! compose/deep [
		data [pointer]
		numEntries [uint32]
		padding2 [uint8 [4]]
		entries [pointer]
	]
	CXCursor: make struct! compose/deep [
		kind [int32]
		xdata [int32]
		data [pointer [3]]
	]
	CXType: make struct! compose/deep [
		kind [int32]
		padding1 [uint8 [4]]
		data [pointer [2]]
	]
	CXToken: make struct! compose/deep [
		int_data [uint32 [4]]
		ptr_data [pointer]
	]
	CXCursorAndRangeVisitor: make struct! compose/deep [
		context [pointer]
		visit [pointer]
	]
	CXIdxLoc: make struct! compose/deep [
		ptr_data [pointer [2]]
		int_data [uint32]
	]
	CXComment: make struct! compose/deep [
		ASTNode [pointer]
		TranslationUnit [pointer]
	]
	clang: make library! %libclang.so
	getCString: make routine! compose/deep [[
		string [(CXString)]
		return: [pointer]
		abi: default
	] (clang) "clang_getCString"]

	disposeString: make routine! compose/deep [[
		string [(CXString)]
		return: [void]
		abi: default
	] (clang) "clang_disposeString"]

	getBuildSessionTimestamp: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (clang) "clang_getBuildSessionTimestamp"]

	VirtualFileOverlay_create: make routine! compose/deep [[
		options [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_VirtualFileOverlay_create"]

	VirtualFileOverlay_addFileMapping: make routine! compose/deep [[
		arg1 [pointer]
		virtualPath [pointer]
		realPath [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_VirtualFileOverlay_addFileMapping"]

	VirtualFileOverlay_setCaseSensitivity: make routine! compose/deep [[
		arg1 [pointer]
		caseSensitive [int32]
		return: [int32]
		abi: default
	] (clang) "clang_VirtualFileOverlay_setCaseSensitivity"]

	VirtualFileOverlay_writeToBuffer: make routine! compose/deep [[
		arg1 [pointer]
		options [uint32]
		out_buffer_ptr [pointer]
		out_buffer_size [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_VirtualFileOverlay_writeToBuffer"]

	VirtualFileOverlay_dispose: make routine! compose/deep [[
		arg1 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_VirtualFileOverlay_dispose"]

	ModuleMapDescriptor_create: make routine! compose/deep [[
		options [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_ModuleMapDescriptor_create"]

	ModuleMapDescriptor_setFrameworkModuleName: make routine! compose/deep [[
		arg1 [pointer]
		name [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_ModuleMapDescriptor_setFrameworkModuleName"]

	ModuleMapDescriptor_setUmbrellaHeader: make routine! compose/deep [[
		arg1 [pointer]
		name [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_ModuleMapDescriptor_setUmbrellaHeader"]

	ModuleMapDescriptor_writeToBuffer: make routine! compose/deep [[
		arg1 [pointer]
		options [uint32]
		out_buffer_ptr [pointer]
		out_buffer_size [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_ModuleMapDescriptor_writeToBuffer"]

	ModuleMapDescriptor_dispose: make routine! compose/deep [[
		arg1 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_ModuleMapDescriptor_dispose"]

	createIndex: make routine! compose/deep [[
		excludeDeclarationsFromPCH [int32]
		displayDiagnostics [int32]
		return: [pointer]
		abi: default
	] (clang) "clang_createIndex"]

	disposeIndex: make routine! compose/deep [[
		index [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeIndex"]

	CXIndex_setGlobalOptions: make routine! compose/deep [[
		arg1 [pointer]
		options [uint32]
		return: [void]
		abi: default
	] (clang) "clang_CXIndex_setGlobalOptions"]

	CXIndex_getGlobalOptions: make routine! compose/deep [[
		arg1 [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_CXIndex_getGlobalOptions"]

	getFileName: make routine! compose/deep [[
		SFile [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getFileName"]

	getFileTime: make routine! compose/deep [[
		SFile [pointer]
		return: [int64]
		abi: default
	] (clang) "clang_getFileTime"]

	getFileUniqueID: make routine! compose/deep [[
		file [pointer]
		outID [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_getFileUniqueID"]

	isFileMultipleIncludeGuarded: make routine! compose/deep [[
		tu [pointer]
		file [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_isFileMultipleIncludeGuarded"]

	getFile: make routine! compose/deep [[
		tu [pointer]
		file_name [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getFile"]

	getNullLocation: make routine! compose/deep [[
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getNullLocation"]

	equalLocations: make routine! compose/deep [[
		loc1 [(CXSourceLocation)]
		loc2 [(CXSourceLocation)]
		return: [uint32]
		abi: default
	] (clang) "clang_equalLocations"]

	getLocation: make routine! compose/deep [[
		tu [pointer]
		file [pointer]
		line [uint32]
		column [uint32]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getLocation"]

	getLocationForOffset: make routine! compose/deep [[
		tu [pointer]
		file [pointer]
		offset [uint32]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getLocationForOffset"]

	Location_isInSystemHeader: make routine! compose/deep [[
		location [(CXSourceLocation)]
		return: [int32]
		abi: default
	] (clang) "clang_Location_isInSystemHeader"]

	Location_isFromMainFile: make routine! compose/deep [[
		location [(CXSourceLocation)]
		return: [int32]
		abi: default
	] (clang) "clang_Location_isFromMainFile"]

	getNullRange: make routine! compose/deep [[
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getNullRange"]

	getRange: make routine! compose/deep [[
		begin [(CXSourceLocation)]
		end [(CXSourceLocation)]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getRange"]

	equalRanges: make routine! compose/deep [[
		range1 [(CXSourceRange)]
		range2 [(CXSourceRange)]
		return: [uint32]
		abi: default
	] (clang) "clang_equalRanges"]

	Range_isNull: make routine! compose/deep [[
		range [(CXSourceRange)]
		return: [int32]
		abi: default
	] (clang) "clang_Range_isNull"]

	getExpansionLocation: make routine! compose/deep [[
		location [(CXSourceLocation)]
		file [pointer]
		line [pointer]
		column [pointer]
		offset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getExpansionLocation"]

	getPresumedLocation: make routine! compose/deep [[
		location [(CXSourceLocation)]
		filename [pointer]
		line [pointer]
		column [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getPresumedLocation"]

	getInstantiationLocation: make routine! compose/deep [[
		location [(CXSourceLocation)]
		file [pointer]
		line [pointer]
		column [pointer]
		offset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getInstantiationLocation"]

	getSpellingLocation: make routine! compose/deep [[
		location [(CXSourceLocation)]
		file [pointer]
		line [pointer]
		column [pointer]
		offset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getSpellingLocation"]

	getFileLocation: make routine! compose/deep [[
		location [(CXSourceLocation)]
		file [pointer]
		line [pointer]
		column [pointer]
		offset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getFileLocation"]

	getRangeStart: make routine! compose/deep [[
		range [(CXSourceRange)]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getRangeStart"]

	getRangeEnd: make routine! compose/deep [[
		range [(CXSourceRange)]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getRangeEnd"]

	getSkippedRanges: make routine! compose/deep [[
		tu [pointer]
		file [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getSkippedRanges"]

	disposeSourceRangeList: make routine! compose/deep [[
		ranges [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeSourceRangeList"]

	getNumDiagnosticsInSet: make routine! compose/deep [[
		Diags [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getNumDiagnosticsInSet"]

	getDiagnosticInSet: make routine! compose/deep [[
		Diags [pointer]
		Index [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_getDiagnosticInSet"]

	loadDiagnostics: make routine! compose/deep [[
		file [pointer]
		error [pointer]
		errorString [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_loadDiagnostics"]

	disposeDiagnosticSet: make routine! compose/deep [[
		Diags [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeDiagnosticSet"]

	getChildDiagnostics: make routine! compose/deep [[
		D [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getChildDiagnostics"]

	getNumDiagnostics: make routine! compose/deep [[
		Unit [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getNumDiagnostics"]

	getDiagnostic: make routine! compose/deep [[
		Unit [pointer]
		Index [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_getDiagnostic"]

	getDiagnosticSetFromTU: make routine! compose/deep [[
		Unit [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getDiagnosticSetFromTU"]

	disposeDiagnostic: make routine! compose/deep [[
		Diagnostic [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeDiagnostic"]

	formatDiagnostic: make routine! compose/deep [[
		Diagnostic [pointer]
		Options [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_formatDiagnostic"]

	defaultDiagnosticDisplayOptions: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (clang) "clang_defaultDiagnosticDisplayOptions"]

	getDiagnosticSeverity: make routine! compose/deep [[
		arg1 [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_getDiagnosticSeverity"]

	getDiagnosticLocation: make routine! compose/deep [[
		arg1 [pointer]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getDiagnosticLocation"]

	getDiagnosticSpelling: make routine! compose/deep [[
		arg1 [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDiagnosticSpelling"]

	getDiagnosticOption: make routine! compose/deep [[
		Diag [pointer]
		Disable [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDiagnosticOption"]

	getDiagnosticCategory: make routine! compose/deep [[
		arg1 [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getDiagnosticCategory"]

	getDiagnosticCategoryName: make routine! compose/deep [[
		Category [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDiagnosticCategoryName"]

	getDiagnosticCategoryText: make routine! compose/deep [[
		arg1 [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDiagnosticCategoryText"]

	getDiagnosticNumRanges: make routine! compose/deep [[
		arg1 [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getDiagnosticNumRanges"]

	getDiagnosticRange: make routine! compose/deep [[
		Diagnostic [pointer]
		Range [uint32]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getDiagnosticRange"]

	getDiagnosticNumFixIts: make routine! compose/deep [[
		Diagnostic [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getDiagnosticNumFixIts"]

	getDiagnosticFixIt: make routine! compose/deep [[
		Diagnostic [pointer]
		FixIt [uint32]
		ReplacementRange [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDiagnosticFixIt"]

	getTranslationUnitSpelling: make routine! compose/deep [[
		CTUnit [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getTranslationUnitSpelling"]

	createTranslationUnitFromSourceFile: make routine! compose/deep [[
		CIdx [pointer]
		source_filename [pointer]
		num_clang_command_line_args [int32]
		clang_command_line_args [pointer]
		num_unsaved_files [uint32]
		unsaved_files [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_createTranslationUnitFromSourceFile"]

	createTranslationUnit: make routine! compose/deep [[
		CIdx [pointer]
		ast_filename [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_createTranslationUnit"]

	createTranslationUnit2: make routine! compose/deep [[
		CIdx [pointer]
		ast_filename [pointer]
		out_TU [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_createTranslationUnit2"]

	defaultEditingTranslationUnitOptions: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (clang) "clang_defaultEditingTranslationUnitOptions"]

	parseTranslationUnit: make routine! compose/deep [[
		CIdx [pointer]
		source_filename [pointer]
		command_line_args [pointer]
		num_command_line_args [int32]
		unsaved_files [pointer]
		num_unsaved_files [uint32]
		options [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_parseTranslationUnit"]

	parseTranslationUnit2: make routine! compose/deep [[
		CIdx [pointer]
		source_filename [pointer]
		command_line_args [pointer]
		num_command_line_args [int32]
		unsaved_files [pointer]
		num_unsaved_files [uint32]
		options [uint32]
		out_TU [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_parseTranslationUnit2"]

	defaultSaveOptions: make routine! compose/deep [[
		TU [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_defaultSaveOptions"]

	saveTranslationUnit: make routine! compose/deep [[
		TU [pointer]
		FileName [pointer]
		options [uint32]
		return: [int32]
		abi: default
	] (clang) "clang_saveTranslationUnit"]

	disposeTranslationUnit: make routine! compose/deep [[
		arg1 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeTranslationUnit"]

	defaultReparseOptions: make routine! compose/deep [[
		TU [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_defaultReparseOptions"]

	reparseTranslationUnit: make routine! compose/deep [[
		TU [pointer]
		num_unsaved_files [uint32]
		unsaved_files [pointer]
		options [uint32]
		return: [int32]
		abi: default
	] (clang) "clang_reparseTranslationUnit"]

	getTUResourceUsageName: make routine! compose/deep [[
		kind [int32]
		return: [pointer]
		abi: default
	] (clang) "clang_getTUResourceUsageName"]

	getCXTUResourceUsage: make routine! compose/deep [[
		TU [pointer]
		return: [(CXTUResourceUsage)]
		abi: default
	] (clang) "clang_getCXTUResourceUsage"]

	disposeCXTUResourceUsage: make routine! compose/deep [[
		usage [(CXTUResourceUsage)]
		return: [void]
		abi: default
	] (clang) "clang_disposeCXTUResourceUsage"]

	getNullCursor: make routine! compose/deep [[
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getNullCursor"]

	getTranslationUnitCursor: make routine! compose/deep [[
		arg1 [pointer]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getTranslationUnitCursor"]

	equalCursors: make routine! compose/deep [[
		arg1 [(CXCursor)]
		arg2 [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_equalCursors"]

	Cursor_isNull: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_Cursor_isNull"]

	hashCursor: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_hashCursor"]

	getCursorKind: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getCursorKind"]

	isDeclaration: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isDeclaration"]

	isReference: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isReference"]

	isExpression: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isExpression"]

	isStatement: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isStatement"]

	isAttribute: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isAttribute"]

	isInvalid: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isInvalid"]

	isTranslationUnit: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isTranslationUnit"]

	isPreprocessing: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isPreprocessing"]

	isUnexposed: make routine! compose/deep [[
		arg1 [int32]
		return: [uint32]
		abi: default
	] (clang) "clang_isUnexposed"]

	getCursorLinkage: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getCursorLinkage"]

	getCursorAvailability: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getCursorAvailability"]

	getCursorPlatformAvailability: make routine! compose/deep [[
		cursor [(CXCursor)]
		always_deprecated [pointer]
		deprecated_message [pointer]
		always_unavailable [pointer]
		unavailable_message [pointer]
		availability [pointer]
		availability_size [int32]
		return: [int32]
		abi: default
	] (clang) "clang_getCursorPlatformAvailability"]

	disposeCXPlatformAvailability: make routine! compose/deep [[
		availability [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeCXPlatformAvailability"]

	getCursorLanguage: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getCursorLanguage"]

	Cursor_getTranslationUnit: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [pointer]
		abi: default
	] (clang) "clang_Cursor_getTranslationUnit"]

	createCXCursorSet: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (clang) "clang_createCXCursorSet"]

	disposeCXCursorSet: make routine! compose/deep [[
		cset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeCXCursorSet"]

	CXCursorSet_contains: make routine! compose/deep [[
		cset [pointer]
		cursor [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXCursorSet_contains"]

	CXCursorSet_insert: make routine! compose/deep [[
		cset [pointer]
		cursor [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXCursorSet_insert"]

	getCursorSemanticParent: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCursorSemanticParent"]

	getCursorLexicalParent: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCursorLexicalParent"]

	getOverriddenCursors: make routine! compose/deep [[
		cursor [(CXCursor)]
		overridden [pointer]
		num_overridden [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getOverriddenCursors"]

	disposeOverriddenCursors: make routine! compose/deep [[
		overridden [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeOverriddenCursors"]

	getIncludedFile: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [pointer]
		abi: default
	] (clang) "clang_getIncludedFile"]

	getCursor: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [(CXSourceLocation)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCursor"]

	getCursorLocation: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getCursorLocation"]

	getCursorExtent: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getCursorExtent"]

	getCursorType: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getCursorType"]

	getTypeSpelling: make routine! compose/deep [[
		CT [(CXType)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getTypeSpelling"]

	getTypedefDeclUnderlyingType: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getTypedefDeclUnderlyingType"]

	getEnumDeclIntegerType: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getEnumDeclIntegerType"]

	getEnumConstantDeclValue: make routine! compose/deep [[
		C [(CXCursor)]
		return: [int64]
		abi: default
	] (clang) "clang_getEnumConstantDeclValue"]

	getEnumConstantDeclUnsignedValue: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint64]
		abi: default
	] (clang) "clang_getEnumConstantDeclUnsignedValue"]

	getFieldDeclBitWidth: make routine! compose/deep [[
		C [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getFieldDeclBitWidth"]

	Cursor_getNumArguments: make routine! compose/deep [[
		C [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_Cursor_getNumArguments"]

	Cursor_getArgument: make routine! compose/deep [[
		C [(CXCursor)]
		i [uint32]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_Cursor_getArgument"]

	equalTypes: make routine! compose/deep [[
		A [(CXType)]
		B [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_equalTypes"]

	getCanonicalType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getCanonicalType"]

	isConstQualifiedType: make routine! compose/deep [[
		T [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_isConstQualifiedType"]

	isVolatileQualifiedType: make routine! compose/deep [[
		T [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_isVolatileQualifiedType"]

	isRestrictQualifiedType: make routine! compose/deep [[
		T [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_isRestrictQualifiedType"]

	getPointeeType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getPointeeType"]

	getTypeDeclaration: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getTypeDeclaration"]

	getDeclObjCTypeEncoding: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getDeclObjCTypeEncoding"]

	getTypeKindSpelling: make routine! compose/deep [[
		K [int32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getTypeKindSpelling"]

	getFunctionTypeCallingConv: make routine! compose/deep [[
		T [(CXType)]
		return: [int32]
		abi: default
	] (clang) "clang_getFunctionTypeCallingConv"]

	getResultType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getResultType"]

	getNumArgTypes: make routine! compose/deep [[
		T [(CXType)]
		return: [int32]
		abi: default
	] (clang) "clang_getNumArgTypes"]

	getArgType: make routine! compose/deep [[
		T [(CXType)]
		i [uint32]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getArgType"]

	isFunctionTypeVariadic: make routine! compose/deep [[
		T [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_isFunctionTypeVariadic"]

	getCursorResultType: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getCursorResultType"]

	isPODType: make routine! compose/deep [[
		T [(CXType)]
		return: [uint32]
		abi: default
	] (clang) "clang_isPODType"]

	getElementType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getElementType"]

	getNumElements: make routine! compose/deep [[
		T [(CXType)]
		return: [int64]
		abi: default
	] (clang) "clang_getNumElements"]

	getArrayElementType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getArrayElementType"]

	getArraySize: make routine! compose/deep [[
		T [(CXType)]
		return: [int64]
		abi: default
	] (clang) "clang_getArraySize"]

	Type_getAlignOf: make routine! compose/deep [[
		T [(CXType)]
		return: [int64]
		abi: default
	] (clang) "clang_Type_getAlignOf"]

	Type_getClassType: make routine! compose/deep [[
		T [(CXType)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_Type_getClassType"]

	Type_getSizeOf: make routine! compose/deep [[
		T [(CXType)]
		return: [int64]
		abi: default
	] (clang) "clang_Type_getSizeOf"]

	Type_getOffsetOf: make routine! compose/deep [[
		T [(CXType)]
		S [pointer]
		return: [int64]
		abi: default
	] (clang) "clang_Type_getOffsetOf"]

	Type_getNumTemplateArguments: make routine! compose/deep [[
		T [(CXType)]
		return: [int32]
		abi: default
	] (clang) "clang_Type_getNumTemplateArguments"]

	Type_getTemplateArgumentAsType: make routine! compose/deep [[
		T [(CXType)]
		i [uint32]
		return: [(CXType)]
		abi: default
	] (clang) "clang_Type_getTemplateArgumentAsType"]

	Type_getCXXRefQualifier: make routine! compose/deep [[
		T [(CXType)]
		return: [int32]
		abi: default
	] (clang) "clang_Type_getCXXRefQualifier"]

	Cursor_isBitField: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_Cursor_isBitField"]

	isVirtualBase: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_isVirtualBase"]

	getCXXAccessSpecifier: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getCXXAccessSpecifier"]

	getNumOverloadedDecls: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_getNumOverloadedDecls"]

	getOverloadedDecl: make routine! compose/deep [[
		cursor [(CXCursor)]
		index [uint32]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getOverloadedDecl"]

	getIBOutletCollectionType: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_getIBOutletCollectionType"]

	visitChildren: make routine! compose/deep [[
		parent [(CXCursor)]
		visitor [pointer]
		client_data [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_visitChildren"]

	getCursorUSR: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCursorUSR"]

	constructUSR_ObjCClass: make routine! compose/deep [[
		class_name [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCClass"]

	constructUSR_ObjCCategory: make routine! compose/deep [[
		class_name [pointer]
		category_name [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCCategory"]

	constructUSR_ObjCProtocol: make routine! compose/deep [[
		protocol_name [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCProtocol"]

	constructUSR_ObjCIvar: make routine! compose/deep [[
		name [pointer]
		classUSR [(CXString)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCIvar"]

	constructUSR_ObjCMethod: make routine! compose/deep [[
		name [pointer]
		isInstanceMethod [uint32]
		classUSR [(CXString)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCMethod"]

	constructUSR_ObjCProperty: make routine! compose/deep [[
		property [pointer]
		classUSR [(CXString)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_constructUSR_ObjCProperty"]

	getCursorSpelling: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCursorSpelling"]

	Cursor_getSpellingNameRange: make routine! compose/deep [[
		arg1 [(CXCursor)]
		pieceIndex [uint32]
		options [uint32]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_Cursor_getSpellingNameRange"]

	getCursorDisplayName: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCursorDisplayName"]

	getCursorReferenced: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCursorReferenced"]

	getCursorDefinition: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCursorDefinition"]

	isCursorDefinition: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_isCursorDefinition"]

	getCanonicalCursor: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getCanonicalCursor"]

	Cursor_getObjCSelectorIndex: make routine! compose/deep [[
		arg1 [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_Cursor_getObjCSelectorIndex"]

	Cursor_isDynamicCall: make routine! compose/deep [[
		C [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_Cursor_isDynamicCall"]

	Cursor_getReceiverType: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXType)]
		abi: default
	] (clang) "clang_Cursor_getReceiverType"]

	Cursor_getObjCPropertyAttributes: make routine! compose/deep [[
		C [(CXCursor)]
		reserved [uint32]
		return: [uint32]
		abi: default
	] (clang) "clang_Cursor_getObjCPropertyAttributes"]

	Cursor_getObjCDeclQualifiers: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_Cursor_getObjCDeclQualifiers"]

	Cursor_isObjCOptional: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_Cursor_isObjCOptional"]

	Cursor_isVariadic: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_Cursor_isVariadic"]

	Cursor_getCommentRange: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_Cursor_getCommentRange"]

	Cursor_getRawCommentText: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_Cursor_getRawCommentText"]

	Cursor_getBriefCommentText: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_Cursor_getBriefCommentText"]

	Cursor_getModule: make routine! compose/deep [[
		C [(CXCursor)]
		return: [pointer]
		abi: default
	] (clang) "clang_Cursor_getModule"]

	getModuleForFile: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getModuleForFile"]

	Module_getASTFile: make routine! compose/deep [[
		Module [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_Module_getASTFile"]

	Module_getParent: make routine! compose/deep [[
		Module [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_Module_getParent"]

	Module_getName: make routine! compose/deep [[
		Module [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_Module_getName"]

	Module_getFullName: make routine! compose/deep [[
		Module [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_Module_getFullName"]

	Module_isSystem: make routine! compose/deep [[
		Module [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_Module_isSystem"]

	Module_getNumTopLevelHeaders: make routine! compose/deep [[
		arg1 [pointer]
		Module [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_Module_getNumTopLevelHeaders"]

	Module_getTopLevelHeader: make routine! compose/deep [[
		arg1 [pointer]
		Module [pointer]
		Index [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_Module_getTopLevelHeader"]

	CXXMethod_isPureVirtual: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXXMethod_isPureVirtual"]

	CXXMethod_isStatic: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXXMethod_isStatic"]

	CXXMethod_isVirtual: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXXMethod_isVirtual"]

	CXXMethod_isConst: make routine! compose/deep [[
		C [(CXCursor)]
		return: [uint32]
		abi: default
	] (clang) "clang_CXXMethod_isConst"]

	getTemplateCursorKind: make routine! compose/deep [[
		C [(CXCursor)]
		return: [int32]
		abi: default
	] (clang) "clang_getTemplateCursorKind"]

	getSpecializedCursorTemplate: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXCursor)]
		abi: default
	] (clang) "clang_getSpecializedCursorTemplate"]

	getCursorReferenceNameRange: make routine! compose/deep [[
		C [(CXCursor)]
		NameFlags [uint32]
		PieceIndex [uint32]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getCursorReferenceNameRange"]

	getTokenKind: make routine! compose/deep [[
		arg1 [(CXToken)]
		return: [int32]
		abi: default
	] (clang) "clang_getTokenKind"]

	getTokenSpelling: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [(CXToken)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getTokenSpelling"]

	getTokenLocation: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [(CXToken)]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_getTokenLocation"]

	getTokenExtent: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [(CXToken)]
		return: [(CXSourceRange)]
		abi: default
	] (clang) "clang_getTokenExtent"]

	tokenize: make routine! compose/deep [[
		TU [pointer]
		Range [(CXSourceRange)]
		Tokens [pointer]
		NumTokens [pointer]
		return: [void]
		abi: default
	] (clang) "clang_tokenize"]

	annotateTokens: make routine! compose/deep [[
		TU [pointer]
		Tokens [pointer]
		NumTokens [uint32]
		Cursors [pointer]
		return: [void]
		abi: default
	] (clang) "clang_annotateTokens"]

	disposeTokens: make routine! compose/deep [[
		TU [pointer]
		Tokens [pointer]
		NumTokens [uint32]
		return: [void]
		abi: default
	] (clang) "clang_disposeTokens"]

	getCursorKindSpelling: make routine! compose/deep [[
		Kind [int32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCursorKindSpelling"]

	getDefinitionSpellingAndExtent: make routine! compose/deep [[
		arg1 [(CXCursor)]
		startBuf [pointer]
		endBuf [pointer]
		startLine [pointer]
		startColumn [pointer]
		endLine [pointer]
		endColumn [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getDefinitionSpellingAndExtent"]

	enableStackTraces: make routine! compose/deep [[
		return: [void]
		abi: default
	] (clang) "clang_enableStackTraces"]

	executeOnThread: make routine! compose/deep [[
		fn [pointer]
		user_data [pointer]
		stack_size [uint32]
		return: [void]
		abi: default
	] (clang) "clang_executeOnThread"]

	getCompletionChunkKind: make routine! compose/deep [[
		completion_string [pointer]
		chunk_number [uint32]
		return: [int32]
		abi: default
	] (clang) "clang_getCompletionChunkKind"]

	getCompletionChunkText: make routine! compose/deep [[
		completion_string [pointer]
		chunk_number [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCompletionChunkText"]

	getCompletionChunkCompletionString: make routine! compose/deep [[
		completion_string [pointer]
		chunk_number [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_getCompletionChunkCompletionString"]

	getNumCompletionChunks: make routine! compose/deep [[
		completion_string [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getNumCompletionChunks"]

	getCompletionPriority: make routine! compose/deep [[
		completion_string [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getCompletionPriority"]

	getCompletionAvailability: make routine! compose/deep [[
		completion_string [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_getCompletionAvailability"]

	getCompletionNumAnnotations: make routine! compose/deep [[
		completion_string [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_getCompletionNumAnnotations"]

	getCompletionAnnotation: make routine! compose/deep [[
		completion_string [pointer]
		annotation_number [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCompletionAnnotation"]

	getCompletionParent: make routine! compose/deep [[
		completion_string [pointer]
		kind [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCompletionParent"]

	getCompletionBriefComment: make routine! compose/deep [[
		completion_string [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_getCompletionBriefComment"]

	getCursorCompletionString: make routine! compose/deep [[
		cursor [(CXCursor)]
		return: [pointer]
		abi: default
	] (clang) "clang_getCursorCompletionString"]

	defaultCodeCompleteOptions: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (clang) "clang_defaultCodeCompleteOptions"]

	codeCompleteAt: make routine! compose/deep [[
		TU [pointer]
		complete_filename [pointer]
		complete_line [uint32]
		complete_column [uint32]
		unsaved_files [pointer]
		num_unsaved_files [uint32]
		options [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_codeCompleteAt"]

	sortCodeCompletionResults: make routine! compose/deep [[
		Results [pointer]
		NumResults [uint32]
		return: [void]
		abi: default
	] (clang) "clang_sortCodeCompletionResults"]

	disposeCodeCompleteResults: make routine! compose/deep [[
		Results [pointer]
		return: [void]
		abi: default
	] (clang) "clang_disposeCodeCompleteResults"]

	codeCompleteGetNumDiagnostics: make routine! compose/deep [[
		Results [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_codeCompleteGetNumDiagnostics"]

	codeCompleteGetDiagnostic: make routine! compose/deep [[
		Results [pointer]
		Index [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_codeCompleteGetDiagnostic"]

	codeCompleteGetContexts: make routine! compose/deep [[
		Results [pointer]
		return: [uint64]
		abi: default
	] (clang) "clang_codeCompleteGetContexts"]

	codeCompleteGetContainerKind: make routine! compose/deep [[
		Results [pointer]
		IsIncomplete [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_codeCompleteGetContainerKind"]

	codeCompleteGetContainerUSR: make routine! compose/deep [[
		Results [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_codeCompleteGetContainerUSR"]

	codeCompleteGetObjCSelector: make routine! compose/deep [[
		Results [pointer]
		return: [(CXString)]
		abi: default
	] (clang) "clang_codeCompleteGetObjCSelector"]

	getClangVersion: make routine! compose/deep [[
		return: [(CXString)]
		abi: default
	] (clang) "clang_getClangVersion"]

	toggleCrashRecovery: make routine! compose/deep [[
		isEnabled [uint32]
		return: [void]
		abi: default
	] (clang) "clang_toggleCrashRecovery"]

	getInclusions: make routine! compose/deep [[
		tu [pointer]
		visitor [pointer]
		client_data [pointer]
		return: [void]
		abi: default
	] (clang) "clang_getInclusions"]

	getRemappings: make routine! compose/deep [[
		path [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_getRemappings"]

	getRemappingsFromFileList: make routine! compose/deep [[
		filePaths [pointer]
		numFiles [uint32]
		return: [pointer]
		abi: default
	] (clang) "clang_getRemappingsFromFileList"]

	remap_getNumFiles: make routine! compose/deep [[
		arg1 [pointer]
		return: [uint32]
		abi: default
	] (clang) "clang_remap_getNumFiles"]

	remap_getFilenames: make routine! compose/deep [[
		arg1 [pointer]
		index [uint32]
		original [pointer]
		transformed [pointer]
		return: [void]
		abi: default
	] (clang) "clang_remap_getFilenames"]

	remap_dispose: make routine! compose/deep [[
		arg1 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_remap_dispose"]

	findReferencesInFile: make routine! compose/deep [[
		cursor [(CXCursor)]
		file [pointer]
		visitor [(CXCursorAndRangeVisitor)]
		return: [int32]
		abi: default
	] (clang) "clang_findReferencesInFile"]

	findIncludesInFile: make routine! compose/deep [[
		TU [pointer]
		file [pointer]
		visitor [(CXCursorAndRangeVisitor)]
		return: [int32]
		abi: default
	] (clang) "clang_findIncludesInFile"]

	index_isEntityObjCContainerKind: make routine! compose/deep [[
		arg1 [int32]
		return: [int32]
		abi: default
	] (clang) "clang_index_isEntityObjCContainerKind"]

	index_getObjCContainerDeclInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getObjCContainerDeclInfo"]

	index_getObjCInterfaceDeclInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getObjCInterfaceDeclInfo"]

	index_getObjCCategoryDeclInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getObjCCategoryDeclInfo"]

	index_getObjCProtocolRefListInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getObjCProtocolRefListInfo"]

	index_getObjCPropertyDeclInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getObjCPropertyDeclInfo"]

	index_getIBOutletCollectionAttrInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getIBOutletCollectionAttrInfo"]

	index_getCXXClassDeclInfo: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getCXXClassDeclInfo"]

	index_getClientContainer: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getClientContainer"]

	index_setClientContainer: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_index_setClientContainer"]

	index_getClientEntity: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_index_getClientEntity"]

	index_setClientEntity: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_index_setClientEntity"]

	IndexAction_create: make routine! compose/deep [[
		CIdx [pointer]
		return: [pointer]
		abi: default
	] (clang) "clang_IndexAction_create"]

	IndexAction_dispose: make routine! compose/deep [[
		arg1 [pointer]
		return: [void]
		abi: default
	] (clang) "clang_IndexAction_dispose"]

	indexSourceFile: make routine! compose/deep [[
		arg1 [pointer]
		client_data [pointer]
		index_callbacks [pointer]
		index_callbacks_size [uint32]
		index_options [uint32]
		source_filename [pointer]
		command_line_args [pointer]
		num_command_line_args [int32]
		unsaved_files [pointer]
		num_unsaved_files [uint32]
		out_TU [pointer]
		TU_options [uint32]
		return: [int32]
		abi: default
	] (clang) "clang_indexSourceFile"]

	indexTranslationUnit: make routine! compose/deep [[
		arg1 [pointer]
		client_data [pointer]
		index_callbacks [pointer]
		index_callbacks_size [uint32]
		index_options [uint32]
		arg6 [pointer]
		return: [int32]
		abi: default
	] (clang) "clang_indexTranslationUnit"]

	indexLoc_getFileLocation: make routine! compose/deep [[
		loc [(CXIdxLoc)]
		indexFile [pointer]
		file [pointer]
		line [pointer]
		column [pointer]
		offset [pointer]
		return: [void]
		abi: default
	] (clang) "clang_indexLoc_getFileLocation"]

	indexLoc_getCXSourceLocation: make routine! compose/deep [[
		loc [(CXIdxLoc)]
		return: [(CXSourceLocation)]
		abi: default
	] (clang) "clang_indexLoc_getCXSourceLocation"]

	Cursor_getParsedComment: make routine! compose/deep [[
		C [(CXCursor)]
		return: [(CXComment)]
		abi: default
	] (clang) "clang_Cursor_getParsedComment"]

	Comment_getKind: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [int32]
		abi: default
	] (clang) "clang_Comment_getKind"]

	Comment_getNumChildren: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_Comment_getNumChildren"]

	Comment_getChild: make routine! compose/deep [[
		Comment [(CXComment)]
		ChildIdx [uint32]
		return: [(CXComment)]
		abi: default
	] (clang) "clang_Comment_getChild"]

	Comment_isWhitespace: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_Comment_isWhitespace"]

	InlineContentComment_hasTrailingNewline: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_InlineContentComment_hasTrailingNewline"]

	TextComment_getText: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_TextComment_getText"]

	InlineCommandComment_getCommandName: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_InlineCommandComment_getCommandName"]

	InlineCommandComment_getRenderKind: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [int32]
		abi: default
	] (clang) "clang_InlineCommandComment_getRenderKind"]

	InlineCommandComment_getNumArgs: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_InlineCommandComment_getNumArgs"]

	InlineCommandComment_getArgText: make routine! compose/deep [[
		Comment [(CXComment)]
		ArgIdx [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_InlineCommandComment_getArgText"]

	HTMLTagComment_getTagName: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_HTMLTagComment_getTagName"]

	HTMLStartTagComment_isSelfClosing: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_HTMLStartTagComment_isSelfClosing"]

	HTMLStartTag_getNumAttrs: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_HTMLStartTag_getNumAttrs"]

	HTMLStartTag_getAttrName: make routine! compose/deep [[
		Comment [(CXComment)]
		AttrIdx [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_HTMLStartTag_getAttrName"]

	HTMLStartTag_getAttrValue: make routine! compose/deep [[
		Comment [(CXComment)]
		AttrIdx [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_HTMLStartTag_getAttrValue"]

	BlockCommandComment_getCommandName: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_BlockCommandComment_getCommandName"]

	BlockCommandComment_getNumArgs: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_BlockCommandComment_getNumArgs"]

	BlockCommandComment_getArgText: make routine! compose/deep [[
		Comment [(CXComment)]
		ArgIdx [uint32]
		return: [(CXString)]
		abi: default
	] (clang) "clang_BlockCommandComment_getArgText"]

	BlockCommandComment_getParagraph: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXComment)]
		abi: default
	] (clang) "clang_BlockCommandComment_getParagraph"]

	ParamCommandComment_getParamName: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_ParamCommandComment_getParamName"]

	ParamCommandComment_isParamIndexValid: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_ParamCommandComment_isParamIndexValid"]

	ParamCommandComment_getParamIndex: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_ParamCommandComment_getParamIndex"]

	ParamCommandComment_isDirectionExplicit: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_ParamCommandComment_isDirectionExplicit"]

	ParamCommandComment_getDirection: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [int32]
		abi: default
	] (clang) "clang_ParamCommandComment_getDirection"]

	TParamCommandComment_getParamName: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_TParamCommandComment_getParamName"]

	TParamCommandComment_isParamPositionValid: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_TParamCommandComment_isParamPositionValid"]

	TParamCommandComment_getDepth: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [uint32]
		abi: default
	] (clang) "clang_TParamCommandComment_getDepth"]

	TParamCommandComment_getIndex: make routine! compose/deep [[
		Comment [(CXComment)]
		Depth [uint32]
		return: [uint32]
		abi: default
	] (clang) "clang_TParamCommandComment_getIndex"]

	VerbatimBlockLineComment_getText: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_VerbatimBlockLineComment_getText"]

	VerbatimLineComment_getText: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_VerbatimLineComment_getText"]

	HTMLTagComment_getAsString: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_HTMLTagComment_getAsString"]

	FullComment_getAsHTML: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_FullComment_getAsHTML"]

	FullComment_getAsXML: make routine! compose/deep [[
		Comment [(CXComment)]
		return: [(CXString)]
		abi: default
	] (clang) "clang_FullComment_getAsXML"]

]
