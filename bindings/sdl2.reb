REBOL [
	comment: "Generated by c2r3.reb, DO NOT EDIT"
]
make object! [
	SDL_bool: [
		SDL_FALSE 0
		SDL_TRUE 1
	]

	SDL_DUMMY_ENUM: [
		DUMMY_ENUM_VALUE 0
	]

	SDL_assert_state: [
		SDL_ASSERTION_RETRY 0
		SDL_ASSERTION_BREAK 1
		SDL_ASSERTION_ABORT 2
		SDL_ASSERTION_IGNORE 3
		SDL_ASSERTION_ALWAYS_IGNORE 4
	]

	SDL_errorcode: [
		SDL_ENOMEM 0
		SDL_EFREAD 1
		SDL_EFWRITE 2
		SDL_EFSEEK 3
		SDL_UNSUPPORTED 4
		SDL_LASTERROR 5
	]

	SDL_ThreadPriority: [
		SDL_THREAD_PRIORITY_LOW 0
		SDL_THREAD_PRIORITY_NORMAL 1
		SDL_THREAD_PRIORITY_HIGH 2
	]

	SDL_AudioStatus: [
		SDL_AUDIO_STOPPED 0
		SDL_AUDIO_PLAYING 1
		SDL_AUDIO_PAUSED 2
	]

	SDL_BlendMode: [
		SDL_BLENDMODE_NONE 0
		SDL_BLENDMODE_BLEND 1
		SDL_BLENDMODE_ADD 2
		SDL_BLENDMODE_MOD 4
	]

	SDL_WindowFlags: [
		SDL_WINDOW_FULLSCREEN 1
		SDL_WINDOW_OPENGL 2
		SDL_WINDOW_SHOWN 4
		SDL_WINDOW_HIDDEN 8
		SDL_WINDOW_BORDERLESS 16
		SDL_WINDOW_RESIZABLE 32
		SDL_WINDOW_MINIMIZED 64
		SDL_WINDOW_MAXIMIZED 128
		SDL_WINDOW_INPUT_GRABBED 256
		SDL_WINDOW_INPUT_FOCUS 512
		SDL_WINDOW_MOUSE_FOCUS 1024
		SDL_WINDOW_FULLSCREEN_DESKTOP 4097
		SDL_WINDOW_FOREIGN 2048
		SDL_WINDOW_ALLOW_HIGHDPI 8192
	]

	SDL_WindowEventID: [
		SDL_WINDOWEVENT_NONE 0
		SDL_WINDOWEVENT_SHOWN 1
		SDL_WINDOWEVENT_HIDDEN 2
		SDL_WINDOWEVENT_EXPOSED 3
		SDL_WINDOWEVENT_MOVED 4
		SDL_WINDOWEVENT_RESIZED 5
		SDL_WINDOWEVENT_SIZE_CHANGED 6
		SDL_WINDOWEVENT_MINIMIZED 7
		SDL_WINDOWEVENT_MAXIMIZED 8
		SDL_WINDOWEVENT_RESTORED 9
		SDL_WINDOWEVENT_ENTER 10
		SDL_WINDOWEVENT_LEAVE 11
		SDL_WINDOWEVENT_FOCUS_GAINED 12
		SDL_WINDOWEVENT_FOCUS_LOST 13
		SDL_WINDOWEVENT_CLOSE 14
	]

	SDL_GLattr: [
		SDL_GL_RED_SIZE 0
		SDL_GL_GREEN_SIZE 1
		SDL_GL_BLUE_SIZE 2
		SDL_GL_ALPHA_SIZE 3
		SDL_GL_BUFFER_SIZE 4
		SDL_GL_DOUBLEBUFFER 5
		SDL_GL_DEPTH_SIZE 6
		SDL_GL_STENCIL_SIZE 7
		SDL_GL_ACCUM_RED_SIZE 8
		SDL_GL_ACCUM_GREEN_SIZE 9
		SDL_GL_ACCUM_BLUE_SIZE 10
		SDL_GL_ACCUM_ALPHA_SIZE 11
		SDL_GL_STEREO 12
		SDL_GL_MULTISAMPLEBUFFERS 13
		SDL_GL_MULTISAMPLESAMPLES 14
		SDL_GL_ACCELERATED_VISUAL 15
		SDL_GL_RETAINED_BACKING 16
		SDL_GL_CONTEXT_MAJOR_VERSION 17
		SDL_GL_CONTEXT_MINOR_VERSION 18
		SDL_GL_CONTEXT_EGL 19
		SDL_GL_CONTEXT_FLAGS 20
		SDL_GL_CONTEXT_PROFILE_MASK 21
		SDL_GL_SHARE_WITH_CURRENT_CONTEXT 22
		SDL_GL_FRAMEBUFFER_SRGB_CAPABLE 23
	]

	SDL_GLprofile: [
		SDL_GL_CONTEXT_PROFILE_CORE 1
		SDL_GL_CONTEXT_PROFILE_COMPATIBILITY 2
		SDL_GL_CONTEXT_PROFILE_ES 4
	]

	SDL_GLcontextFlag: [
		SDL_GL_CONTEXT_DEBUG_FLAG 1
		SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG 2
		SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG 4
		SDL_GL_CONTEXT_RESET_ISOLATION_FLAG 8
	]

	SDL_Scancode: [
		SDL_SCANCODE_UNKNOWN 0
		SDL_SCANCODE_A 4
		SDL_SCANCODE_B 5
		SDL_SCANCODE_C 6
		SDL_SCANCODE_D 7
		SDL_SCANCODE_E 8
		SDL_SCANCODE_F 9
		SDL_SCANCODE_G 10
		SDL_SCANCODE_H 11
		SDL_SCANCODE_I 12
		SDL_SCANCODE_J 13
		SDL_SCANCODE_K 14
		SDL_SCANCODE_L 15
		SDL_SCANCODE_M 16
		SDL_SCANCODE_N 17
		SDL_SCANCODE_O 18
		SDL_SCANCODE_P 19
		SDL_SCANCODE_Q 20
		SDL_SCANCODE_R 21
		SDL_SCANCODE_S 22
		SDL_SCANCODE_T 23
		SDL_SCANCODE_U 24
		SDL_SCANCODE_V 25
		SDL_SCANCODE_W 26
		SDL_SCANCODE_X 27
		SDL_SCANCODE_Y 28
		SDL_SCANCODE_Z 29
		SDL_SCANCODE_1 30
		SDL_SCANCODE_2 31
		SDL_SCANCODE_3 32
		SDL_SCANCODE_4 33
		SDL_SCANCODE_5 34
		SDL_SCANCODE_6 35
		SDL_SCANCODE_7 36
		SDL_SCANCODE_8 37
		SDL_SCANCODE_9 38
		SDL_SCANCODE_0 39
		SDL_SCANCODE_RETURN 40
		SDL_SCANCODE_ESCAPE 41
		SDL_SCANCODE_BACKSPACE 42
		SDL_SCANCODE_TAB 43
		SDL_SCANCODE_SPACE 44
		SDL_SCANCODE_MINUS 45
		SDL_SCANCODE_EQUALS 46
		SDL_SCANCODE_LEFTBRACKET 47
		SDL_SCANCODE_RIGHTBRACKET 48
		SDL_SCANCODE_BACKSLASH 49
		SDL_SCANCODE_NONUSHASH 50
		SDL_SCANCODE_SEMICOLON 51
		SDL_SCANCODE_APOSTROPHE 52
		SDL_SCANCODE_GRAVE 53
		SDL_SCANCODE_COMMA 54
		SDL_SCANCODE_PERIOD 55
		SDL_SCANCODE_SLASH 56
		SDL_SCANCODE_CAPSLOCK 57
		SDL_SCANCODE_F1 58
		SDL_SCANCODE_F2 59
		SDL_SCANCODE_F3 60
		SDL_SCANCODE_F4 61
		SDL_SCANCODE_F5 62
		SDL_SCANCODE_F6 63
		SDL_SCANCODE_F7 64
		SDL_SCANCODE_F8 65
		SDL_SCANCODE_F9 66
		SDL_SCANCODE_F10 67
		SDL_SCANCODE_F11 68
		SDL_SCANCODE_F12 69
		SDL_SCANCODE_PRINTSCREEN 70
		SDL_SCANCODE_SCROLLLOCK 71
		SDL_SCANCODE_PAUSE 72
		SDL_SCANCODE_INSERT 73
		SDL_SCANCODE_HOME 74
		SDL_SCANCODE_PAGEUP 75
		SDL_SCANCODE_DELETE 76
		SDL_SCANCODE_END 77
		SDL_SCANCODE_PAGEDOWN 78
		SDL_SCANCODE_RIGHT 79
		SDL_SCANCODE_LEFT 80
		SDL_SCANCODE_DOWN 81
		SDL_SCANCODE_UP 82
		SDL_SCANCODE_NUMLOCKCLEAR 83
		SDL_SCANCODE_KP_DIVIDE 84
		SDL_SCANCODE_KP_MULTIPLY 85
		SDL_SCANCODE_KP_MINUS 86
		SDL_SCANCODE_KP_PLUS 87
		SDL_SCANCODE_KP_ENTER 88
		SDL_SCANCODE_KP_1 89
		SDL_SCANCODE_KP_2 90
		SDL_SCANCODE_KP_3 91
		SDL_SCANCODE_KP_4 92
		SDL_SCANCODE_KP_5 93
		SDL_SCANCODE_KP_6 94
		SDL_SCANCODE_KP_7 95
		SDL_SCANCODE_KP_8 96
		SDL_SCANCODE_KP_9 97
		SDL_SCANCODE_KP_0 98
		SDL_SCANCODE_KP_PERIOD 99
		SDL_SCANCODE_NONUSBACKSLASH 100
		SDL_SCANCODE_APPLICATION 101
		SDL_SCANCODE_POWER 102
		SDL_SCANCODE_KP_EQUALS 103
		SDL_SCANCODE_F13 104
		SDL_SCANCODE_F14 105
		SDL_SCANCODE_F15 106
		SDL_SCANCODE_F16 107
		SDL_SCANCODE_F17 108
		SDL_SCANCODE_F18 109
		SDL_SCANCODE_F19 110
		SDL_SCANCODE_F20 111
		SDL_SCANCODE_F21 112
		SDL_SCANCODE_F22 113
		SDL_SCANCODE_F23 114
		SDL_SCANCODE_F24 115
		SDL_SCANCODE_EXECUTE 116
		SDL_SCANCODE_HELP 117
		SDL_SCANCODE_MENU 118
		SDL_SCANCODE_SELECT 119
		SDL_SCANCODE_STOP 120
		SDL_SCANCODE_AGAIN 121
		SDL_SCANCODE_UNDO 122
		SDL_SCANCODE_CUT 123
		SDL_SCANCODE_COPY 124
		SDL_SCANCODE_PASTE 125
		SDL_SCANCODE_FIND 126
		SDL_SCANCODE_MUTE 127
		SDL_SCANCODE_VOLUMEUP 128
		SDL_SCANCODE_VOLUMEDOWN 129
		SDL_SCANCODE_KP_COMMA 133
		SDL_SCANCODE_KP_EQUALSAS400 134
		SDL_SCANCODE_INTERNATIONAL1 135
		SDL_SCANCODE_INTERNATIONAL2 136
		SDL_SCANCODE_INTERNATIONAL3 137
		SDL_SCANCODE_INTERNATIONAL4 138
		SDL_SCANCODE_INTERNATIONAL5 139
		SDL_SCANCODE_INTERNATIONAL6 140
		SDL_SCANCODE_INTERNATIONAL7 141
		SDL_SCANCODE_INTERNATIONAL8 142
		SDL_SCANCODE_INTERNATIONAL9 143
		SDL_SCANCODE_LANG1 144
		SDL_SCANCODE_LANG2 145
		SDL_SCANCODE_LANG3 146
		SDL_SCANCODE_LANG4 147
		SDL_SCANCODE_LANG5 148
		SDL_SCANCODE_LANG6 149
		SDL_SCANCODE_LANG7 150
		SDL_SCANCODE_LANG8 151
		SDL_SCANCODE_LANG9 152
		SDL_SCANCODE_ALTERASE 153
		SDL_SCANCODE_SYSREQ 154
		SDL_SCANCODE_CANCEL 155
		SDL_SCANCODE_CLEAR 156
		SDL_SCANCODE_PRIOR 157
		SDL_SCANCODE_RETURN2 158
		SDL_SCANCODE_SEPARATOR 159
		SDL_SCANCODE_OUT 160
		SDL_SCANCODE_OPER 161
		SDL_SCANCODE_CLEARAGAIN 162
		SDL_SCANCODE_CRSEL 163
		SDL_SCANCODE_EXSEL 164
		SDL_SCANCODE_KP_00 176
		SDL_SCANCODE_KP_000 177
		SDL_SCANCODE_THOUSANDSSEPARATOR 178
		SDL_SCANCODE_DECIMALSEPARATOR 179
		SDL_SCANCODE_CURRENCYUNIT 180
		SDL_SCANCODE_CURRENCYSUBUNIT 181
		SDL_SCANCODE_KP_LEFTPAREN 182
		SDL_SCANCODE_KP_RIGHTPAREN 183
		SDL_SCANCODE_KP_LEFTBRACE 184
		SDL_SCANCODE_KP_RIGHTBRACE 185
		SDL_SCANCODE_KP_TAB 186
		SDL_SCANCODE_KP_BACKSPACE 187
		SDL_SCANCODE_KP_A 188
		SDL_SCANCODE_KP_B 189
		SDL_SCANCODE_KP_C 190
		SDL_SCANCODE_KP_D 191
		SDL_SCANCODE_KP_E 192
		SDL_SCANCODE_KP_F 193
		SDL_SCANCODE_KP_XOR 194
		SDL_SCANCODE_KP_POWER 195
		SDL_SCANCODE_KP_PERCENT 196
		SDL_SCANCODE_KP_LESS 197
		SDL_SCANCODE_KP_GREATER 198
		SDL_SCANCODE_KP_AMPERSAND 199
		SDL_SCANCODE_KP_DBLAMPERSAND 200
		SDL_SCANCODE_KP_VERTICALBAR 201
		SDL_SCANCODE_KP_DBLVERTICALBAR 202
		SDL_SCANCODE_KP_COLON 203
		SDL_SCANCODE_KP_HASH 204
		SDL_SCANCODE_KP_SPACE 205
		SDL_SCANCODE_KP_AT 206
		SDL_SCANCODE_KP_EXCLAM 207
		SDL_SCANCODE_KP_MEMSTORE 208
		SDL_SCANCODE_KP_MEMRECALL 209
		SDL_SCANCODE_KP_MEMCLEAR 210
		SDL_SCANCODE_KP_MEMADD 211
		SDL_SCANCODE_KP_MEMSUBTRACT 212
		SDL_SCANCODE_KP_MEMMULTIPLY 213
		SDL_SCANCODE_KP_MEMDIVIDE 214
		SDL_SCANCODE_KP_PLUSMINUS 215
		SDL_SCANCODE_KP_CLEAR 216
		SDL_SCANCODE_KP_CLEARENTRY 217
		SDL_SCANCODE_KP_BINARY 218
		SDL_SCANCODE_KP_OCTAL 219
		SDL_SCANCODE_KP_DECIMAL 220
		SDL_SCANCODE_KP_HEXADECIMAL 221
		SDL_SCANCODE_LCTRL 224
		SDL_SCANCODE_LSHIFT 225
		SDL_SCANCODE_LALT 226
		SDL_SCANCODE_LGUI 227
		SDL_SCANCODE_RCTRL 228
		SDL_SCANCODE_RSHIFT 229
		SDL_SCANCODE_RALT 230
		SDL_SCANCODE_RGUI 231
		SDL_SCANCODE_MODE 257
		SDL_SCANCODE_AUDIONEXT 258
		SDL_SCANCODE_AUDIOPREV 259
		SDL_SCANCODE_AUDIOSTOP 260
		SDL_SCANCODE_AUDIOPLAY 261
		SDL_SCANCODE_AUDIOMUTE 262
		SDL_SCANCODE_MEDIASELECT 263
		SDL_SCANCODE_WWW 264
		SDL_SCANCODE_MAIL 265
		SDL_SCANCODE_CALCULATOR 266
		SDL_SCANCODE_COMPUTER 267
		SDL_SCANCODE_AC_SEARCH 268
		SDL_SCANCODE_AC_HOME 269
		SDL_SCANCODE_AC_BACK 270
		SDL_SCANCODE_AC_FORWARD 271
		SDL_SCANCODE_AC_STOP 272
		SDL_SCANCODE_AC_REFRESH 273
		SDL_SCANCODE_AC_BOOKMARKS 274
		SDL_SCANCODE_BRIGHTNESSDOWN 275
		SDL_SCANCODE_BRIGHTNESSUP 276
		SDL_SCANCODE_DISPLAYSWITCH 277
		SDL_SCANCODE_KBDILLUMTOGGLE 278
		SDL_SCANCODE_KBDILLUMDOWN 279
		SDL_SCANCODE_KBDILLUMUP 280
		SDL_SCANCODE_EJECT 281
		SDL_SCANCODE_SLEEP 282
		SDL_SCANCODE_APP1 283
		SDL_SCANCODE_APP2 284
		SDL_NUM_SCANCODES 512
	]

	SDL_Keymod: [
		KMOD_NONE 0
		KMOD_LSHIFT 1
		KMOD_RSHIFT 2
		KMOD_LCTRL 64
		KMOD_RCTRL 128
		KMOD_LALT 256
		KMOD_RALT 512
		KMOD_LGUI 1024
		KMOD_RGUI 2048
		KMOD_NUM 4096
		KMOD_CAPS 8192
		KMOD_MODE 16384
		KMOD_RESERVED 32768
	]

	SDL_SystemCursor: [
		SDL_SYSTEM_CURSOR_ARROW 0
		SDL_SYSTEM_CURSOR_IBEAM 1
		SDL_SYSTEM_CURSOR_WAIT 2
		SDL_SYSTEM_CURSOR_CROSSHAIR 3
		SDL_SYSTEM_CURSOR_WAITARROW 4
		SDL_SYSTEM_CURSOR_SIZENWSE 5
		SDL_SYSTEM_CURSOR_SIZENESW 6
		SDL_SYSTEM_CURSOR_SIZEWE 7
		SDL_SYSTEM_CURSOR_SIZENS 8
		SDL_SYSTEM_CURSOR_SIZEALL 9
		SDL_SYSTEM_CURSOR_NO 10
		SDL_SYSTEM_CURSOR_HAND 11
		SDL_NUM_SYSTEM_CURSORS 12
	]

	SDL_GameControllerBindType: [
		SDL_CONTROLLER_BINDTYPE_NONE 0
		SDL_CONTROLLER_BINDTYPE_BUTTON 1
		SDL_CONTROLLER_BINDTYPE_AXIS 2
		SDL_CONTROLLER_BINDTYPE_HAT 3
	]

	SDL_GameControllerAxis: [
		SDL_CONTROLLER_AXIS_INVALID -1
		SDL_CONTROLLER_AXIS_LEFTX 0
		SDL_CONTROLLER_AXIS_LEFTY 1
		SDL_CONTROLLER_AXIS_RIGHTX 2
		SDL_CONTROLLER_AXIS_RIGHTY 3
		SDL_CONTROLLER_AXIS_TRIGGERLEFT 4
		SDL_CONTROLLER_AXIS_TRIGGERRIGHT 5
		SDL_CONTROLLER_AXIS_MAX 6
	]

	SDL_GameControllerButton: [
		SDL_CONTROLLER_BUTTON_INVALID -1
		SDL_CONTROLLER_BUTTON_A 0
		SDL_CONTROLLER_BUTTON_B 1
		SDL_CONTROLLER_BUTTON_X 2
		SDL_CONTROLLER_BUTTON_Y 3
		SDL_CONTROLLER_BUTTON_BACK 4
		SDL_CONTROLLER_BUTTON_GUIDE 5
		SDL_CONTROLLER_BUTTON_START 6
		SDL_CONTROLLER_BUTTON_LEFTSTICK 7
		SDL_CONTROLLER_BUTTON_RIGHTSTICK 8
		SDL_CONTROLLER_BUTTON_LEFTSHOULDER 9
		SDL_CONTROLLER_BUTTON_RIGHTSHOULDER 10
		SDL_CONTROLLER_BUTTON_DPAD_UP 11
		SDL_CONTROLLER_BUTTON_DPAD_DOWN 12
		SDL_CONTROLLER_BUTTON_DPAD_LEFT 13
		SDL_CONTROLLER_BUTTON_DPAD_RIGHT 14
		SDL_CONTROLLER_BUTTON_MAX 15
	]

	SDL_EventType: [
		SDL_FIRSTEVENT 0
		SDL_QUIT 256
		SDL_APP_TERMINATING 257
		SDL_APP_LOWMEMORY 258
		SDL_APP_WILLENTERBACKGROUND 259
		SDL_APP_DIDENTERBACKGROUND 260
		SDL_APP_WILLENTERFOREGROUND 261
		SDL_APP_DIDENTERFOREGROUND 262
		SDL_WINDOWEVENT 512
		SDL_SYSWMEVENT 513
		SDL_KEYDOWN 768
		SDL_KEYUP 769
		SDL_TEXTEDITING 770
		SDL_TEXTINPUT 771
		SDL_MOUSEMOTION 1024
		SDL_MOUSEBUTTONDOWN 1025
		SDL_MOUSEBUTTONUP 1026
		SDL_MOUSEWHEEL 1027
		SDL_JOYAXISMOTION 1536
		SDL_JOYBALLMOTION 1537
		SDL_JOYHATMOTION 1538
		SDL_JOYBUTTONDOWN 1539
		SDL_JOYBUTTONUP 1540
		SDL_JOYDEVICEADDED 1541
		SDL_JOYDEVICEREMOVED 1542
		SDL_CONTROLLERAXISMOTION 1616
		SDL_CONTROLLERBUTTONDOWN 1617
		SDL_CONTROLLERBUTTONUP 1618
		SDL_CONTROLLERDEVICEADDED 1619
		SDL_CONTROLLERDEVICEREMOVED 1620
		SDL_CONTROLLERDEVICEREMAPPED 1621
		SDL_FINGERDOWN 1792
		SDL_FINGERUP 1793
		SDL_FINGERMOTION 1794
		SDL_DOLLARGESTURE 2048
		SDL_DOLLARRECORD 2049
		SDL_MULTIGESTURE 2050
		SDL_CLIPBOARDUPDATE 2304
		SDL_DROPFILE 4096
		SDL_RENDER_TARGETS_RESET 8192
		SDL_USEREVENT 32768
		SDL_LASTEVENT 65535
	]

	SDL_eventaction: [
		SDL_ADDEVENT 0
		SDL_PEEKEVENT 1
		SDL_GETEVENT 2
	]

	SDL_HintPriority: [
		SDL_HINT_DEFAULT 0
		SDL_HINT_NORMAL 1
		SDL_HINT_OVERRIDE 2
	]

	SDL_LogPriority: [
		SDL_LOG_PRIORITY_VERBOSE 1
		SDL_LOG_PRIORITY_DEBUG 2
		SDL_LOG_PRIORITY_INFO 3
		SDL_LOG_PRIORITY_WARN 4
		SDL_LOG_PRIORITY_ERROR 5
		SDL_LOG_PRIORITY_CRITICAL 6
		SDL_NUM_LOG_PRIORITIES 7
	]

	SDL_MessageBoxFlags: [
		SDL_MESSAGEBOX_ERROR 16
		SDL_MESSAGEBOX_WARNING 32
		SDL_MESSAGEBOX_INFORMATION 64
	]

	SDL_MessageBoxButtonFlags: [
		SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT 1
		SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT 2
	]

	SDL_MessageBoxColorType: [
		SDL_MESSAGEBOX_COLOR_BACKGROUND 0
		SDL_MESSAGEBOX_COLOR_TEXT 1
		SDL_MESSAGEBOX_COLOR_BUTTON_BORDER 2
		SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND 3
		SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED 4
		SDL_MESSAGEBOX_COLOR_MAX 5
	]

	SDL_PowerState: [
		SDL_POWERSTATE_UNKNOWN 0
		SDL_POWERSTATE_ON_BATTERY 1
		SDL_POWERSTATE_NO_BATTERY 2
		SDL_POWERSTATE_CHARGING 3
		SDL_POWERSTATE_CHARGED 4
	]

	SDL_RendererFlags: [
		SDL_RENDERER_SOFTWARE 1
		SDL_RENDERER_ACCELERATED 2
		SDL_RENDERER_PRESENTVSYNC 4
		SDL_RENDERER_TARGETTEXTURE 8
	]

	SDL_TextureAccess: [
		SDL_TEXTUREACCESS_STATIC 0
		SDL_TEXTUREACCESS_STREAMING 1
		SDL_TEXTUREACCESS_TARGET 2
	]

	SDL_TextureModulate: [
		SDL_TEXTUREMODULATE_NONE 0
		SDL_TEXTUREMODULATE_COLOR 1
		SDL_TEXTUREMODULATE_ALPHA 2
	]

	SDL_RendererFlip: [
		SDL_FLIP_NONE 0
		SDL_FLIP_HORIZONTAL 1
		SDL_FLIP_VERTICAL 2
	]

	SDL_assert_data: make struct! compose/deep [
		always_ignore [int32]
		trigger_count [uint32]
		condition [pointer]
		filename [pointer]
		linenum [int32]
		padding5 [uint8 [4]]
		function [pointer]
		next [pointer]
	]
	SDL_atomic_t: make struct! compose/deep [
		value [int32]
	]
	SDL_RWops: make struct! compose/deep [
		;size, merged with the previous field
		;seek, merged with the previous field
		;size_t, merged with the previous field
		;close, merged with the previous field
		;type, merged with the previous field
	]
	SDL_AudioSpec: make struct! compose/deep [
		freq [int32]
		format [uint16]
		channels [uint8]
		silence [uint8]
		samples [uint16]
		padding [uint16]
		size [uint32]
		callback [pointer]
		userdata [pointer]
	]
	SDL_AudioCVT: make struct! compose/deep [
		needed [int32]
		src_format [uint16]
		dst_format [uint16]
		rate_incr [double]
		buf [pointer]
		len [int32]
		len_cvt [int32]
		len_mult [int32]
		len_ratio [double]
		filters [pointer [10]]
		filter_index [int32]
	]
	SDL_Color: make struct! compose/deep [
		r [uint8]
		g [uint8]
		b [uint8]
		a [uint8]
	]
	SDL_Palette: make struct! compose/deep [
		ncolors [int32]
		padding1 [uint8 [4]]
		colors [pointer]
		version [uint32]
		refcount [int32]
	]
	SDL_PixelFormat: make struct! compose/deep [
		format [uint32]
		padding1 [uint8 [4]]
		palette [pointer]
		BitsPerPixel [uint8]
		BytesPerPixel [uint8]
		padding [uint8 [2]]
		Rmask [uint32]
		Gmask [uint32]
		Bmask [uint32]
		Amask [uint32]
		Rloss [uint8]
		Gloss [uint8]
		Bloss [uint8]
		Aloss [uint8]
		Rshift [uint8]
		Gshift [uint8]
		Bshift [uint8]
		Ashift [uint8]
		refcount [int32]
		next [pointer]
	]
	SDL_Point: make struct! compose/deep [
		x [int32]
		y [int32]
	]
	SDL_Rect: make struct! compose/deep [
		x [int32]
		y [int32]
		w [int32]
		h [int32]
	]
	SDL_Surface: make struct! compose/deep [
		flags [uint32]
		padding1 [uint8 [4]]
		format [pointer]
		w [int32]
		h [int32]
		pitch [int32]
		padding5 [uint8 [4]]
		pixels [pointer]
		userdata [pointer]
		locked [int32]
		padding8 [uint8 [4]]
		lock_data [pointer]
		clip_rect [(SDL_Rect)]
		map [pointer]
		refcount [int32]
	]
	SDL_DisplayMode: make struct! compose/deep [
		format [uint32]
		w [int32]
		h [int32]
		refresh_rate [int32]
		driverdata [pointer]
	]
	SDL_Keysym: make struct! compose/deep [
		scancode [int32]
		sym [int32]
		mod [uint16]
		padding3 [uint8 [2]]
		unused [uint32]
	]
	SDL_JoystickGUID: make struct! compose/deep [
		data [uint8 [16]]
	]
	SDL_GameControllerButtonBind: make struct! compose/deep [
		bindType [int32]
	]
	SDL_Finger: make struct! compose/deep [
		id [int64]
		x [float]
		y [float]
		pressure [float]
	]
	SDL_CommonEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
	]
	SDL_WindowEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		event [uint8]
		padding1 [uint8]
		padding2 [uint8]
		padding3 [uint8]
		data1 [int32]
		data2 [int32]
	]
	SDL_KeyboardEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		state [uint8]
		repeat [uint8]
		padding2 [uint8]
		padding3 [uint8]
		keysym [(SDL_Keysym)]
	]
	SDL_TextEditingEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		text [int8 [32]]
		start [int32]
		length [int32]
	]
	SDL_TextInputEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		text [int8 [32]]
	]
	SDL_MouseMotionEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		which [uint32]
		state [uint32]
		x [int32]
		y [int32]
		xrel [int32]
		yrel [int32]
	]
	SDL_MouseButtonEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		which [uint32]
		button [uint8]
		state [uint8]
		clicks [uint8]
		padding1 [uint8]
		x [int32]
		y [int32]
	]
	SDL_MouseWheelEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		which [uint32]
		x [int32]
		y [int32]
	]
	SDL_JoyAxisEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		axis [uint8]
		padding1 [uint8]
		padding2 [uint8]
		padding3 [uint8]
		value [int16]
		padding4 [uint16]
	]
	SDL_JoyBallEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		ball [uint8]
		padding1 [uint8]
		padding2 [uint8]
		padding3 [uint8]
		xrel [int16]
		yrel [int16]
	]
	SDL_JoyHatEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		hat [uint8]
		value [uint8]
		padding1 [uint8]
		padding2 [uint8]
	]
	SDL_JoyButtonEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		button [uint8]
		state [uint8]
		padding1 [uint8]
		padding2 [uint8]
	]
	SDL_JoyDeviceEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
	]
	SDL_ControllerAxisEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		axis [uint8]
		padding1 [uint8]
		padding2 [uint8]
		padding3 [uint8]
		value [int16]
		padding4 [uint16]
	]
	SDL_ControllerButtonEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
		button [uint8]
		state [uint8]
		padding1 [uint8]
		padding2 [uint8]
	]
	SDL_ControllerDeviceEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		which [int32]
	]
	SDL_TouchFingerEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		touchId [int64]
		fingerId [int64]
		x [float]
		y [float]
		dx [float]
		dy [float]
		pressure [float]
	]
	SDL_MultiGestureEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		touchId [int64]
		dTheta [float]
		dDist [float]
		x [float]
		y [float]
		numFingers [uint16]
		padding [uint16]
	]
	SDL_DollarGestureEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		touchId [int64]
		gestureId [int64]
		numFingers [uint32]
		error [float]
		x [float]
		y [float]
	]
	SDL_DropEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		file [pointer]
	]
	SDL_QuitEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
	]
	SDL_OSEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
	]
	SDL_UserEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		windowID [uint32]
		code [int32]
		data1 [pointer]
		data2 [pointer]
	]
	SDL_SysWMEvent: make struct! compose/deep [
		type [uint32]
		timestamp [uint32]
		msg [pointer]
	]
	SDL_Event: make struct! compose/deep [
		fake [uint8 [56]]
	]
	SDL_HapticDirection: make struct! compose/deep [
		type [uint8]
		padding1 [uint8 [3]]
		dir [int32 [3]]
	]
	SDL_HapticConstant: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		direction [(SDL_HapticDirection)]
		length [uint32]
		delay [uint16]
		button [uint16]
		interval [uint16]
		level [int16]
		attack_length [uint16]
		attack_level [uint16]
		fade_length [uint16]
		fade_level [uint16]
	]
	SDL_HapticPeriodic: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		direction [(SDL_HapticDirection)]
		length [uint32]
		delay [uint16]
		button [uint16]
		interval [uint16]
		period [uint16]
		magnitude [int16]
		offset [int16]
		phase [uint16]
		attack_length [uint16]
		attack_level [uint16]
		fade_length [uint16]
		fade_level [uint16]
	]
	SDL_HapticCondition: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		direction [(SDL_HapticDirection)]
		length [uint32]
		delay [uint16]
		button [uint16]
		interval [uint16]
		right_sat [uint16 [3]]
		left_sat [uint16 [3]]
		right_coeff [int16 [3]]
		left_coeff [int16 [3]]
		deadband [uint16 [3]]
		center [int16 [3]]
	]
	SDL_HapticRamp: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		direction [(SDL_HapticDirection)]
		length [uint32]
		delay [uint16]
		button [uint16]
		interval [uint16]
		start [int16]
		end [int16]
		attack_length [uint16]
		attack_level [uint16]
		fade_length [uint16]
		fade_level [uint16]
	]
	SDL_HapticLeftRight: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		length [uint32]
		large_magnitude [uint16]
		small_magnitude [uint16]
	]
	SDL_HapticCustom: make struct! compose/deep [
		type [uint16]
		padding1 [uint8 [2]]
		direction [(SDL_HapticDirection)]
		length [uint32]
		delay [uint16]
		button [uint16]
		interval [uint16]
		channels [uint8]
		padding7 [uint8 [1]]
		period [uint16]
		samples [uint16]
		padding9 [uint8 [4]]
		data [pointer]
		attack_length [uint16]
		attack_level [uint16]
		fade_length [uint16]
		fade_level [uint16]
	]
	SDL_HapticEffect: make struct! compose/deep [
		fake [uint8 [72]]
	]
	SDL_MessageBoxButtonData: make struct! compose/deep [
		flags [uint32]
		buttonid [int32]
		text [pointer]
	]
	SDL_MessageBoxColor: make struct! compose/deep [
		r [uint8]
		g [uint8]
		b [uint8]
	]
	SDL_MessageBoxColorScheme: make struct! compose/deep [
		colors [(SDL_MessageBoxColor) [5]]
	]
	SDL_MessageBoxData: make struct! compose/deep [
		flags [uint32]
		padding1 [uint8 [4]]
		window [pointer]
		title [pointer]
		message [pointer]
		numbuttons [int32]
		padding5 [uint8 [4]]
		buttons [pointer]
		colorScheme [pointer]
	]
	SDL_RendererInfo: make struct! compose/deep [
		name [pointer]
		flags [uint32]
		num_texture_formats [uint32]
		texture_formats [uint32 [16]]
		max_texture_width [int32]
		max_texture_height [int32]
	]
	SDL_version: make struct! compose/deep [
		major [uint8]
		minor [uint8]
		patch [uint8]
	]
	sdl2: make library! %libSDL2.so
	GetPlatform: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetPlatform"]

	malloc: make routine! compose/deep [[
		size [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_malloc"]

	calloc: make routine! compose/deep [[
		nmemb [int32]
		size [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_calloc"]

	realloc: make routine! compose/deep [[
		mem [pointer]
		size [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_realloc"]

	free: make routine! compose/deep [[
		mem [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_free"]

	getenv: make routine! compose/deep [[
		name [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_getenv"]

	setenv: make routine! compose/deep [[
		name [pointer]
		value [pointer]
		overwrite [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_setenv"]

	qsort: make routine! compose/deep [[
		base [pointer]
		nmemb [int32]
		size [int32]
		compare [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_qsort"]

	abs: make routine! compose/deep [[
		x [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_abs"]

	isdigit: make routine! compose/deep [[
		x [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_isdigit"]

	isspace: make routine! compose/deep [[
		x [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_isspace"]

	toupper: make routine! compose/deep [[
		x [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_toupper"]

	tolower: make routine! compose/deep [[
		x [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_tolower"]

	memset: make routine! compose/deep [[
		dst [pointer]
		c [int32]
		len [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_memset"]

	memcpy: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		len [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_memcpy"]

	memmove: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		len [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_memmove"]

	memcmp: make routine! compose/deep [[
		s1 [pointer]
		s2 [pointer]
		len [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_memcmp"]

	wcslen: make routine! compose/deep [[
		wstr [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_wcslen"]

	wcslcpy: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		maxlen [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_wcslcpy"]

	wcslcat: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		maxlen [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_wcslcat"]

	strlen: make routine! compose/deep [[
		str [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strlen"]

	strlcpy: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		maxlen [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strlcpy"]

	utf8strlcpy: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		dst_bytes [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_utf8strlcpy"]

	strlcat: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		maxlen [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strlcat"]

	strdup: make routine! compose/deep [[
		str [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strdup"]

	strrev: make routine! compose/deep [[
		str [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strrev"]

	strupr: make routine! compose/deep [[
		str [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strupr"]

	strlwr: make routine! compose/deep [[
		str [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strlwr"]

	strchr: make routine! compose/deep [[
		str [pointer]
		c [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strchr"]

	strrchr: make routine! compose/deep [[
		str [pointer]
		c [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strrchr"]

	strstr: make routine! compose/deep [[
		haystack [pointer]
		needle [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_strstr"]

	itoa: make routine! compose/deep [[
		value [int32]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_itoa"]

	uitoa: make routine! compose/deep [[
		value [uint32]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_uitoa"]

	ltoa: make routine! compose/deep [[
		value [int64]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_ltoa"]

	ultoa: make routine! compose/deep [[
		value [uint64]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_ultoa"]

	lltoa: make routine! compose/deep [[
		value [int64]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_lltoa"]

	ulltoa: make routine! compose/deep [[
		value [uint64]
		str [pointer]
		radix [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_ulltoa"]

	atoi: make routine! compose/deep [[
		str [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_atoi"]

	atof: make routine! compose/deep [[
		str [pointer]
		return: [double]
		abi: default
	] (sdl2) "SDL_atof"]

	strtol: make routine! compose/deep [[
		str [pointer]
		endp [pointer]
		base [int32]
		return: [int64]
		abi: default
	] (sdl2) "SDL_strtol"]

	strtoul: make routine! compose/deep [[
		str [pointer]
		endp [pointer]
		base [int32]
		return: [uint64]
		abi: default
	] (sdl2) "SDL_strtoul"]

	strtoll: make routine! compose/deep [[
		str [pointer]
		endp [pointer]
		base [int32]
		return: [int64]
		abi: default
	] (sdl2) "SDL_strtoll"]

	strtoull: make routine! compose/deep [[
		str [pointer]
		endp [pointer]
		base [int32]
		return: [uint64]
		abi: default
	] (sdl2) "SDL_strtoull"]

	strtod: make routine! compose/deep [[
		str [pointer]
		endp [pointer]
		return: [double]
		abi: default
	] (sdl2) "SDL_strtod"]

	strcmp: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strcmp"]

	strncmp: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		maxlen [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strncmp"]

	strcasecmp: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strcasecmp"]

	strncasecmp: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		len [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_strncasecmp"]

	sscanf: make routine! compose/deep [[
		text [pointer]
		fmt [pointer]
		...
		return: [int32]
		abi: default
	] (sdl2) "SDL_sscanf"]

	vsscanf: make routine! compose/deep [[
		text [pointer]
		fmt [pointer]
		ap [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_vsscanf"]

	snprintf: make routine! compose/deep [[
		text [pointer]
		maxlen [int32]
		fmt [pointer]
		...
		return: [int32]
		abi: default
	] (sdl2) "SDL_snprintf"]

	vsnprintf: make routine! compose/deep [[
		text [pointer]
		maxlen [int32]
		fmt [pointer]
		ap [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_vsnprintf"]

	acos: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_acos"]

	asin: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_asin"]

	atan: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_atan"]

	atan2: make routine! compose/deep [[
		x [double]
		y [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_atan2"]

	ceil: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_ceil"]

	copysign: make routine! compose/deep [[
		x [double]
		y [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_copysign"]

	cos: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_cos"]

	cosf: make routine! compose/deep [[
		x [float]
		return: [float]
		abi: default
	] (sdl2) "SDL_cosf"]

	fabs: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_fabs"]

	floor: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_floor"]

	log: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_log"]

	pow: make routine! compose/deep [[
		x [double]
		y [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_pow"]

	scalbn: make routine! compose/deep [[
		x [double]
		n [int32]
		return: [double]
		abi: default
	] (sdl2) "SDL_scalbn"]

	sin: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_sin"]

	sinf: make routine! compose/deep [[
		x [float]
		return: [float]
		abi: default
	] (sdl2) "SDL_sinf"]

	sqrt: make routine! compose/deep [[
		x [double]
		return: [double]
		abi: default
	] (sdl2) "SDL_sqrt"]

	iconv_open: make routine! compose/deep [[
		tocode [pointer]
		fromcode [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_iconv_open"]

	iconv_close: make routine! compose/deep [[
		cd [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_iconv_close"]

	iconv: make routine! compose/deep [[
		cd [pointer]
		inbuf [pointer]
		inbytesleft [pointer]
		outbuf [pointer]
		outbytesleft [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_iconv"]

	iconv_string: make routine! compose/deep [[
		tocode [pointer]
		fromcode [pointer]
		inbuf [pointer]
		inbytesleft [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_iconv_string"]

	SetMainReady: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_SetMainReady"]

	ReportAssertion: make routine! compose/deep [[
		arg1 [pointer]
		arg2 [pointer]
		arg3 [pointer]
		arg4 [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ReportAssertion"]

	SetAssertionHandler: make routine! compose/deep [[
		handler [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetAssertionHandler"]

	GetDefaultAssertionHandler: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetDefaultAssertionHandler"]

	GetAssertionHandler: make routine! compose/deep [[
		puserdata [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetAssertionHandler"]

	GetAssertionReport: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetAssertionReport"]

	ResetAssertionReport: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_ResetAssertionReport"]

	AtomicTryLock: make routine! compose/deep [[
		lock [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicTryLock"]

	AtomicLock: make routine! compose/deep [[
		lock [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_AtomicLock"]

	AtomicUnlock: make routine! compose/deep [[
		lock [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_AtomicUnlock"]

	AtomicCAS: make routine! compose/deep [[
		a [pointer]
		oldval [int32]
		newval [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicCAS"]

	AtomicSet: make routine! compose/deep [[
		a [pointer]
		v [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicSet"]

	AtomicGet: make routine! compose/deep [[
		a [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicGet"]

	AtomicAdd: make routine! compose/deep [[
		a [pointer]
		v [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicAdd"]

	AtomicCASPtr: make routine! compose/deep [[
		a [pointer]
		oldval [pointer]
		newval [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AtomicCASPtr"]

	AtomicSetPtr: make routine! compose/deep [[
		a [pointer]
		v [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_AtomicSetPtr"]

	AtomicGetPtr: make routine! compose/deep [[
		a [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_AtomicGetPtr"]

	SetError: make routine! compose/deep [[
		fmt [pointer]
		...
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetError"]

	GetError: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetError"]

	ClearError: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_ClearError"]

	Error: make routine! compose/deep [[
		code [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_Error"]

	CreateMutex: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateMutex"]

	LockMutex: make routine! compose/deep [[
		mutex [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LockMutex"]

	TryLockMutex: make routine! compose/deep [[
		mutex [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_TryLockMutex"]

	UnlockMutex: make routine! compose/deep [[
		mutex [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UnlockMutex"]

	DestroyMutex: make routine! compose/deep [[
		mutex [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroyMutex"]

	CreateSemaphore: make routine! compose/deep [[
		initial_value [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateSemaphore"]

	DestroySemaphore: make routine! compose/deep [[
		sem [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroySemaphore"]

	SemWait: make routine! compose/deep [[
		sem [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SemWait"]

	SemTryWait: make routine! compose/deep [[
		sem [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SemTryWait"]

	SemWaitTimeout: make routine! compose/deep [[
		sem [pointer]
		ms [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SemWaitTimeout"]

	SemPost: make routine! compose/deep [[
		sem [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SemPost"]

	SemValue: make routine! compose/deep [[
		sem [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_SemValue"]

	CreateCond: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateCond"]

	DestroyCond: make routine! compose/deep [[
		cond [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroyCond"]

	CondSignal: make routine! compose/deep [[
		cond [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_CondSignal"]

	CondBroadcast: make routine! compose/deep [[
		cond [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_CondBroadcast"]

	CondWait: make routine! compose/deep [[
		cond [pointer]
		mutex [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_CondWait"]

	CondWaitTimeout: make routine! compose/deep [[
		cond [pointer]
		mutex [pointer]
		ms [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_CondWaitTimeout"]

	CreateThread: make routine! compose/deep [[
		fn [pointer]
		name [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateThread"]

	GetThreadName: make routine! compose/deep [[
		thread [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetThreadName"]

	ThreadID: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (sdl2) "SDL_ThreadID"]

	GetThreadID: make routine! compose/deep [[
		thread [pointer]
		return: [uint64]
		abi: default
	] (sdl2) "SDL_GetThreadID"]

	SetThreadPriority: make routine! compose/deep [[
		priority [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetThreadPriority"]

	WaitThread: make routine! compose/deep [[
		thread [pointer]
		status [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_WaitThread"]

	DetachThread: make routine! compose/deep [[
		thread [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DetachThread"]

	TLSCreate: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (sdl2) "SDL_TLSCreate"]

	TLSGet: make routine! compose/deep [[
		id [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_TLSGet"]

	TLSSet: make routine! compose/deep [[
		id [uint32]
		value [pointer]
		destructor [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_TLSSet"]

	RWFromFile: make routine! compose/deep [[
		file [pointer]
		mode [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_RWFromFile"]

	RWFromFP: make routine! compose/deep [[
		fp [pointer]
		autoclose [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_RWFromFP"]

	RWFromMem: make routine! compose/deep [[
		mem [pointer]
		size [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_RWFromMem"]

	RWFromConstMem: make routine! compose/deep [[
		mem [pointer]
		size [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_RWFromConstMem"]

	AllocRW: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_AllocRW"]

	FreeRW: make routine! compose/deep [[
		area [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreeRW"]

	ReadU8: make routine! compose/deep [[
		src [pointer]
		return: [uint8]
		abi: default
	] (sdl2) "SDL_ReadU8"]

	ReadLE16: make routine! compose/deep [[
		src [pointer]
		return: [uint16]
		abi: default
	] (sdl2) "SDL_ReadLE16"]

	ReadBE16: make routine! compose/deep [[
		src [pointer]
		return: [uint16]
		abi: default
	] (sdl2) "SDL_ReadBE16"]

	ReadLE32: make routine! compose/deep [[
		src [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_ReadLE32"]

	ReadBE32: make routine! compose/deep [[
		src [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_ReadBE32"]

	ReadLE64: make routine! compose/deep [[
		src [pointer]
		return: [uint64]
		abi: default
	] (sdl2) "SDL_ReadLE64"]

	ReadBE64: make routine! compose/deep [[
		src [pointer]
		return: [uint64]
		abi: default
	] (sdl2) "SDL_ReadBE64"]

	WriteU8: make routine! compose/deep [[
		dst [pointer]
		value [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteU8"]

	WriteLE16: make routine! compose/deep [[
		dst [pointer]
		value [uint16]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteLE16"]

	WriteBE16: make routine! compose/deep [[
		dst [pointer]
		value [uint16]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteBE16"]

	WriteLE32: make routine! compose/deep [[
		dst [pointer]
		value [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteLE32"]

	WriteBE32: make routine! compose/deep [[
		dst [pointer]
		value [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteBE32"]

	WriteLE64: make routine! compose/deep [[
		dst [pointer]
		value [uint64]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteLE64"]

	WriteBE64: make routine! compose/deep [[
		dst [pointer]
		value [uint64]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WriteBE64"]

	GetNumAudioDrivers: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumAudioDrivers"]

	GetAudioDriver: make routine! compose/deep [[
		index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetAudioDriver"]

	AudioInit: make routine! compose/deep [[
		driver_name [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AudioInit"]

	AudioQuit: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_AudioQuit"]

	GetCurrentAudioDriver: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetCurrentAudioDriver"]

	OpenAudio: make routine! compose/deep [[
		desired [pointer]
		obtained [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_OpenAudio"]

	GetNumAudioDevices: make routine! compose/deep [[
		iscapture [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumAudioDevices"]

	GetAudioDeviceName: make routine! compose/deep [[
		index [int32]
		iscapture [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetAudioDeviceName"]

	OpenAudioDevice: make routine! compose/deep [[
		device [pointer]
		iscapture [int32]
		desired [pointer]
		obtained [pointer]
		allowed_changes [int32]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_OpenAudioDevice"]

	GetAudioStatus: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetAudioStatus"]

	GetAudioDeviceStatus: make routine! compose/deep [[
		dev [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetAudioDeviceStatus"]

	PauseAudio: make routine! compose/deep [[
		pause_on [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_PauseAudio"]

	PauseAudioDevice: make routine! compose/deep [[
		dev [uint32]
		pause_on [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_PauseAudioDevice"]

	LoadWAV_RW: make routine! compose/deep [[
		src [pointer]
		freesrc [int32]
		spec [pointer]
		audio_buf [pointer]
		audio_len [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_LoadWAV_RW"]

	FreeWAV: make routine! compose/deep [[
		audio_buf [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreeWAV"]

	BuildAudioCVT: make routine! compose/deep [[
		cvt [pointer]
		src_format [uint16]
		src_channels [uint8]
		src_rate [int32]
		dst_format [uint16]
		dst_channels [uint8]
		dst_rate [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_BuildAudioCVT"]

	ConvertAudio: make routine! compose/deep [[
		cvt [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ConvertAudio"]

	MixAudio: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		len [uint32]
		volume [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_MixAudio"]

	MixAudioFormat: make routine! compose/deep [[
		dst [pointer]
		src [pointer]
		format [uint16]
		len [uint32]
		volume [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_MixAudioFormat"]

	LockAudio: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_LockAudio"]

	LockAudioDevice: make routine! compose/deep [[
		dev [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_LockAudioDevice"]

	UnlockAudio: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_UnlockAudio"]

	UnlockAudioDevice: make routine! compose/deep [[
		dev [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_UnlockAudioDevice"]

	CloseAudio: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_CloseAudio"]

	CloseAudioDevice: make routine! compose/deep [[
		dev [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_CloseAudioDevice"]

	SetClipboardText: make routine! compose/deep [[
		text [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetClipboardText"]

	GetClipboardText: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetClipboardText"]

	HasClipboardText: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasClipboardText"]

	GetCPUCount: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetCPUCount"]

	GetCPUCacheLineSize: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetCPUCacheLineSize"]

	HasRDTSC: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasRDTSC"]

	HasAltiVec: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasAltiVec"]

	HasMMX: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasMMX"]

	Has3DNow: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_Has3DNow"]

	HasSSE: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasSSE"]

	HasSSE2: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasSSE2"]

	HasSSE3: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasSSE3"]

	HasSSE41: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasSSE41"]

	HasSSE42: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasSSE42"]

	HasAVX: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasAVX"]

	GetSystemRAM: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetSystemRAM"]

	GetPixelFormatName: make routine! compose/deep [[
		format [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetPixelFormatName"]

	PixelFormatEnumToMasks: make routine! compose/deep [[
		format [uint32]
		bpp [pointer]
		Rmask [pointer]
		Gmask [pointer]
		Bmask [pointer]
		Amask [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_PixelFormatEnumToMasks"]

	MasksToPixelFormatEnum: make routine! compose/deep [[
		bpp [int32]
		Rmask [uint32]
		Gmask [uint32]
		Bmask [uint32]
		Amask [uint32]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_MasksToPixelFormatEnum"]

	AllocFormat: make routine! compose/deep [[
		pixel_format [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_AllocFormat"]

	FreeFormat: make routine! compose/deep [[
		format [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreeFormat"]

	AllocPalette: make routine! compose/deep [[
		ncolors [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_AllocPalette"]

	SetPixelFormatPalette: make routine! compose/deep [[
		format [pointer]
		palette [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetPixelFormatPalette"]

	SetPaletteColors: make routine! compose/deep [[
		palette [pointer]
		colors [pointer]
		firstcolor [int32]
		ncolors [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetPaletteColors"]

	FreePalette: make routine! compose/deep [[
		palette [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreePalette"]

	MapRGB: make routine! compose/deep [[
		format [pointer]
		r [uint8]
		g [uint8]
		b [uint8]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_MapRGB"]

	MapRGBA: make routine! compose/deep [[
		format [pointer]
		r [uint8]
		g [uint8]
		b [uint8]
		a [uint8]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_MapRGBA"]

	GetRGB: make routine! compose/deep [[
		pixel [uint32]
		format [pointer]
		r [pointer]
		g [pointer]
		b [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetRGB"]

	GetRGBA: make routine! compose/deep [[
		pixel [uint32]
		format [pointer]
		r [pointer]
		g [pointer]
		b [pointer]
		a [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetRGBA"]

	CalculateGammaRamp: make routine! compose/deep [[
		gamma [float]
		ramp [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_CalculateGammaRamp"]

	HasIntersection: make routine! compose/deep [[
		A [pointer]
		B [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasIntersection"]

	IntersectRect: make routine! compose/deep [[
		A [pointer]
		B [pointer]
		result [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_IntersectRect"]

	UnionRect: make routine! compose/deep [[
		A [pointer]
		B [pointer]
		result [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_UnionRect"]

	EnclosePoints: make routine! compose/deep [[
		points [pointer]
		count [int32]
		clip [pointer]
		result [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_EnclosePoints"]

	IntersectRectAndLine: make routine! compose/deep [[
		rect [pointer]
		X1 [pointer]
		Y1 [pointer]
		X2 [pointer]
		Y2 [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_IntersectRectAndLine"]

	CreateRGBSurface: make routine! compose/deep [[
		flags [uint32]
		width [int32]
		height [int32]
		depth [int32]
		Rmask [uint32]
		Gmask [uint32]
		Bmask [uint32]
		Amask [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateRGBSurface"]

	CreateRGBSurfaceFrom: make routine! compose/deep [[
		pixels [pointer]
		width [int32]
		height [int32]
		depth [int32]
		pitch [int32]
		Rmask [uint32]
		Gmask [uint32]
		Bmask [uint32]
		Amask [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateRGBSurfaceFrom"]

	FreeSurface: make routine! compose/deep [[
		surface [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreeSurface"]

	SetSurfacePalette: make routine! compose/deep [[
		surface [pointer]
		palette [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetSurfacePalette"]

	LockSurface: make routine! compose/deep [[
		surface [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LockSurface"]

	UnlockSurface: make routine! compose/deep [[
		surface [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_UnlockSurface"]

	LoadBMP_RW: make routine! compose/deep [[
		src [pointer]
		freesrc [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_LoadBMP_RW"]

	SaveBMP_RW: make routine! compose/deep [[
		surface [pointer]
		dst [pointer]
		freedst [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SaveBMP_RW"]

	SetSurfaceRLE: make routine! compose/deep [[
		surface [pointer]
		flag [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetSurfaceRLE"]

	SetColorKey: make routine! compose/deep [[
		surface [pointer]
		flag [int32]
		key [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetColorKey"]

	GetColorKey: make routine! compose/deep [[
		surface [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetColorKey"]

	SetSurfaceColorMod: make routine! compose/deep [[
		surface [pointer]
		r [uint8]
		g [uint8]
		b [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetSurfaceColorMod"]

	GetSurfaceColorMod: make routine! compose/deep [[
		surface [pointer]
		r [pointer]
		g [pointer]
		b [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetSurfaceColorMod"]

	SetSurfaceAlphaMod: make routine! compose/deep [[
		surface [pointer]
		alpha [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetSurfaceAlphaMod"]

	GetSurfaceAlphaMod: make routine! compose/deep [[
		surface [pointer]
		alpha [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetSurfaceAlphaMod"]

	SetSurfaceBlendMode: make routine! compose/deep [[
		surface [pointer]
		blendMode [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetSurfaceBlendMode"]

	GetSurfaceBlendMode: make routine! compose/deep [[
		surface [pointer]
		blendMode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetSurfaceBlendMode"]

	SetClipRect: make routine! compose/deep [[
		surface [pointer]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetClipRect"]

	GetClipRect: make routine! compose/deep [[
		surface [pointer]
		rect [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetClipRect"]

	ConvertSurface: make routine! compose/deep [[
		src [pointer]
		fmt [pointer]
		flags [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_ConvertSurface"]

	ConvertSurfaceFormat: make routine! compose/deep [[
		src [pointer]
		pixel_format [uint32]
		flags [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_ConvertSurfaceFormat"]

	ConvertPixels: make routine! compose/deep [[
		width [int32]
		height [int32]
		src_format [uint32]
		src [pointer]
		src_pitch [int32]
		dst_format [uint32]
		dst [pointer]
		dst_pitch [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ConvertPixels"]

	FillRect: make routine! compose/deep [[
		dst [pointer]
		rect [pointer]
		color [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_FillRect"]

	FillRects: make routine! compose/deep [[
		dst [pointer]
		rects [pointer]
		count [int32]
		color [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_FillRects"]

	UpperBlit: make routine! compose/deep [[
		src [pointer]
		srcrect [pointer]
		dst [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpperBlit"]

	LowerBlit: make routine! compose/deep [[
		src [pointer]
		srcrect [pointer]
		dst [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LowerBlit"]

	SoftStretch: make routine! compose/deep [[
		src [pointer]
		srcrect [pointer]
		dst [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SoftStretch"]

	UpperBlitScaled: make routine! compose/deep [[
		src [pointer]
		srcrect [pointer]
		dst [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpperBlitScaled"]

	LowerBlitScaled: make routine! compose/deep [[
		src [pointer]
		srcrect [pointer]
		dst [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LowerBlitScaled"]

	GetNumVideoDrivers: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumVideoDrivers"]

	GetVideoDriver: make routine! compose/deep [[
		index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetVideoDriver"]

	VideoInit: make routine! compose/deep [[
		driver_name [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_VideoInit"]

	VideoQuit: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_VideoQuit"]

	GetCurrentVideoDriver: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetCurrentVideoDriver"]

	GetNumVideoDisplays: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumVideoDisplays"]

	GetDisplayName: make routine! compose/deep [[
		displayIndex [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetDisplayName"]

	GetDisplayBounds: make routine! compose/deep [[
		displayIndex [int32]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetDisplayBounds"]

	GetNumDisplayModes: make routine! compose/deep [[
		displayIndex [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumDisplayModes"]

	GetDisplayMode: make routine! compose/deep [[
		displayIndex [int32]
		modeIndex [int32]
		mode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetDisplayMode"]

	GetDesktopDisplayMode: make routine! compose/deep [[
		displayIndex [int32]
		mode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetDesktopDisplayMode"]

	GetCurrentDisplayMode: make routine! compose/deep [[
		displayIndex [int32]
		mode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetCurrentDisplayMode"]

	GetClosestDisplayMode: make routine! compose/deep [[
		displayIndex [int32]
		mode [pointer]
		closest [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetClosestDisplayMode"]

	GetWindowDisplayIndex: make routine! compose/deep [[
		window [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetWindowDisplayIndex"]

	SetWindowDisplayMode: make routine! compose/deep [[
		window [pointer]
		mode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetWindowDisplayMode"]

	GetWindowDisplayMode: make routine! compose/deep [[
		window [pointer]
		mode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetWindowDisplayMode"]

	GetWindowPixelFormat: make routine! compose/deep [[
		window [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetWindowPixelFormat"]

	CreateWindow: make routine! compose/deep [[
		title [pointer]
		x [int32]
		y [int32]
		w [int32]
		h [int32]
		flags [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateWindow"]

	CreateWindowFrom: make routine! compose/deep [[
		data [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateWindowFrom"]

	GetWindowID: make routine! compose/deep [[
		window [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetWindowID"]

	GetWindowFromID: make routine! compose/deep [[
		id [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetWindowFromID"]

	GetWindowFlags: make routine! compose/deep [[
		window [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetWindowFlags"]

	SetWindowTitle: make routine! compose/deep [[
		window [pointer]
		title [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowTitle"]

	GetWindowTitle: make routine! compose/deep [[
		window [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetWindowTitle"]

	SetWindowIcon: make routine! compose/deep [[
		window [pointer]
		icon [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowIcon"]

	SetWindowData: make routine! compose/deep [[
		window [pointer]
		name [pointer]
		userdata [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_SetWindowData"]

	GetWindowData: make routine! compose/deep [[
		window [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetWindowData"]

	SetWindowPosition: make routine! compose/deep [[
		window [pointer]
		x [int32]
		y [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowPosition"]

	GetWindowPosition: make routine! compose/deep [[
		window [pointer]
		x [pointer]
		y [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetWindowPosition"]

	SetWindowSize: make routine! compose/deep [[
		window [pointer]
		w [int32]
		h [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowSize"]

	GetWindowSize: make routine! compose/deep [[
		window [pointer]
		w [pointer]
		h [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetWindowSize"]

	SetWindowMinimumSize: make routine! compose/deep [[
		window [pointer]
		min_w [int32]
		min_h [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowMinimumSize"]

	GetWindowMinimumSize: make routine! compose/deep [[
		window [pointer]
		w [pointer]
		h [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetWindowMinimumSize"]

	SetWindowMaximumSize: make routine! compose/deep [[
		window [pointer]
		max_w [int32]
		max_h [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowMaximumSize"]

	GetWindowMaximumSize: make routine! compose/deep [[
		window [pointer]
		w [pointer]
		h [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetWindowMaximumSize"]

	SetWindowBordered: make routine! compose/deep [[
		window [pointer]
		bordered [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowBordered"]

	ShowWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_ShowWindow"]

	HideWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_HideWindow"]

	RaiseWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RaiseWindow"]

	MaximizeWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_MaximizeWindow"]

	MinimizeWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_MinimizeWindow"]

	RestoreWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RestoreWindow"]

	SetWindowFullscreen: make routine! compose/deep [[
		window [pointer]
		flags [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetWindowFullscreen"]

	GetWindowSurface: make routine! compose/deep [[
		window [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetWindowSurface"]

	UpdateWindowSurface: make routine! compose/deep [[
		window [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpdateWindowSurface"]

	UpdateWindowSurfaceRects: make routine! compose/deep [[
		window [pointer]
		rects [pointer]
		numrects [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpdateWindowSurfaceRects"]

	SetWindowGrab: make routine! compose/deep [[
		window [pointer]
		grabbed [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetWindowGrab"]

	GetWindowGrab: make routine! compose/deep [[
		window [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetWindowGrab"]

	SetWindowBrightness: make routine! compose/deep [[
		window [pointer]
		brightness [float]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetWindowBrightness"]

	GetWindowBrightness: make routine! compose/deep [[
		window [pointer]
		return: [float]
		abi: default
	] (sdl2) "SDL_GetWindowBrightness"]

	SetWindowGammaRamp: make routine! compose/deep [[
		window [pointer]
		red [pointer]
		green [pointer]
		blue [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetWindowGammaRamp"]

	GetWindowGammaRamp: make routine! compose/deep [[
		window [pointer]
		red [pointer]
		green [pointer]
		blue [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetWindowGammaRamp"]

	DestroyWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroyWindow"]

	IsScreenSaverEnabled: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_IsScreenSaverEnabled"]

	EnableScreenSaver: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_EnableScreenSaver"]

	DisableScreenSaver: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_DisableScreenSaver"]

	GL_LoadLibrary: make routine! compose/deep [[
		path [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_LoadLibrary"]

	GL_GetProcAddress: make routine! compose/deep [[
		proc [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GL_GetProcAddress"]

	GL_UnloadLibrary: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_GL_UnloadLibrary"]

	GL_ExtensionSupported: make routine! compose/deep [[
		extension [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_ExtensionSupported"]

	GL_ResetAttributes: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_GL_ResetAttributes"]

	GL_SetAttribute: make routine! compose/deep [[
		attr [int32]
		value [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_SetAttribute"]

	GL_GetAttribute: make routine! compose/deep [[
		attr [int32]
		value [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_GetAttribute"]

	GL_CreateContext: make routine! compose/deep [[
		window [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GL_CreateContext"]

	GL_MakeCurrent: make routine! compose/deep [[
		window [pointer]
		context [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_MakeCurrent"]

	GL_GetCurrentWindow: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GL_GetCurrentWindow"]

	GL_GetCurrentContext: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GL_GetCurrentContext"]

	GL_GetDrawableSize: make routine! compose/deep [[
		window [pointer]
		w [pointer]
		h [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GL_GetDrawableSize"]

	GL_SetSwapInterval: make routine! compose/deep [[
		interval [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_SetSwapInterval"]

	GL_GetSwapInterval: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_GetSwapInterval"]

	GL_SwapWindow: make routine! compose/deep [[
		window [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GL_SwapWindow"]

	GL_DeleteContext: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GL_DeleteContext"]

	GetKeyboardFocus: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetKeyboardFocus"]

	GetKeyboardState: make routine! compose/deep [[
		numkeys [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetKeyboardState"]

	GetModState: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetModState"]

	SetModState: make routine! compose/deep [[
		modstate [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetModState"]

	GetKeyFromScancode: make routine! compose/deep [[
		scancode [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetKeyFromScancode"]

	GetScancodeFromKey: make routine! compose/deep [[
		key [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetScancodeFromKey"]

	GetScancodeName: make routine! compose/deep [[
		scancode [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetScancodeName"]

	GetScancodeFromName: make routine! compose/deep [[
		name [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetScancodeFromName"]

	GetKeyName: make routine! compose/deep [[
		key [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetKeyName"]

	GetKeyFromName: make routine! compose/deep [[
		name [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetKeyFromName"]

	StartTextInput: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_StartTextInput"]

	IsTextInputActive: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_IsTextInputActive"]

	StopTextInput: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_StopTextInput"]

	SetTextInputRect: make routine! compose/deep [[
		rect [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetTextInputRect"]

	HasScreenKeyboardSupport: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasScreenKeyboardSupport"]

	IsScreenKeyboardShown: make routine! compose/deep [[
		window [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_IsScreenKeyboardShown"]

	GetMouseFocus: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetMouseFocus"]

	GetMouseState: make routine! compose/deep [[
		x [pointer]
		y [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetMouseState"]

	GetRelativeMouseState: make routine! compose/deep [[
		x [pointer]
		y [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetRelativeMouseState"]

	WarpMouseInWindow: make routine! compose/deep [[
		window [pointer]
		x [int32]
		y [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_WarpMouseInWindow"]

	SetRelativeMouseMode: make routine! compose/deep [[
		enabled [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetRelativeMouseMode"]

	GetRelativeMouseMode: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRelativeMouseMode"]

	CreateCursor: make routine! compose/deep [[
		data [pointer]
		mask [pointer]
		w [int32]
		h [int32]
		hot_x [int32]
		hot_y [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateCursor"]

	CreateColorCursor: make routine! compose/deep [[
		surface [pointer]
		hot_x [int32]
		hot_y [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateColorCursor"]

	CreateSystemCursor: make routine! compose/deep [[
		id [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateSystemCursor"]

	SetCursor: make routine! compose/deep [[
		cursor [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetCursor"]

	GetCursor: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetCursor"]

	GetDefaultCursor: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetDefaultCursor"]

	FreeCursor: make routine! compose/deep [[
		cursor [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FreeCursor"]

	ShowCursor: make routine! compose/deep [[
		toggle [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ShowCursor"]

	NumJoysticks: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_NumJoysticks"]

	JoystickNameForIndex: make routine! compose/deep [[
		device_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_JoystickNameForIndex"]

	JoystickOpen: make routine! compose/deep [[
		device_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_JoystickOpen"]

	JoystickName: make routine! compose/deep [[
		joystick [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_JoystickName"]

	JoystickGetDeviceGUID: make routine! compose/deep [[
		device_index [int32]
		return: [(SDL_JoystickGUID)]
		abi: default
	] (sdl2) "SDL_JoystickGetDeviceGUID"]

	JoystickGetGUID: make routine! compose/deep [[
		joystick [pointer]
		return: [(SDL_JoystickGUID)]
		abi: default
	] (sdl2) "SDL_JoystickGetGUID"]

	JoystickGetGUIDString: make routine! compose/deep [[
		guid [(SDL_JoystickGUID)]
		pszGUID [pointer]
		cbGUID [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_JoystickGetGUIDString"]

	JoystickGetGUIDFromString: make routine! compose/deep [[
		pchGUID [pointer]
		return: [(SDL_JoystickGUID)]
		abi: default
	] (sdl2) "SDL_JoystickGetGUIDFromString"]

	JoystickGetAttached: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickGetAttached"]

	JoystickInstanceID: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickInstanceID"]

	JoystickNumAxes: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickNumAxes"]

	JoystickNumBalls: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickNumBalls"]

	JoystickNumHats: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickNumHats"]

	JoystickNumButtons: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickNumButtons"]

	JoystickUpdate: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_JoystickUpdate"]

	JoystickEventState: make routine! compose/deep [[
		state [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickEventState"]

	JoystickGetAxis: make routine! compose/deep [[
		joystick [pointer]
		axis [int32]
		return: [int16]
		abi: default
	] (sdl2) "SDL_JoystickGetAxis"]

	JoystickGetHat: make routine! compose/deep [[
		joystick [pointer]
		hat [int32]
		return: [uint8]
		abi: default
	] (sdl2) "SDL_JoystickGetHat"]

	JoystickGetBall: make routine! compose/deep [[
		joystick [pointer]
		ball [int32]
		dx [pointer]
		dy [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickGetBall"]

	JoystickGetButton: make routine! compose/deep [[
		joystick [pointer]
		button [int32]
		return: [uint8]
		abi: default
	] (sdl2) "SDL_JoystickGetButton"]

	JoystickClose: make routine! compose/deep [[
		joystick [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_JoystickClose"]

	GameControllerAddMappingsFromRW: make routine! compose/deep [[
		rw [pointer]
		freerw [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerAddMappingsFromRW"]

	GameControllerAddMapping: make routine! compose/deep [[
		mappingString [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerAddMapping"]

	GameControllerMappingForGUID: make routine! compose/deep [[
		guid [(SDL_JoystickGUID)]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerMappingForGUID"]

	GameControllerMapping: make routine! compose/deep [[
		gamecontroller [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerMapping"]

	IsGameController: make routine! compose/deep [[
		joystick_index [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_IsGameController"]

	GameControllerNameForIndex: make routine! compose/deep [[
		joystick_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerNameForIndex"]

	GameControllerOpen: make routine! compose/deep [[
		joystick_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerOpen"]

	GameControllerName: make routine! compose/deep [[
		gamecontroller [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerName"]

	GameControllerGetAttached: make routine! compose/deep [[
		gamecontroller [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerGetAttached"]

	GameControllerGetJoystick: make routine! compose/deep [[
		gamecontroller [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerGetJoystick"]

	GameControllerEventState: make routine! compose/deep [[
		state [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerEventState"]

	GameControllerUpdate: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_GameControllerUpdate"]

	GameControllerGetAxisFromString: make routine! compose/deep [[
		pchString [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerGetAxisFromString"]

	GameControllerGetStringForAxis: make routine! compose/deep [[
		axis [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerGetStringForAxis"]

	GameControllerGetBindForAxis: make routine! compose/deep [[
		gamecontroller [pointer]
		axis [int32]
		return: [(SDL_GameControllerButtonBind)]
		abi: default
	] (sdl2) "SDL_GameControllerGetBindForAxis"]

	GameControllerGetAxis: make routine! compose/deep [[
		gamecontroller [pointer]
		axis [int32]
		return: [int16]
		abi: default
	] (sdl2) "SDL_GameControllerGetAxis"]

	GameControllerGetButtonFromString: make routine! compose/deep [[
		pchString [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GameControllerGetButtonFromString"]

	GameControllerGetStringForButton: make routine! compose/deep [[
		button [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GameControllerGetStringForButton"]

	GameControllerGetBindForButton: make routine! compose/deep [[
		gamecontroller [pointer]
		button [int32]
		return: [(SDL_GameControllerButtonBind)]
		abi: default
	] (sdl2) "SDL_GameControllerGetBindForButton"]

	GameControllerGetButton: make routine! compose/deep [[
		gamecontroller [pointer]
		button [int32]
		return: [uint8]
		abi: default
	] (sdl2) "SDL_GameControllerGetButton"]

	GameControllerClose: make routine! compose/deep [[
		gamecontroller [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GameControllerClose"]

	GetNumTouchDevices: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumTouchDevices"]

	GetTouchDevice: make routine! compose/deep [[
		index [int32]
		return: [int64]
		abi: default
	] (sdl2) "SDL_GetTouchDevice"]

	GetNumTouchFingers: make routine! compose/deep [[
		touchID [int64]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumTouchFingers"]

	GetTouchFinger: make routine! compose/deep [[
		touchID [int64]
		index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetTouchFinger"]

	RecordGesture: make routine! compose/deep [[
		touchId [int64]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RecordGesture"]

	SaveAllDollarTemplates: make routine! compose/deep [[
		dst [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SaveAllDollarTemplates"]

	SaveDollarTemplate: make routine! compose/deep [[
		gestureId [int64]
		dst [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SaveDollarTemplate"]

	LoadDollarTemplates: make routine! compose/deep [[
		touchId [int64]
		src [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LoadDollarTemplates"]

	PumpEvents: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_PumpEvents"]

	PeepEvents: make routine! compose/deep [[
		events [pointer]
		numevents [int32]
		action [int32]
		minType [uint32]
		maxType [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_PeepEvents"]

	HasEvent: make routine! compose/deep [[
		type [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasEvent"]

	HasEvents: make routine! compose/deep [[
		minType [uint32]
		maxType [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HasEvents"]

	FlushEvent: make routine! compose/deep [[
		type [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_FlushEvent"]

	FlushEvents: make routine! compose/deep [[
		minType [uint32]
		maxType [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_FlushEvents"]

	PollEvent: make routine! compose/deep [[
		event [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_PollEvent"]

	WaitEvent: make routine! compose/deep [[
		event [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WaitEvent"]

	WaitEventTimeout: make routine! compose/deep [[
		event [pointer]
		timeout [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_WaitEventTimeout"]

	PushEvent: make routine! compose/deep [[
		event [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_PushEvent"]

	SetEventFilter: make routine! compose/deep [[
		filter [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_SetEventFilter"]

	GetEventFilter: make routine! compose/deep [[
		filter [pointer]
		userdata [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetEventFilter"]

	AddEventWatch: make routine! compose/deep [[
		filter [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_AddEventWatch"]

	DelEventWatch: make routine! compose/deep [[
		filter [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DelEventWatch"]

	FilterEvents: make routine! compose/deep [[
		filter [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_FilterEvents"]

	EventState: make routine! compose/deep [[
		type [uint32]
		state [int32]
		return: [uint8]
		abi: default
	] (sdl2) "SDL_EventState"]

	RegisterEvents: make routine! compose/deep [[
		numevents [int32]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_RegisterEvents"]

	GetBasePath: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetBasePath"]

	GetPrefPath: make routine! compose/deep [[
		org [pointer]
		app [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetPrefPath"]

	NumHaptics: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_NumHaptics"]

	HapticName: make routine! compose/deep [[
		device_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_HapticName"]

	HapticOpen: make routine! compose/deep [[
		device_index [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_HapticOpen"]

	HapticOpened: make routine! compose/deep [[
		device_index [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticOpened"]

	HapticIndex: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticIndex"]

	MouseIsHaptic: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_MouseIsHaptic"]

	HapticOpenFromMouse: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_HapticOpenFromMouse"]

	JoystickIsHaptic: make routine! compose/deep [[
		joystick [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_JoystickIsHaptic"]

	HapticOpenFromJoystick: make routine! compose/deep [[
		joystick [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_HapticOpenFromJoystick"]

	HapticClose: make routine! compose/deep [[
		haptic [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_HapticClose"]

	HapticNumEffects: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticNumEffects"]

	HapticNumEffectsPlaying: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticNumEffectsPlaying"]

	HapticQuery: make routine! compose/deep [[
		haptic [pointer]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_HapticQuery"]

	HapticNumAxes: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticNumAxes"]

	HapticEffectSupported: make routine! compose/deep [[
		haptic [pointer]
		effect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticEffectSupported"]

	HapticNewEffect: make routine! compose/deep [[
		haptic [pointer]
		effect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticNewEffect"]

	HapticUpdateEffect: make routine! compose/deep [[
		haptic [pointer]
		effect [int32]
		data [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticUpdateEffect"]

	HapticRunEffect: make routine! compose/deep [[
		haptic [pointer]
		effect [int32]
		iterations [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticRunEffect"]

	HapticStopEffect: make routine! compose/deep [[
		haptic [pointer]
		effect [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticStopEffect"]

	HapticDestroyEffect: make routine! compose/deep [[
		haptic [pointer]
		effect [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_HapticDestroyEffect"]

	HapticGetEffectStatus: make routine! compose/deep [[
		haptic [pointer]
		effect [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticGetEffectStatus"]

	HapticSetGain: make routine! compose/deep [[
		haptic [pointer]
		gain [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticSetGain"]

	HapticSetAutocenter: make routine! compose/deep [[
		haptic [pointer]
		autocenter [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticSetAutocenter"]

	HapticPause: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticPause"]

	HapticUnpause: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticUnpause"]

	HapticStopAll: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticStopAll"]

	HapticRumbleSupported: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticRumbleSupported"]

	HapticRumbleInit: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticRumbleInit"]

	HapticRumblePlay: make routine! compose/deep [[
		haptic [pointer]
		strength [float]
		length [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticRumblePlay"]

	HapticRumbleStop: make routine! compose/deep [[
		haptic [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_HapticRumbleStop"]

	SetHintWithPriority: make routine! compose/deep [[
		name [pointer]
		value [pointer]
		priority [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetHintWithPriority"]

	SetHint: make routine! compose/deep [[
		name [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetHint"]

	GetHint: make routine! compose/deep [[
		name [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetHint"]

	AddHintCallback: make routine! compose/deep [[
		name [pointer]
		callback [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_AddHintCallback"]

	DelHintCallback: make routine! compose/deep [[
		name [pointer]
		callback [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DelHintCallback"]

	ClearHints: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_ClearHints"]

	LoadObject: make routine! compose/deep [[
		sofile [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_LoadObject"]

	LoadFunction: make routine! compose/deep [[
		handle [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_LoadFunction"]

	UnloadObject: make routine! compose/deep [[
		handle [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_UnloadObject"]

	LogSetAllPriority: make routine! compose/deep [[
		priority [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_LogSetAllPriority"]

	LogSetPriority: make routine! compose/deep [[
		category [int32]
		priority [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_LogSetPriority"]

	LogGetPriority: make routine! compose/deep [[
		category [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LogGetPriority"]

	LogResetPriorities: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_LogResetPriorities"]

	LogVerbose: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogVerbose"]

	LogDebug: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogDebug"]

	LogInfo: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogInfo"]

	LogWarn: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogWarn"]

	LogError: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogError"]

	LogCritical: make routine! compose/deep [[
		category [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogCritical"]

	LogMessage: make routine! compose/deep [[
		category [int32]
		priority [int32]
		fmt [pointer]
		...
		return: [void]
		abi: default
	] (sdl2) "SDL_LogMessage"]

	LogMessageV: make routine! compose/deep [[
		category [int32]
		priority [int32]
		fmt [pointer]
		ap [int32]
		return: [void]
		abi: default
	] (sdl2) "SDL_LogMessageV"]

	LogGetOutputFunction: make routine! compose/deep [[
		callback [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_LogGetOutputFunction"]

	LogSetOutputFunction: make routine! compose/deep [[
		callback [pointer]
		userdata [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_LogSetOutputFunction"]

	ShowMessageBox: make routine! compose/deep [[
		messageboxdata [pointer]
		buttonid [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ShowMessageBox"]

	ShowSimpleMessageBox: make routine! compose/deep [[
		flags [uint32]
		title [pointer]
		message [pointer]
		window [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_ShowSimpleMessageBox"]

	GetPowerInfo: make routine! compose/deep [[
		secs [pointer]
		pct [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetPowerInfo"]

	GetNumRenderDrivers: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetNumRenderDrivers"]

	GetRenderDriverInfo: make routine! compose/deep [[
		index [int32]
		info [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRenderDriverInfo"]

	CreateWindowAndRenderer: make routine! compose/deep [[
		width [int32]
		height [int32]
		window_flags [uint32]
		window [pointer]
		renderer [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_CreateWindowAndRenderer"]

	CreateRenderer: make routine! compose/deep [[
		window [pointer]
		index [int32]
		flags [uint32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateRenderer"]

	CreateSoftwareRenderer: make routine! compose/deep [[
		surface [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateSoftwareRenderer"]

	GetRenderer: make routine! compose/deep [[
		window [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetRenderer"]

	GetRendererInfo: make routine! compose/deep [[
		renderer [pointer]
		info [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRendererInfo"]

	GetRendererOutputSize: make routine! compose/deep [[
		renderer [pointer]
		w [pointer]
		h [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRendererOutputSize"]

	CreateTexture: make routine! compose/deep [[
		renderer [pointer]
		format [uint32]
		access [int32]
		w [int32]
		h [int32]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateTexture"]

	CreateTextureFromSurface: make routine! compose/deep [[
		renderer [pointer]
		surface [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_CreateTextureFromSurface"]

	QueryTexture: make routine! compose/deep [[
		texture [pointer]
		format [pointer]
		access [pointer]
		w [pointer]
		h [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_QueryTexture"]

	SetTextureColorMod: make routine! compose/deep [[
		texture [pointer]
		r [uint8]
		g [uint8]
		b [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetTextureColorMod"]

	GetTextureColorMod: make routine! compose/deep [[
		texture [pointer]
		r [pointer]
		g [pointer]
		b [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetTextureColorMod"]

	SetTextureAlphaMod: make routine! compose/deep [[
		texture [pointer]
		alpha [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetTextureAlphaMod"]

	GetTextureAlphaMod: make routine! compose/deep [[
		texture [pointer]
		alpha [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetTextureAlphaMod"]

	SetTextureBlendMode: make routine! compose/deep [[
		texture [pointer]
		blendMode [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetTextureBlendMode"]

	GetTextureBlendMode: make routine! compose/deep [[
		texture [pointer]
		blendMode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetTextureBlendMode"]

	UpdateTexture: make routine! compose/deep [[
		texture [pointer]
		rect [pointer]
		pixels [pointer]
		pitch [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpdateTexture"]

	UpdateYUVTexture: make routine! compose/deep [[
		texture [pointer]
		rect [pointer]
		Yplane [pointer]
		Ypitch [int32]
		Uplane [pointer]
		Upitch [int32]
		Vplane [pointer]
		Vpitch [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_UpdateYUVTexture"]

	LockTexture: make routine! compose/deep [[
		texture [pointer]
		rect [pointer]
		pixels [pointer]
		pitch [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_LockTexture"]

	UnlockTexture: make routine! compose/deep [[
		texture [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_UnlockTexture"]

	RenderTargetSupported: make routine! compose/deep [[
		renderer [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderTargetSupported"]

	SetRenderTarget: make routine! compose/deep [[
		renderer [pointer]
		texture [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetRenderTarget"]

	GetRenderTarget: make routine! compose/deep [[
		renderer [pointer]
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetRenderTarget"]

	RenderSetLogicalSize: make routine! compose/deep [[
		renderer [pointer]
		w [int32]
		h [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderSetLogicalSize"]

	RenderGetLogicalSize: make routine! compose/deep [[
		renderer [pointer]
		w [pointer]
		h [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RenderGetLogicalSize"]

	RenderSetViewport: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderSetViewport"]

	RenderGetViewport: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RenderGetViewport"]

	RenderSetClipRect: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderSetClipRect"]

	RenderGetClipRect: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RenderGetClipRect"]

	RenderSetScale: make routine! compose/deep [[
		renderer [pointer]
		scaleX [float]
		scaleY [float]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderSetScale"]

	RenderGetScale: make routine! compose/deep [[
		renderer [pointer]
		scaleX [pointer]
		scaleY [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RenderGetScale"]

	SetRenderDrawColor: make routine! compose/deep [[
		renderer [pointer]
		r [uint8]
		g [uint8]
		b [uint8]
		a [uint8]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetRenderDrawColor"]

	GetRenderDrawColor: make routine! compose/deep [[
		renderer [pointer]
		r [pointer]
		g [pointer]
		b [pointer]
		a [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRenderDrawColor"]

	SetRenderDrawBlendMode: make routine! compose/deep [[
		renderer [pointer]
		blendMode [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_SetRenderDrawBlendMode"]

	GetRenderDrawBlendMode: make routine! compose/deep [[
		renderer [pointer]
		blendMode [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRenderDrawBlendMode"]

	RenderClear: make routine! compose/deep [[
		renderer [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderClear"]

	RenderDrawPoint: make routine! compose/deep [[
		renderer [pointer]
		x [int32]
		y [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawPoint"]

	RenderDrawPoints: make routine! compose/deep [[
		renderer [pointer]
		points [pointer]
		count [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawPoints"]

	RenderDrawLine: make routine! compose/deep [[
		renderer [pointer]
		x1 [int32]
		y1 [int32]
		x2 [int32]
		y2 [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawLine"]

	RenderDrawLines: make routine! compose/deep [[
		renderer [pointer]
		points [pointer]
		count [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawLines"]

	RenderDrawRect: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawRect"]

	RenderDrawRects: make routine! compose/deep [[
		renderer [pointer]
		rects [pointer]
		count [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderDrawRects"]

	RenderFillRect: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderFillRect"]

	RenderFillRects: make routine! compose/deep [[
		renderer [pointer]
		rects [pointer]
		count [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderFillRects"]

	RenderCopy: make routine! compose/deep [[
		renderer [pointer]
		texture [pointer]
		srcrect [pointer]
		dstrect [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderCopy"]

	RenderCopyEx: make routine! compose/deep [[
		renderer [pointer]
		texture [pointer]
		srcrect [pointer]
		dstrect [pointer]
		angle [double]
		center [pointer]
		flip [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderCopyEx"]

	RenderReadPixels: make routine! compose/deep [[
		renderer [pointer]
		rect [pointer]
		format [uint32]
		pixels [pointer]
		pitch [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RenderReadPixels"]

	RenderPresent: make routine! compose/deep [[
		renderer [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_RenderPresent"]

	DestroyTexture: make routine! compose/deep [[
		texture [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroyTexture"]

	DestroyRenderer: make routine! compose/deep [[
		renderer [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_DestroyRenderer"]

	GL_BindTexture: make routine! compose/deep [[
		texture [pointer]
		texw [pointer]
		texh [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_BindTexture"]

	GL_UnbindTexture: make routine! compose/deep [[
		texture [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_GL_UnbindTexture"]

	GetTicks: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (sdl2) "SDL_GetTicks"]

	GetPerformanceCounter: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (sdl2) "SDL_GetPerformanceCounter"]

	GetPerformanceFrequency: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (sdl2) "SDL_GetPerformanceFrequency"]

	Delay: make routine! compose/deep [[
		ms [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_Delay"]

	AddTimer: make routine! compose/deep [[
		interval [uint32]
		callback [pointer]
		param [pointer]
		return: [int32]
		abi: default
	] (sdl2) "SDL_AddTimer"]

	RemoveTimer: make routine! compose/deep [[
		id [int32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_RemoveTimer"]

	GetVersion: make routine! compose/deep [[
		ver [pointer]
		return: [void]
		abi: default
	] (sdl2) "SDL_GetVersion"]

	GetRevision: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (sdl2) "SDL_GetRevision"]

	GetRevisionNumber: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (sdl2) "SDL_GetRevisionNumber"]

	Init: make routine! compose/deep [[
		flags [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_Init"]

	InitSubSystem: make routine! compose/deep [[
		flags [uint32]
		return: [int32]
		abi: default
	] (sdl2) "SDL_InitSubSystem"]

	QuitSubSystem: make routine! compose/deep [[
		flags [uint32]
		return: [void]
		abi: default
	] (sdl2) "SDL_QuitSubSystem"]

	WasInit: make routine! compose/deep [[
		flags [uint32]
		return: [uint32]
		abi: default
	] (sdl2) "SDL_WasInit"]

	Quit: make routine! compose/deep [[
		return: [void]
		abi: default
	] (sdl2) "SDL_Quit"]



	SDL_INIT_TIMER:          to integer! #00000001
	SDL_INIT_AUDIO:          to integer! #00000010
	SDL_INIT_VIDEO:          to integer! #00000020  ;/**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
	SDL_INIT_JOYSTICK:       to integer! #00000200  ;/**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
	SDL_INIT_HAPTIC:         to integer! #00001000
	SDL_INIT_GAMECONTROLLER: to integer! #00002000  ;/**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
	SDL_INIT_EVENTS:         to integer! #00004000
	SDL_INIT_NOPARACHUTE:    to integer! #00100000  ;/**< Don't catch fatal signals */
	SDL_INIT_EVERYTHING: (
					SDL_INIT_TIMER or SDL_INIT_AUDIO or SDL_INIT_VIDEO or SDL_INIT_EVENTS or
					SDL_INIT_JOYSTICK or SDL_INIT_HAPTIC or SDL_INIT_GAMECONTROLLER
				)

	SDL_WINDOWPOS_UNDEFINED_MASK:    to integer! #1FFF0000
	SDL_WINDOWPOS_UNDEFINED_DISPLAY: function [X]  [SDL_WINDOWPOS_UNDEFINED_MASK or X]
	SDL_WINDOWPOS_UNDEFINED:         SDL_WINDOWPOS_UNDEFINED_DISPLAY 0
	SDL_WINDOWPOS_ISUNDEFINED: function [X] [(X and (to integer! #FFFF0000)) == SDL_WINDOWPOS_UNDEFINED_MASK]

	SDL_WINDOWPOS_CENTERED_MASK:    to integer! #2FFF0000
	SDL_WINDOWPOS_CENTERED_DISPLAY: function [X]  [SDL_WINDOWPOS_CENTERED_MASK or X]
	SDL_WINDOWPOS_CENTERED:         SDL_WINDOWPOS_CENTERED_DISPLAY 0
	SDL_WINDOWPOS_ISCENTERED: function [X] [(X and (to integer! #FFFF0000)) == SDL_WINDOWPOS_CENTERED_MASK]
]
