REBOL [
	Date: 3-Feb-2015
	comment: "Generated by c2r3.reb, DO NOT EDIT"
]
make object! [
	GThreadError: [
		G_THREAD_ERROR_AGAIN 0
	]

	GOnceStatus: [
		G_ONCE_STATUS_NOTCALLED 0
		G_ONCE_STATUS_PROGRESS 1
		G_ONCE_STATUS_READY 2
	]

	GBookmarkFileError: [
		G_BOOKMARK_FILE_ERROR_INVALID_URI 0
		G_BOOKMARK_FILE_ERROR_INVALID_VALUE 1
		G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED 2
		G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND 3
		G_BOOKMARK_FILE_ERROR_READ 4
		G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING 5
		G_BOOKMARK_FILE_ERROR_WRITE 6
		G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND 7
	]

	GChecksumType: [
		G_CHECKSUM_MD5 0
		G_CHECKSUM_SHA1 1
		G_CHECKSUM_SHA256 2
		G_CHECKSUM_SHA512 3
	]

	GConvertError: [
		G_CONVERT_ERROR_NO_CONVERSION 0
		G_CONVERT_ERROR_ILLEGAL_SEQUENCE 1
		G_CONVERT_ERROR_FAILED 2
		G_CONVERT_ERROR_PARTIAL_INPUT 3
		G_CONVERT_ERROR_BAD_URI 4
		G_CONVERT_ERROR_NOT_ABSOLUTE_PATH 5
		G_CONVERT_ERROR_NO_MEMORY 6
	]

	GDateDMY: [
		G_DATE_DAY 0
		G_DATE_MONTH 1
		G_DATE_YEAR 2
	]

	GDateWeekday: [
		G_DATE_BAD_WEEKDAY 0
		G_DATE_MONDAY 1
		G_DATE_TUESDAY 2
		G_DATE_WEDNESDAY 3
		G_DATE_THURSDAY 4
		G_DATE_FRIDAY 5
		G_DATE_SATURDAY 6
		G_DATE_SUNDAY 7
	]

	GDateMonth: [
		G_DATE_BAD_MONTH 0
		G_DATE_JANUARY 1
		G_DATE_FEBRUARY 2
		G_DATE_MARCH 3
		G_DATE_APRIL 4
		G_DATE_MAY 5
		G_DATE_JUNE 6
		G_DATE_JULY 7
		G_DATE_AUGUST 8
		G_DATE_SEPTEMBER 9
		G_DATE_OCTOBER 10
		G_DATE_NOVEMBER 11
		G_DATE_DECEMBER 12
	]

	GTimeType: [
		G_TIME_TYPE_STANDARD 0
		G_TIME_TYPE_DAYLIGHT 1
		G_TIME_TYPE_UNIVERSAL 2
	]

	GFileError: [
		G_FILE_ERROR_EXIST 0
		G_FILE_ERROR_ISDIR 1
		G_FILE_ERROR_ACCES 2
		G_FILE_ERROR_NAMETOOLONG 3
		G_FILE_ERROR_NOENT 4
		G_FILE_ERROR_NOTDIR 5
		G_FILE_ERROR_NXIO 6
		G_FILE_ERROR_NODEV 7
		G_FILE_ERROR_ROFS 8
		G_FILE_ERROR_TXTBSY 9
		G_FILE_ERROR_FAULT 10
		G_FILE_ERROR_LOOP 11
		G_FILE_ERROR_NOSPC 12
		G_FILE_ERROR_NOMEM 13
		G_FILE_ERROR_MFILE 14
		G_FILE_ERROR_NFILE 15
		G_FILE_ERROR_BADF 16
		G_FILE_ERROR_INVAL 17
		G_FILE_ERROR_PIPE 18
		G_FILE_ERROR_AGAIN 19
		G_FILE_ERROR_INTR 20
		G_FILE_ERROR_IO 21
		G_FILE_ERROR_PERM 22
		G_FILE_ERROR_NOSYS 23
		G_FILE_ERROR_FAILED 24
	]

	GFileTest: [
		G_FILE_TEST_IS_REGULAR 1
		G_FILE_TEST_IS_SYMLINK 2
		G_FILE_TEST_IS_DIR 4
		G_FILE_TEST_IS_EXECUTABLE 8
		G_FILE_TEST_EXISTS 16
	]

	GTraverseFlags: [
		G_TRAVERSE_LEAVES 1
		G_TRAVERSE_NON_LEAVES 2
		G_TRAVERSE_ALL 3
		G_TRAVERSE_MASK 3
		G_TRAVERSE_LEAFS 1
		G_TRAVERSE_NON_LEAFS 2
	]

	GTraverseType: [
		G_IN_ORDER 0
		G_PRE_ORDER 1
		G_POST_ORDER 2
		G_LEVEL_ORDER 3
	]

	GHookFlagMask: [
		G_HOOK_FLAG_ACTIVE 1
		G_HOOK_FLAG_IN_CALL 2
		G_HOOK_FLAG_MASK 15
	]

	GIOCondition: [
		G_IO_IN 1
		G_IO_OUT 4
		G_IO_PRI 2
		G_IO_ERR 8
		G_IO_HUP 16
		G_IO_NVAL 32
	]

	GUnicodeType: [
		G_UNICODE_CONTROL 0
		G_UNICODE_FORMAT 1
		G_UNICODE_UNASSIGNED 2
		G_UNICODE_PRIVATE_USE 3
		G_UNICODE_SURROGATE 4
		G_UNICODE_LOWERCASE_LETTER 5
		G_UNICODE_MODIFIER_LETTER 6
		G_UNICODE_OTHER_LETTER 7
		G_UNICODE_TITLECASE_LETTER 8
		G_UNICODE_UPPERCASE_LETTER 9
		G_UNICODE_SPACING_MARK 10
		G_UNICODE_ENCLOSING_MARK 11
		G_UNICODE_NON_SPACING_MARK 12
		G_UNICODE_DECIMAL_NUMBER 13
		G_UNICODE_LETTER_NUMBER 14
		G_UNICODE_OTHER_NUMBER 15
		G_UNICODE_CONNECT_PUNCTUATION 16
		G_UNICODE_DASH_PUNCTUATION 17
		G_UNICODE_CLOSE_PUNCTUATION 18
		G_UNICODE_FINAL_PUNCTUATION 19
		G_UNICODE_INITIAL_PUNCTUATION 20
		G_UNICODE_OTHER_PUNCTUATION 21
		G_UNICODE_OPEN_PUNCTUATION 22
		G_UNICODE_CURRENCY_SYMBOL 23
		G_UNICODE_MODIFIER_SYMBOL 24
		G_UNICODE_MATH_SYMBOL 25
		G_UNICODE_OTHER_SYMBOL 26
		G_UNICODE_LINE_SEPARATOR 27
		G_UNICODE_PARAGRAPH_SEPARATOR 28
		G_UNICODE_SPACE_SEPARATOR 29
	]

	GUnicodeBreakType: [
		G_UNICODE_BREAK_MANDATORY 0
		G_UNICODE_BREAK_CARRIAGE_RETURN 1
		G_UNICODE_BREAK_LINE_FEED 2
		G_UNICODE_BREAK_COMBINING_MARK 3
		G_UNICODE_BREAK_SURROGATE 4
		G_UNICODE_BREAK_ZERO_WIDTH_SPACE 5
		G_UNICODE_BREAK_INSEPARABLE 6
		G_UNICODE_BREAK_NON_BREAKING_GLUE 7
		G_UNICODE_BREAK_CONTINGENT 8
		G_UNICODE_BREAK_SPACE 9
		G_UNICODE_BREAK_AFTER 10
		G_UNICODE_BREAK_BEFORE 11
		G_UNICODE_BREAK_BEFORE_AND_AFTER 12
		G_UNICODE_BREAK_HYPHEN 13
		G_UNICODE_BREAK_NON_STARTER 14
		G_UNICODE_BREAK_OPEN_PUNCTUATION 15
		G_UNICODE_BREAK_CLOSE_PUNCTUATION 16
		G_UNICODE_BREAK_QUOTATION 17
		G_UNICODE_BREAK_EXCLAMATION 18
		G_UNICODE_BREAK_IDEOGRAPHIC 19
		G_UNICODE_BREAK_NUMERIC 20
		G_UNICODE_BREAK_INFIX_SEPARATOR 21
		G_UNICODE_BREAK_SYMBOL 22
		G_UNICODE_BREAK_ALPHABETIC 23
		G_UNICODE_BREAK_PREFIX 24
		G_UNICODE_BREAK_POSTFIX 25
		G_UNICODE_BREAK_COMPLEX_CONTEXT 26
		G_UNICODE_BREAK_AMBIGUOUS 27
		G_UNICODE_BREAK_UNKNOWN 28
		G_UNICODE_BREAK_NEXT_LINE 29
		G_UNICODE_BREAK_WORD_JOINER 30
		G_UNICODE_BREAK_HANGUL_L_JAMO 31
		G_UNICODE_BREAK_HANGUL_V_JAMO 32
		G_UNICODE_BREAK_HANGUL_T_JAMO 33
		G_UNICODE_BREAK_HANGUL_LV_SYLLABLE 34
		G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE 35
		G_UNICODE_BREAK_CLOSE_PARANTHESIS 36
		G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER 37
		G_UNICODE_BREAK_HEBREW_LETTER 38
		G_UNICODE_BREAK_REGIONAL_INDICATOR 39
	]

	GUnicodeScript: [
		G_UNICODE_SCRIPT_INVALID_CODE -1
		G_UNICODE_SCRIPT_COMMON 0
		G_UNICODE_SCRIPT_INHERITED 1
		G_UNICODE_SCRIPT_ARABIC 2
		G_UNICODE_SCRIPT_ARMENIAN 3
		G_UNICODE_SCRIPT_BENGALI 4
		G_UNICODE_SCRIPT_BOPOMOFO 5
		G_UNICODE_SCRIPT_CHEROKEE 6
		G_UNICODE_SCRIPT_COPTIC 7
		G_UNICODE_SCRIPT_CYRILLIC 8
		G_UNICODE_SCRIPT_DESERET 9
		G_UNICODE_SCRIPT_DEVANAGARI 10
		G_UNICODE_SCRIPT_ETHIOPIC 11
		G_UNICODE_SCRIPT_GEORGIAN 12
		G_UNICODE_SCRIPT_GOTHIC 13
		G_UNICODE_SCRIPT_GREEK 14
		G_UNICODE_SCRIPT_GUJARATI 15
		G_UNICODE_SCRIPT_GURMUKHI 16
		G_UNICODE_SCRIPT_HAN 17
		G_UNICODE_SCRIPT_HANGUL 18
		G_UNICODE_SCRIPT_HEBREW 19
		G_UNICODE_SCRIPT_HIRAGANA 20
		G_UNICODE_SCRIPT_KANNADA 21
		G_UNICODE_SCRIPT_KATAKANA 22
		G_UNICODE_SCRIPT_KHMER 23
		G_UNICODE_SCRIPT_LAO 24
		G_UNICODE_SCRIPT_LATIN 25
		G_UNICODE_SCRIPT_MALAYALAM 26
		G_UNICODE_SCRIPT_MONGOLIAN 27
		G_UNICODE_SCRIPT_MYANMAR 28
		G_UNICODE_SCRIPT_OGHAM 29
		G_UNICODE_SCRIPT_OLD_ITALIC 30
		G_UNICODE_SCRIPT_ORIYA 31
		G_UNICODE_SCRIPT_RUNIC 32
		G_UNICODE_SCRIPT_SINHALA 33
		G_UNICODE_SCRIPT_SYRIAC 34
		G_UNICODE_SCRIPT_TAMIL 35
		G_UNICODE_SCRIPT_TELUGU 36
		G_UNICODE_SCRIPT_THAANA 37
		G_UNICODE_SCRIPT_THAI 38
		G_UNICODE_SCRIPT_TIBETAN 39
		G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL 40
		G_UNICODE_SCRIPT_YI 41
		G_UNICODE_SCRIPT_TAGALOG 42
		G_UNICODE_SCRIPT_HANUNOO 43
		G_UNICODE_SCRIPT_BUHID 44
		G_UNICODE_SCRIPT_TAGBANWA 45
		G_UNICODE_SCRIPT_BRAILLE 46
		G_UNICODE_SCRIPT_CYPRIOT 47
		G_UNICODE_SCRIPT_LIMBU 48
		G_UNICODE_SCRIPT_OSMANYA 49
		G_UNICODE_SCRIPT_SHAVIAN 50
		G_UNICODE_SCRIPT_LINEAR_B 51
		G_UNICODE_SCRIPT_TAI_LE 52
		G_UNICODE_SCRIPT_UGARITIC 53
		G_UNICODE_SCRIPT_NEW_TAI_LUE 54
		G_UNICODE_SCRIPT_BUGINESE 55
		G_UNICODE_SCRIPT_GLAGOLITIC 56
		G_UNICODE_SCRIPT_TIFINAGH 57
		G_UNICODE_SCRIPT_SYLOTI_NAGRI 58
		G_UNICODE_SCRIPT_OLD_PERSIAN 59
		G_UNICODE_SCRIPT_KHAROSHTHI 60
		G_UNICODE_SCRIPT_UNKNOWN 61
		G_UNICODE_SCRIPT_BALINESE 62
		G_UNICODE_SCRIPT_CUNEIFORM 63
		G_UNICODE_SCRIPT_PHOENICIAN 64
		G_UNICODE_SCRIPT_PHAGS_PA 65
		G_UNICODE_SCRIPT_NKO 66
		G_UNICODE_SCRIPT_KAYAH_LI 67
		G_UNICODE_SCRIPT_LEPCHA 68
		G_UNICODE_SCRIPT_REJANG 69
		G_UNICODE_SCRIPT_SUNDANESE 70
		G_UNICODE_SCRIPT_SAURASHTRA 71
		G_UNICODE_SCRIPT_CHAM 72
		G_UNICODE_SCRIPT_OL_CHIKI 73
		G_UNICODE_SCRIPT_VAI 74
		G_UNICODE_SCRIPT_CARIAN 75
		G_UNICODE_SCRIPT_LYCIAN 76
		G_UNICODE_SCRIPT_LYDIAN 77
		G_UNICODE_SCRIPT_AVESTAN 78
		G_UNICODE_SCRIPT_BAMUM 79
		G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS 80
		G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC 81
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI 82
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN 83
		G_UNICODE_SCRIPT_JAVANESE 84
		G_UNICODE_SCRIPT_KAITHI 85
		G_UNICODE_SCRIPT_LISU 86
		G_UNICODE_SCRIPT_MEETEI_MAYEK 87
		G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN 88
		G_UNICODE_SCRIPT_OLD_TURKIC 89
		G_UNICODE_SCRIPT_SAMARITAN 90
		G_UNICODE_SCRIPT_TAI_THAM 91
		G_UNICODE_SCRIPT_TAI_VIET 92
		G_UNICODE_SCRIPT_BATAK 93
		G_UNICODE_SCRIPT_BRAHMI 94
		G_UNICODE_SCRIPT_MANDAIC 95
		G_UNICODE_SCRIPT_CHAKMA 96
		G_UNICODE_SCRIPT_MEROITIC_CURSIVE 97
		G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS 98
		G_UNICODE_SCRIPT_MIAO 99
		G_UNICODE_SCRIPT_SHARADA 100
		G_UNICODE_SCRIPT_SORA_SOMPENG 101
		G_UNICODE_SCRIPT_TAKRI 102
		G_UNICODE_SCRIPT_BASSA_VAH 103
		G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN 104
		G_UNICODE_SCRIPT_DUPLOYAN 105
		G_UNICODE_SCRIPT_ELBASAN 106
		G_UNICODE_SCRIPT_GRANTHA 107
		G_UNICODE_SCRIPT_KHOJKI 108
		G_UNICODE_SCRIPT_KHUDAWADI 109
		G_UNICODE_SCRIPT_LINEAR_A 110
		G_UNICODE_SCRIPT_MAHAJANI 111
		G_UNICODE_SCRIPT_MANICHAEAN 112
		G_UNICODE_SCRIPT_MENDE_KIKAKUI 113
		G_UNICODE_SCRIPT_MODI 114
		G_UNICODE_SCRIPT_MRO 115
		G_UNICODE_SCRIPT_NABATAEAN 116
		G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN 117
		G_UNICODE_SCRIPT_OLD_PERMIC 118
		G_UNICODE_SCRIPT_PAHAWH_HMONG 119
		G_UNICODE_SCRIPT_PALMYRENE 120
		G_UNICODE_SCRIPT_PAU_CIN_HAU 121
		G_UNICODE_SCRIPT_PSALTER_PAHLAVI 122
		G_UNICODE_SCRIPT_SIDDHAM 123
		G_UNICODE_SCRIPT_TIRHUTA 124
		G_UNICODE_SCRIPT_WARANG_CITI 125
	]

	GNormalizeMode: [
		G_NORMALIZE_DEFAULT 0
		G_NORMALIZE_NFD 0
		G_NORMALIZE_DEFAULT_COMPOSE 1
		G_NORMALIZE_NFC 1
		G_NORMALIZE_ALL 2
		G_NORMALIZE_NFKD 2
		G_NORMALIZE_ALL_COMPOSE 3
		G_NORMALIZE_NFKC 3
	]

	GUserDirectory: [
		G_USER_DIRECTORY_DESKTOP 0
		G_USER_DIRECTORY_DOCUMENTS 1
		G_USER_DIRECTORY_DOWNLOAD 2
		G_USER_DIRECTORY_MUSIC 3
		G_USER_DIRECTORY_PICTURES 4
		G_USER_DIRECTORY_PUBLIC_SHARE 5
		G_USER_DIRECTORY_TEMPLATES 6
		G_USER_DIRECTORY_VIDEOS 7
		G_USER_N_DIRECTORIES 8
	]

	GFormatSizeFlags: [
		G_FORMAT_SIZE_DEFAULT 0
		G_FORMAT_SIZE_LONG_FORMAT 1
		G_FORMAT_SIZE_IEC_UNITS 2
	]

	GIOError: [
		G_IO_ERROR_NONE 0
		G_IO_ERROR_AGAIN 1
		G_IO_ERROR_INVAL 2
		G_IO_ERROR_UNKNOWN 3
	]

	GIOChannelError: [
		G_IO_CHANNEL_ERROR_FBIG 0
		G_IO_CHANNEL_ERROR_INVAL 1
		G_IO_CHANNEL_ERROR_IO 2
		G_IO_CHANNEL_ERROR_ISDIR 3
		G_IO_CHANNEL_ERROR_NOSPC 4
		G_IO_CHANNEL_ERROR_NXIO 5
		G_IO_CHANNEL_ERROR_OVERFLOW 6
		G_IO_CHANNEL_ERROR_PIPE 7
		G_IO_CHANNEL_ERROR_FAILED 8
	]

	GIOStatus: [
		G_IO_STATUS_ERROR 0
		G_IO_STATUS_NORMAL 1
		G_IO_STATUS_EOF 2
		G_IO_STATUS_AGAIN 3
	]

	GSeekType: [
		G_SEEK_CUR 0
		G_SEEK_SET 1
		G_SEEK_END 2
	]

	GIOFlags: [
		G_IO_FLAG_APPEND 1
		G_IO_FLAG_NONBLOCK 2
		G_IO_FLAG_IS_READABLE 4
		G_IO_FLAG_IS_WRITABLE 8
		G_IO_FLAG_IS_WRITEABLE 8
		G_IO_FLAG_IS_SEEKABLE 16
		G_IO_FLAG_MASK 31
		G_IO_FLAG_GET_MASK 31
		G_IO_FLAG_SET_MASK 3
	]

	GKeyFileError: [
		G_KEY_FILE_ERROR_UNKNOWN_ENCODING 0
		G_KEY_FILE_ERROR_PARSE 1
		G_KEY_FILE_ERROR_NOT_FOUND 2
		G_KEY_FILE_ERROR_KEY_NOT_FOUND 3
		G_KEY_FILE_ERROR_GROUP_NOT_FOUND 4
		G_KEY_FILE_ERROR_INVALID_VALUE 5
	]

	GKeyFileFlags: [
		G_KEY_FILE_NONE 0
		G_KEY_FILE_KEEP_COMMENTS 1
		G_KEY_FILE_KEEP_TRANSLATIONS 2
	]

	GMarkupError: [
		G_MARKUP_ERROR_BAD_UTF8 0
		G_MARKUP_ERROR_EMPTY 1
		G_MARKUP_ERROR_PARSE 2
		G_MARKUP_ERROR_UNKNOWN_ELEMENT 3
		G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE 4
		G_MARKUP_ERROR_INVALID_CONTENT 5
		G_MARKUP_ERROR_MISSING_ATTRIBUTE 6
	]

	GMarkupParseFlags: [
		G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG 1
		G_MARKUP_TREAT_CDATA_AS_TEXT 2
		G_MARKUP_PREFIX_ERROR_POSITION 4
		G_MARKUP_IGNORE_QUALIFIED 8
	]

	GMarkupCollectType: [
		G_MARKUP_COLLECT_INVALID 0
		G_MARKUP_COLLECT_STRING 1
		G_MARKUP_COLLECT_STRDUP 2
		G_MARKUP_COLLECT_BOOLEAN 3
		G_MARKUP_COLLECT_TRISTATE 4
		G_MARKUP_COLLECT_OPTIONAL 65536
	]

	GLogLevelFlags: [
		G_LOG_FLAG_RECURSION 1
		G_LOG_FLAG_FATAL 2
		G_LOG_LEVEL_ERROR 4
		G_LOG_LEVEL_CRITICAL 8
		G_LOG_LEVEL_WARNING 16
		G_LOG_LEVEL_MESSAGE 32
		G_LOG_LEVEL_INFO 64
		G_LOG_LEVEL_DEBUG 128
		G_LOG_LEVEL_MASK -4
	]

	GOptionFlags: [
		G_OPTION_FLAG_NONE 0
		G_OPTION_FLAG_HIDDEN 1
		G_OPTION_FLAG_IN_MAIN 2
		G_OPTION_FLAG_REVERSE 4
		G_OPTION_FLAG_NO_ARG 8
		G_OPTION_FLAG_FILENAME 16
		G_OPTION_FLAG_OPTIONAL_ARG 32
		G_OPTION_FLAG_NOALIAS 64
	]

	GOptionArg: [
		G_OPTION_ARG_NONE 0
		G_OPTION_ARG_STRING 1
		G_OPTION_ARG_INT 2
		G_OPTION_ARG_CALLBACK 3
		G_OPTION_ARG_FILENAME 4
		G_OPTION_ARG_STRING_ARRAY 5
		G_OPTION_ARG_FILENAME_ARRAY 6
		G_OPTION_ARG_DOUBLE 7
		G_OPTION_ARG_INT64 8
	]

	GOptionError: [
		G_OPTION_ERROR_UNKNOWN_OPTION 0
		G_OPTION_ERROR_BAD_VALUE 1
		G_OPTION_ERROR_FAILED 2
	]

	GRegexError: [
		G_REGEX_ERROR_COMPILE 0
		G_REGEX_ERROR_OPTIMIZE 1
		G_REGEX_ERROR_REPLACE 2
		G_REGEX_ERROR_MATCH 3
		G_REGEX_ERROR_INTERNAL 4
		G_REGEX_ERROR_STRAY_BACKSLASH 101
		G_REGEX_ERROR_MISSING_CONTROL_CHAR 102
		G_REGEX_ERROR_UNRECOGNIZED_ESCAPE 103
		G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER 104
		G_REGEX_ERROR_QUANTIFIER_TOO_BIG 105
		G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS 106
		G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS 107
		G_REGEX_ERROR_RANGE_OUT_OF_ORDER 108
		G_REGEX_ERROR_NOTHING_TO_REPEAT 109
		G_REGEX_ERROR_UNRECOGNIZED_CHARACTER 112
		G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS 113
		G_REGEX_ERROR_UNMATCHED_PARENTHESIS 114
		G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE 115
		G_REGEX_ERROR_UNTERMINATED_COMMENT 118
		G_REGEX_ERROR_EXPRESSION_TOO_LARGE 120
		G_REGEX_ERROR_MEMORY_ERROR 121
		G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND 125
		G_REGEX_ERROR_MALFORMED_CONDITION 126
		G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES 127
		G_REGEX_ERROR_ASSERTION_EXPECTED 128
		G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME 130
		G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED 131
		G_REGEX_ERROR_HEX_CODE_TOO_LARGE 134
		G_REGEX_ERROR_INVALID_CONDITION 135
		G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND 136
		G_REGEX_ERROR_INFINITE_LOOP 140
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR 142
		G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME 143
		G_REGEX_ERROR_MALFORMED_PROPERTY 146
		G_REGEX_ERROR_UNKNOWN_PROPERTY 147
		G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG 148
		G_REGEX_ERROR_TOO_MANY_SUBPATTERNS 149
		G_REGEX_ERROR_INVALID_OCTAL_VALUE 151
		G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE 154
		G_REGEX_ERROR_DEFINE_REPETION 155
		G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS 156
		G_REGEX_ERROR_MISSING_BACK_REFERENCE 157
		G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE 158
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN 159
		G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB 160
		G_REGEX_ERROR_NUMBER_TOO_BIG 161
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME 162
		G_REGEX_ERROR_MISSING_DIGIT 163
		G_REGEX_ERROR_INVALID_DATA_CHARACTER 164
		G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME 165
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED 166
		G_REGEX_ERROR_INVALID_CONTROL_CHAR 168
		G_REGEX_ERROR_MISSING_NAME 169
		G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS 171
		G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES 172
		G_REGEX_ERROR_NAME_TOO_LONG 175
		G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE 176
	]

	GRegexCompileFlags: [
		G_REGEX_CASELESS 1
		G_REGEX_MULTILINE 2
		G_REGEX_DOTALL 4
		G_REGEX_EXTENDED 8
		G_REGEX_ANCHORED 16
		G_REGEX_DOLLAR_ENDONLY 32
		G_REGEX_UNGREEDY 512
		G_REGEX_RAW 2048
		G_REGEX_NO_AUTO_CAPTURE 4096
		G_REGEX_OPTIMIZE 8192
		G_REGEX_FIRSTLINE 262144
		G_REGEX_DUPNAMES 524288
		G_REGEX_NEWLINE_CR 1048576
		G_REGEX_NEWLINE_LF 2097152
		G_REGEX_NEWLINE_CRLF 3145728
		G_REGEX_NEWLINE_ANYCRLF 5242880
		G_REGEX_BSR_ANYCRLF 8388608
		G_REGEX_JAVASCRIPT_COMPAT 33554432
	]

	GRegexMatchFlags: [
		G_REGEX_MATCH_ANCHORED 16
		G_REGEX_MATCH_NOTBOL 128
		G_REGEX_MATCH_NOTEOL 256
		G_REGEX_MATCH_NOTEMPTY 1024
		G_REGEX_MATCH_PARTIAL 32768
		G_REGEX_MATCH_NEWLINE_CR 1048576
		G_REGEX_MATCH_NEWLINE_LF 2097152
		G_REGEX_MATCH_NEWLINE_CRLF 3145728
		G_REGEX_MATCH_NEWLINE_ANY 4194304
		G_REGEX_MATCH_NEWLINE_ANYCRLF 5242880
		G_REGEX_MATCH_BSR_ANYCRLF 8388608
		G_REGEX_MATCH_BSR_ANY 16777216
		G_REGEX_MATCH_PARTIAL_SOFT 32768
		G_REGEX_MATCH_PARTIAL_HARD 134217728
		G_REGEX_MATCH_NOTEMPTY_ATSTART 268435456
	]

	GErrorType: [
		G_ERR_UNKNOWN 0
		G_ERR_UNEXP_EOF 1
		G_ERR_UNEXP_EOF_IN_STRING 2
		G_ERR_UNEXP_EOF_IN_COMMENT 3
		G_ERR_NON_DIGIT_IN_CONST 4
		G_ERR_DIGIT_RADIX 5
		G_ERR_FLOAT_RADIX 6
		G_ERR_FLOAT_MALFORMED 7
	]

	GTokenType: [
		G_TOKEN_EOF 0
		G_TOKEN_LEFT_PAREN 40
		G_TOKEN_RIGHT_PAREN 41
		G_TOKEN_LEFT_CURLY 123
		G_TOKEN_RIGHT_CURLY 125
		G_TOKEN_LEFT_BRACE 91
		G_TOKEN_RIGHT_BRACE 93
		G_TOKEN_EQUAL_SIGN 61
		G_TOKEN_COMMA 44
		G_TOKEN_NONE 256
		G_TOKEN_ERROR 257
		G_TOKEN_CHAR 258
		G_TOKEN_BINARY 259
		G_TOKEN_OCTAL 260
		G_TOKEN_INT 261
		G_TOKEN_HEX 262
		G_TOKEN_FLOAT 263
		G_TOKEN_STRING 264
		G_TOKEN_SYMBOL 265
		G_TOKEN_IDENTIFIER 266
		G_TOKEN_IDENTIFIER_NULL 267
		G_TOKEN_COMMENT_SINGLE 268
		G_TOKEN_COMMENT_MULTI 269
		G_TOKEN_LAST 270
	]

	GShellError: [
		G_SHELL_ERROR_BAD_QUOTING 0
		G_SHELL_ERROR_EMPTY_STRING 1
		G_SHELL_ERROR_FAILED 2
	]

	GSliceConfig: [
		G_SLICE_CONFIG_ALWAYS_MALLOC 1
		G_SLICE_CONFIG_BYPASS_MAGAZINES 2
		G_SLICE_CONFIG_WORKING_SET_MSECS 3
		G_SLICE_CONFIG_COLOR_INCREMENT 4
		G_SLICE_CONFIG_CHUNK_SIZES 5
		G_SLICE_CONFIG_CONTENTION_COUNTER 6
	]

	GSpawnError: [
		G_SPAWN_ERROR_FORK 0
		G_SPAWN_ERROR_READ 1
		G_SPAWN_ERROR_CHDIR 2
		G_SPAWN_ERROR_ACCES 3
		G_SPAWN_ERROR_PERM 4
		G_SPAWN_ERROR_TOO_BIG 5
		G_SPAWN_ERROR_2BIG 5
		G_SPAWN_ERROR_NOEXEC 6
		G_SPAWN_ERROR_NAMETOOLONG 7
		G_SPAWN_ERROR_NOENT 8
		G_SPAWN_ERROR_NOMEM 9
		G_SPAWN_ERROR_NOTDIR 10
		G_SPAWN_ERROR_LOOP 11
		G_SPAWN_ERROR_TXTBUSY 12
		G_SPAWN_ERROR_IO 13
		G_SPAWN_ERROR_NFILE 14
		G_SPAWN_ERROR_MFILE 15
		G_SPAWN_ERROR_INVAL 16
		G_SPAWN_ERROR_ISDIR 17
		G_SPAWN_ERROR_LIBBAD 18
		G_SPAWN_ERROR_FAILED 19
	]

	GSpawnFlags: [
		G_SPAWN_DEFAULT 0
		G_SPAWN_LEAVE_DESCRIPTORS_OPEN 1
		G_SPAWN_DO_NOT_REAP_CHILD 2
		G_SPAWN_SEARCH_PATH 4
		G_SPAWN_STDOUT_TO_DEV_NULL 8
		G_SPAWN_STDERR_TO_DEV_NULL 16
		G_SPAWN_CHILD_INHERITS_STDIN 32
		G_SPAWN_FILE_AND_ARGV_ZERO 64
		G_SPAWN_SEARCH_PATH_FROM_ENVP 128
		G_SPAWN_CLOEXEC_PIPES 256
	]

	GAsciiType: [
		G_ASCII_ALNUM 1
		G_ASCII_ALPHA 2
		G_ASCII_CNTRL 4
		G_ASCII_DIGIT 8
		G_ASCII_GRAPH 16
		G_ASCII_LOWER 32
		G_ASCII_PRINT 64
		G_ASCII_PUNCT 128
		G_ASCII_SPACE 256
		G_ASCII_UPPER 512
		G_ASCII_XDIGIT 1024
	]

	GTestTrapFlags: [
		G_TEST_TRAP_SILENCE_STDOUT 128
		G_TEST_TRAP_SILENCE_STDERR 256
		G_TEST_TRAP_INHERIT_STDIN 512
	]

	GTestSubprocessFlags: [
		G_TEST_SUBPROCESS_INHERIT_STDIN 1
		G_TEST_SUBPROCESS_INHERIT_STDOUT 2
		G_TEST_SUBPROCESS_INHERIT_STDERR 4
	]

	GTestLogType: [
		G_TEST_LOG_NONE 0
		G_TEST_LOG_ERROR 1
		G_TEST_LOG_START_BINARY 2
		G_TEST_LOG_LIST_CASE 3
		G_TEST_LOG_SKIP_CASE 4
		G_TEST_LOG_START_CASE 5
		G_TEST_LOG_STOP_CASE 6
		G_TEST_LOG_MIN_RESULT 7
		G_TEST_LOG_MAX_RESULT 8
		G_TEST_LOG_MESSAGE 9
		G_TEST_LOG_START_SUITE 10
		G_TEST_LOG_STOP_SUITE 11
	]

	GTestFileType: [
		G_TEST_DIST 0
		G_TEST_BUILT 1
	]

	GVariantClass: [
		G_VARIANT_CLASS_BOOLEAN 98
		G_VARIANT_CLASS_BYTE 121
		G_VARIANT_CLASS_INT16 110
		G_VARIANT_CLASS_UINT16 113
		G_VARIANT_CLASS_INT32 105
		G_VARIANT_CLASS_UINT32 117
		G_VARIANT_CLASS_INT64 120
		G_VARIANT_CLASS_UINT64 116
		G_VARIANT_CLASS_HANDLE 104
		G_VARIANT_CLASS_DOUBLE 100
		G_VARIANT_CLASS_STRING 115
		G_VARIANT_CLASS_OBJECT_PATH 111
		G_VARIANT_CLASS_SIGNATURE 103
		G_VARIANT_CLASS_VARIANT 118
		G_VARIANT_CLASS_MAYBE 109
		G_VARIANT_CLASS_ARRAY 97
		G_VARIANT_CLASS_TUPLE 40
		G_VARIANT_CLASS_DICT_ENTRY 123
	]

	GVariantParseError: [
		G_VARIANT_PARSE_ERROR_FAILED 0
		G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED 1
		G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE 2
		G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED 3
		G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END 4
		G_VARIANT_PARSE_ERROR_INVALID_CHARACTER 5
		G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING 6
		G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH 7
		G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE 8
		G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING 9
		G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE 10
		G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE 11
		G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG 12
		G_VARIANT_PARSE_ERROR_TYPE_ERROR 13
		G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN 14
		G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD 15
		G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT 16
		G_VARIANT_PARSE_ERROR_VALUE_EXPECTED 17
	]

	GThreadPriority: [
		G_THREAD_PRIORITY_LOW 0
		G_THREAD_PRIORITY_NORMAL 1
		G_THREAD_PRIORITY_HIGH 2
		G_THREAD_PRIORITY_URGENT 3
	]

	GTypeDebugFlags: [
		G_TYPE_DEBUG_NONE 0
		G_TYPE_DEBUG_OBJECTS 1
		G_TYPE_DEBUG_SIGNALS 2
		G_TYPE_DEBUG_MASK 3
	]

	GTypeFundamentalFlags: [
		G_TYPE_FLAG_CLASSED 1
		G_TYPE_FLAG_INSTANTIATABLE 2
		G_TYPE_FLAG_DERIVABLE 4
		G_TYPE_FLAG_DEEP_DERIVABLE 8
	]

	GTypeFlags: [
		G_TYPE_FLAG_ABSTRACT 16
		G_TYPE_FLAG_VALUE_ABSTRACT 32
	]

	GParamFlags: [
		G_PARAM_READABLE 1
		G_PARAM_WRITABLE 2
		G_PARAM_READWRITE 3
		G_PARAM_CONSTRUCT 4
		G_PARAM_CONSTRUCT_ONLY 8
		G_PARAM_LAX_VALIDATION 16
		G_PARAM_STATIC_NAME 32
		G_PARAM_PRIVATE 32
		G_PARAM_STATIC_NICK 64
		G_PARAM_STATIC_BLURB 128
		G_PARAM_EXPLICIT_NOTIFY 1073741824
		G_PARAM_DEPRECATED -2147483648
	]

	GSignalFlags: [
		G_SIGNAL_RUN_FIRST 1
		G_SIGNAL_RUN_LAST 2
		G_SIGNAL_RUN_CLEANUP 4
		G_SIGNAL_NO_RECURSE 8
		G_SIGNAL_DETAILED 16
		G_SIGNAL_ACTION 32
		G_SIGNAL_NO_HOOKS 64
		G_SIGNAL_MUST_COLLECT 128
		G_SIGNAL_DEPRECATED 256
	]

	GConnectFlags: [
		G_CONNECT_AFTER 1
		G_CONNECT_SWAPPED 2
	]

	GSignalMatchType: [
		G_SIGNAL_MATCH_ID 1
		G_SIGNAL_MATCH_DETAIL 2
		G_SIGNAL_MATCH_CLOSURE 4
		G_SIGNAL_MATCH_FUNC 8
		G_SIGNAL_MATCH_DATA 16
		G_SIGNAL_MATCH_UNBLOCKED 32
	]

	GBindingFlags: [
		G_BINDING_DEFAULT 0
		G_BINDING_BIDIRECTIONAL 1
		G_BINDING_SYNC_CREATE 2
		G_BINDING_INVERT_BOOLEAN 4
	]

	GModuleFlags: [
		G_MODULE_BIND_LAZY 1
		G_MODULE_BIND_LOCAL 2
		G_MODULE_BIND_MASK 3
	]

	GAppInfoCreateFlags: [
		G_APP_INFO_CREATE_NONE 0
		G_APP_INFO_CREATE_NEEDS_TERMINAL 1
		G_APP_INFO_CREATE_SUPPORTS_URIS 2
		G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION 4
	]

	GConverterFlags: [
		G_CONVERTER_NO_FLAGS 0
		G_CONVERTER_INPUT_AT_END 1
		G_CONVERTER_FLUSH 2
	]

	GConverterResult: [
		G_CONVERTER_ERROR 0
		G_CONVERTER_CONVERTED 1
		G_CONVERTER_FINISHED 2
		G_CONVERTER_FLUSHED 3
	]

	GDataStreamByteOrder: [
		G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN 0
		G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN 1
		G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN 2
	]

	GDataStreamNewlineType: [
		G_DATA_STREAM_NEWLINE_TYPE_LF 0
		G_DATA_STREAM_NEWLINE_TYPE_CR 1
		G_DATA_STREAM_NEWLINE_TYPE_CR_LF 2
		G_DATA_STREAM_NEWLINE_TYPE_ANY 3
	]

	GFileAttributeType: [
		G_FILE_ATTRIBUTE_TYPE_INVALID 0
		G_FILE_ATTRIBUTE_TYPE_STRING 1
		G_FILE_ATTRIBUTE_TYPE_BYTE_STRING 2
		G_FILE_ATTRIBUTE_TYPE_BOOLEAN 3
		G_FILE_ATTRIBUTE_TYPE_UINT32 4
		G_FILE_ATTRIBUTE_TYPE_INT32 5
		G_FILE_ATTRIBUTE_TYPE_UINT64 6
		G_FILE_ATTRIBUTE_TYPE_INT64 7
		G_FILE_ATTRIBUTE_TYPE_OBJECT 8
		G_FILE_ATTRIBUTE_TYPE_STRINGV 9
	]

	GFileAttributeInfoFlags: [
		G_FILE_ATTRIBUTE_INFO_NONE 0
		G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE 1
		G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED 2
	]

	GFileAttributeStatus: [
		G_FILE_ATTRIBUTE_STATUS_UNSET 0
		G_FILE_ATTRIBUTE_STATUS_SET 1
		G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING 2
	]

	GFileQueryInfoFlags: [
		G_FILE_QUERY_INFO_NONE 0
		G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS 1
	]

	GFileCreateFlags: [
		G_FILE_CREATE_NONE 0
		G_FILE_CREATE_PRIVATE 1
		G_FILE_CREATE_REPLACE_DESTINATION 2
	]

	GFileMeasureFlags: [
		G_FILE_MEASURE_NONE 0
		G_FILE_MEASURE_REPORT_ANY_ERROR 2
		G_FILE_MEASURE_APPARENT_SIZE 4
		G_FILE_MEASURE_NO_XDEV 8
	]

	GMountMountFlags: [
		G_MOUNT_MOUNT_NONE 0
	]

	GMountUnmountFlags: [
		G_MOUNT_UNMOUNT_NONE 0
		G_MOUNT_UNMOUNT_FORCE 1
	]

	GDriveStartFlags: [
		G_DRIVE_START_NONE 0
	]

	GDriveStartStopType: [
		G_DRIVE_START_STOP_TYPE_UNKNOWN 0
		G_DRIVE_START_STOP_TYPE_SHUTDOWN 1
		G_DRIVE_START_STOP_TYPE_NETWORK 2
		G_DRIVE_START_STOP_TYPE_MULTIDISK 3
		G_DRIVE_START_STOP_TYPE_PASSWORD 4
	]

	GFileCopyFlags: [
		G_FILE_COPY_NONE 0
		G_FILE_COPY_OVERWRITE 1
		G_FILE_COPY_BACKUP 2
		G_FILE_COPY_NOFOLLOW_SYMLINKS 4
		G_FILE_COPY_ALL_METADATA 8
		G_FILE_COPY_NO_FALLBACK_FOR_MOVE 16
		G_FILE_COPY_TARGET_DEFAULT_PERMS 32
	]

	GFileMonitorFlags: [
		G_FILE_MONITOR_NONE 0
		G_FILE_MONITOR_WATCH_MOUNTS 1
		G_FILE_MONITOR_SEND_MOVED 2
		G_FILE_MONITOR_WATCH_HARD_LINKS 4
	]

	GFileType: [
		G_FILE_TYPE_UNKNOWN 0
		G_FILE_TYPE_REGULAR 1
		G_FILE_TYPE_DIRECTORY 2
		G_FILE_TYPE_SYMBOLIC_LINK 3
		G_FILE_TYPE_SPECIAL 4
		G_FILE_TYPE_SHORTCUT 5
		G_FILE_TYPE_MOUNTABLE 6
	]

	GFilesystemPreviewType: [
		G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS 0
		G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL 1
		G_FILESYSTEM_PREVIEW_TYPE_NEVER 2
	]

	GFileMonitorEvent: [
		G_FILE_MONITOR_EVENT_CHANGED 0
		G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT 1
		G_FILE_MONITOR_EVENT_DELETED 2
		G_FILE_MONITOR_EVENT_CREATED 3
		G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED 4
		G_FILE_MONITOR_EVENT_PRE_UNMOUNT 5
		G_FILE_MONITOR_EVENT_UNMOUNTED 6
		G_FILE_MONITOR_EVENT_MOVED 7
	]

	GIOErrorEnum: [
		G_IO_ERROR_FAILED 0
		G_IO_ERROR_NOT_FOUND 1
		G_IO_ERROR_EXISTS 2
		G_IO_ERROR_IS_DIRECTORY 3
		G_IO_ERROR_NOT_DIRECTORY 4
		G_IO_ERROR_NOT_EMPTY 5
		G_IO_ERROR_NOT_REGULAR_FILE 6
		G_IO_ERROR_NOT_SYMBOLIC_LINK 7
		G_IO_ERROR_NOT_MOUNTABLE_FILE 8
		G_IO_ERROR_FILENAME_TOO_LONG 9
		G_IO_ERROR_INVALID_FILENAME 10
		G_IO_ERROR_TOO_MANY_LINKS 11
		G_IO_ERROR_NO_SPACE 12
		G_IO_ERROR_INVALID_ARGUMENT 13
		G_IO_ERROR_PERMISSION_DENIED 14
		G_IO_ERROR_NOT_SUPPORTED 15
		G_IO_ERROR_NOT_MOUNTED 16
		G_IO_ERROR_ALREADY_MOUNTED 17
		G_IO_ERROR_CLOSED 18
		G_IO_ERROR_CANCELLED 19
		G_IO_ERROR_PENDING 20
		G_IO_ERROR_READ_ONLY 21
		G_IO_ERROR_CANT_CREATE_BACKUP 22
		G_IO_ERROR_WRONG_ETAG 23
		G_IO_ERROR_TIMED_OUT 24
		G_IO_ERROR_WOULD_RECURSE 25
		G_IO_ERROR_BUSY 26
		G_IO_ERROR_WOULD_BLOCK 27
		G_IO_ERROR_HOST_NOT_FOUND 28
		G_IO_ERROR_WOULD_MERGE 29
		G_IO_ERROR_FAILED_HANDLED 30
		G_IO_ERROR_TOO_MANY_OPEN_FILES 31
		G_IO_ERROR_NOT_INITIALIZED 32
		G_IO_ERROR_ADDRESS_IN_USE 33
		G_IO_ERROR_PARTIAL_INPUT 34
		G_IO_ERROR_INVALID_DATA 35
		G_IO_ERROR_DBUS_ERROR 36
		G_IO_ERROR_HOST_UNREACHABLE 37
		G_IO_ERROR_NETWORK_UNREACHABLE 38
		G_IO_ERROR_CONNECTION_REFUSED 39
		G_IO_ERROR_PROXY_FAILED 40
		G_IO_ERROR_PROXY_AUTH_FAILED 41
		G_IO_ERROR_PROXY_NEED_AUTH 42
		G_IO_ERROR_PROXY_NOT_ALLOWED 43
		G_IO_ERROR_BROKEN_PIPE 44
	]

	GAskPasswordFlags: [
		G_ASK_PASSWORD_NEED_PASSWORD 1
		G_ASK_PASSWORD_NEED_USERNAME 2
		G_ASK_PASSWORD_NEED_DOMAIN 4
		G_ASK_PASSWORD_SAVING_SUPPORTED 8
		G_ASK_PASSWORD_ANONYMOUS_SUPPORTED 16
	]

	GPasswordSave: [
		G_PASSWORD_SAVE_NEVER 0
		G_PASSWORD_SAVE_FOR_SESSION 1
		G_PASSWORD_SAVE_PERMANENTLY 2
	]

	GMountOperationResult: [
		G_MOUNT_OPERATION_HANDLED 0
		G_MOUNT_OPERATION_ABORTED 1
		G_MOUNT_OPERATION_UNHANDLED 2
	]

	GOutputStreamSpliceFlags: [
		G_OUTPUT_STREAM_SPLICE_NONE 0
		G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE 1
		G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET 2
	]

	GIOStreamSpliceFlags: [
		G_IO_STREAM_SPLICE_NONE 0
		G_IO_STREAM_SPLICE_CLOSE_STREAM1 1
		G_IO_STREAM_SPLICE_CLOSE_STREAM2 2
		G_IO_STREAM_SPLICE_WAIT_FOR_BOTH 4
	]

	GEmblemOrigin: [
		G_EMBLEM_ORIGIN_UNKNOWN 0
		G_EMBLEM_ORIGIN_DEVICE 1
		G_EMBLEM_ORIGIN_LIVEMETADATA 2
		G_EMBLEM_ORIGIN_TAG 3
	]

	GResolverError: [
		G_RESOLVER_ERROR_NOT_FOUND 0
		G_RESOLVER_ERROR_TEMPORARY_FAILURE 1
		G_RESOLVER_ERROR_INTERNAL 2
	]

	GResolverRecordType: [
		G_RESOLVER_RECORD_SRV 1
		G_RESOLVER_RECORD_MX 2
		G_RESOLVER_RECORD_TXT 3
		G_RESOLVER_RECORD_SOA 4
		G_RESOLVER_RECORD_NS 5
	]

	GResourceError: [
		G_RESOURCE_ERROR_NOT_FOUND 0
		G_RESOURCE_ERROR_INTERNAL 1
	]

	GResourceFlags: [
		G_RESOURCE_FLAGS_NONE 0
		G_RESOURCE_FLAGS_COMPRESSED 1
	]

	GResourceLookupFlags: [
		G_RESOURCE_LOOKUP_FLAGS_NONE 0
	]

	GSocketFamily: [
		G_SOCKET_FAMILY_INVALID 0
		G_SOCKET_FAMILY_UNIX 1
		G_SOCKET_FAMILY_IPV4 2
		G_SOCKET_FAMILY_IPV6 10
	]

	GSocketType: [
		G_SOCKET_TYPE_INVALID 0
		G_SOCKET_TYPE_STREAM 1
		G_SOCKET_TYPE_DATAGRAM 2
		G_SOCKET_TYPE_SEQPACKET 3
	]

	GSocketMsgFlags: [
		G_SOCKET_MSG_NONE 0
		G_SOCKET_MSG_OOB 1
		G_SOCKET_MSG_PEEK 2
		G_SOCKET_MSG_DONTROUTE 4
	]

	GSocketProtocol: [
		G_SOCKET_PROTOCOL_UNKNOWN -1
		G_SOCKET_PROTOCOL_DEFAULT 0
		G_SOCKET_PROTOCOL_TCP 6
		G_SOCKET_PROTOCOL_UDP 17
		G_SOCKET_PROTOCOL_SCTP 132
	]

	GZlibCompressorFormat: [
		G_ZLIB_COMPRESSOR_FORMAT_ZLIB 0
		G_ZLIB_COMPRESSOR_FORMAT_GZIP 1
		G_ZLIB_COMPRESSOR_FORMAT_RAW 2
	]

	GUnixSocketAddressType: [
		G_UNIX_SOCKET_ADDRESS_INVALID 0
		G_UNIX_SOCKET_ADDRESS_ANONYMOUS 1
		G_UNIX_SOCKET_ADDRESS_PATH 2
		G_UNIX_SOCKET_ADDRESS_ABSTRACT 3
		G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED 4
	]

	GBusType: [
		G_BUS_TYPE_STARTER -1
		G_BUS_TYPE_NONE 0
		G_BUS_TYPE_SYSTEM 1
		G_BUS_TYPE_SESSION 2
	]

	GBusNameOwnerFlags: [
		G_BUS_NAME_OWNER_FLAGS_NONE 0
		G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT 1
		G_BUS_NAME_OWNER_FLAGS_REPLACE 2
	]

	GBusNameWatcherFlags: [
		G_BUS_NAME_WATCHER_FLAGS_NONE 0
		G_BUS_NAME_WATCHER_FLAGS_AUTO_START 1
	]

	GDBusProxyFlags: [
		G_DBUS_PROXY_FLAGS_NONE 0
		G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES 1
		G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS 2
		G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START 4
		G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES 8
		G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION 16
	]

	GDBusError: [
		G_DBUS_ERROR_FAILED 0
		G_DBUS_ERROR_NO_MEMORY 1
		G_DBUS_ERROR_SERVICE_UNKNOWN 2
		G_DBUS_ERROR_NAME_HAS_NO_OWNER 3
		G_DBUS_ERROR_NO_REPLY 4
		G_DBUS_ERROR_IO_ERROR 5
		G_DBUS_ERROR_BAD_ADDRESS 6
		G_DBUS_ERROR_NOT_SUPPORTED 7
		G_DBUS_ERROR_LIMITS_EXCEEDED 8
		G_DBUS_ERROR_ACCESS_DENIED 9
		G_DBUS_ERROR_AUTH_FAILED 10
		G_DBUS_ERROR_NO_SERVER 11
		G_DBUS_ERROR_TIMEOUT 12
		G_DBUS_ERROR_NO_NETWORK 13
		G_DBUS_ERROR_ADDRESS_IN_USE 14
		G_DBUS_ERROR_DISCONNECTED 15
		G_DBUS_ERROR_INVALID_ARGS 16
		G_DBUS_ERROR_FILE_NOT_FOUND 17
		G_DBUS_ERROR_FILE_EXISTS 18
		G_DBUS_ERROR_UNKNOWN_METHOD 19
		G_DBUS_ERROR_TIMED_OUT 20
		G_DBUS_ERROR_MATCH_RULE_NOT_FOUND 21
		G_DBUS_ERROR_MATCH_RULE_INVALID 22
		G_DBUS_ERROR_SPAWN_EXEC_FAILED 23
		G_DBUS_ERROR_SPAWN_FORK_FAILED 24
		G_DBUS_ERROR_SPAWN_CHILD_EXITED 25
		G_DBUS_ERROR_SPAWN_CHILD_SIGNALED 26
		G_DBUS_ERROR_SPAWN_FAILED 27
		G_DBUS_ERROR_SPAWN_SETUP_FAILED 28
		G_DBUS_ERROR_SPAWN_CONFIG_INVALID 29
		G_DBUS_ERROR_SPAWN_SERVICE_INVALID 30
		G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND 31
		G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID 32
		G_DBUS_ERROR_SPAWN_FILE_INVALID 33
		G_DBUS_ERROR_SPAWN_NO_MEMORY 34
		G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN 35
		G_DBUS_ERROR_INVALID_SIGNATURE 36
		G_DBUS_ERROR_INVALID_FILE_CONTENT 37
		G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN 38
		G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN 39
		G_DBUS_ERROR_OBJECT_PATH_IN_USE 40
		G_DBUS_ERROR_UNKNOWN_OBJECT 41
		G_DBUS_ERROR_UNKNOWN_INTERFACE 42
		G_DBUS_ERROR_UNKNOWN_PROPERTY 43
		G_DBUS_ERROR_PROPERTY_READ_ONLY 44
	]

	GDBusConnectionFlags: [
		G_DBUS_CONNECTION_FLAGS_NONE 0
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT 1
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER 2
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS 4
		G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION 8
		G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING 16
	]

	GDBusCapabilityFlags: [
		G_DBUS_CAPABILITY_FLAGS_NONE 0
		G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING 1
	]

	GDBusCallFlags: [
		G_DBUS_CALL_FLAGS_NONE 0
		G_DBUS_CALL_FLAGS_NO_AUTO_START 1
	]

	GDBusMessageType: [
		G_DBUS_MESSAGE_TYPE_INVALID 0
		G_DBUS_MESSAGE_TYPE_METHOD_CALL 1
		G_DBUS_MESSAGE_TYPE_METHOD_RETURN 2
		G_DBUS_MESSAGE_TYPE_ERROR 3
		G_DBUS_MESSAGE_TYPE_SIGNAL 4
	]

	GDBusMessageFlags: [
		G_DBUS_MESSAGE_FLAGS_NONE 0
		G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED 1
		G_DBUS_MESSAGE_FLAGS_NO_AUTO_START 2
	]

	GDBusMessageHeaderField: [
		G_DBUS_MESSAGE_HEADER_FIELD_INVALID 0
		G_DBUS_MESSAGE_HEADER_FIELD_PATH 1
		G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE 2
		G_DBUS_MESSAGE_HEADER_FIELD_MEMBER 3
		G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME 4
		G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL 5
		G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION 6
		G_DBUS_MESSAGE_HEADER_FIELD_SENDER 7
		G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE 8
		G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS 9
	]

	GDBusPropertyInfoFlags: [
		G_DBUS_PROPERTY_INFO_FLAGS_NONE 0
		G_DBUS_PROPERTY_INFO_FLAGS_READABLE 1
		G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE 2
	]

	GDBusSubtreeFlags: [
		G_DBUS_SUBTREE_FLAGS_NONE 0
		G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES 1
	]

	GDBusServerFlags: [
		G_DBUS_SERVER_FLAGS_NONE 0
		G_DBUS_SERVER_FLAGS_RUN_IN_THREAD 1
		G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS 2
	]

	GDBusSignalFlags: [
		G_DBUS_SIGNAL_FLAGS_NONE 0
		G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE 1
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE 2
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH 4
	]

	GDBusSendMessageFlags: [
		G_DBUS_SEND_MESSAGE_FLAGS_NONE 0
		G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL 1
	]

	GCredentialsType: [
		G_CREDENTIALS_TYPE_INVALID 0
		G_CREDENTIALS_TYPE_LINUX_UCRED 1
		G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED 2
		G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED 3
		G_CREDENTIALS_TYPE_SOLARIS_UCRED 4
		G_CREDENTIALS_TYPE_NETBSD_UNPCBID 5
	]

	GDBusMessageByteOrder: [
		G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN 66
		G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN 108
	]

	GApplicationFlags: [
		G_APPLICATION_FLAGS_NONE 0
		G_APPLICATION_IS_SERVICE 1
		G_APPLICATION_IS_LAUNCHER 2
		G_APPLICATION_HANDLES_OPEN 4
		G_APPLICATION_HANDLES_COMMAND_LINE 8
		G_APPLICATION_SEND_ENVIRONMENT 16
		G_APPLICATION_NON_UNIQUE 32
	]

	GTlsError: [
		G_TLS_ERROR_UNAVAILABLE 0
		G_TLS_ERROR_MISC 1
		G_TLS_ERROR_BAD_CERTIFICATE 2
		G_TLS_ERROR_NOT_TLS 3
		G_TLS_ERROR_HANDSHAKE 4
		G_TLS_ERROR_CERTIFICATE_REQUIRED 5
		G_TLS_ERROR_EOF 6
	]

	GTlsCertificateFlags: [
		G_TLS_CERTIFICATE_UNKNOWN_CA 1
		G_TLS_CERTIFICATE_BAD_IDENTITY 2
		G_TLS_CERTIFICATE_NOT_ACTIVATED 4
		G_TLS_CERTIFICATE_EXPIRED 8
		G_TLS_CERTIFICATE_REVOKED 16
		G_TLS_CERTIFICATE_INSECURE 32
		G_TLS_CERTIFICATE_GENERIC_ERROR 64
		G_TLS_CERTIFICATE_VALIDATE_ALL 127
	]

	GTlsAuthenticationMode: [
		G_TLS_AUTHENTICATION_NONE 0
		G_TLS_AUTHENTICATION_REQUESTED 1
		G_TLS_AUTHENTICATION_REQUIRED 2
	]

	GTlsRehandshakeMode: [
		G_TLS_REHANDSHAKE_NEVER 0
		G_TLS_REHANDSHAKE_SAFELY 1
		G_TLS_REHANDSHAKE_UNSAFELY 2
	]

	GTlsInteractionResult: [
		G_TLS_INTERACTION_UNHANDLED 0
		G_TLS_INTERACTION_HANDLED 1
		G_TLS_INTERACTION_FAILED 2
	]

	GDBusInterfaceSkeletonFlags: [
		G_DBUS_INTERFACE_SKELETON_FLAGS_NONE 0
		G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD 1
	]

	GDBusObjectManagerClientFlags: [
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE 0
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START 1
	]

	GTlsDatabaseVerifyFlags: [
		G_TLS_DATABASE_VERIFY_NONE 0
	]

	GTlsDatabaseLookupFlags: [
		G_TLS_DATABASE_LOOKUP_NONE 0
		G_TLS_DATABASE_LOOKUP_KEYPAIR 1
	]

	GTlsCertificateRequestFlags: [
		G_TLS_CERTIFICATE_REQUEST_NONE 0
	]

	GIOModuleScopeFlags: [
		G_IO_MODULE_SCOPE_NONE 0
		G_IO_MODULE_SCOPE_BLOCK_DUPLICATES 1
	]

	GSocketClientEvent: [
		G_SOCKET_CLIENT_RESOLVING 0
		G_SOCKET_CLIENT_RESOLVED 1
		G_SOCKET_CLIENT_CONNECTING 2
		G_SOCKET_CLIENT_CONNECTED 3
		G_SOCKET_CLIENT_PROXY_NEGOTIATING 4
		G_SOCKET_CLIENT_PROXY_NEGOTIATED 5
		G_SOCKET_CLIENT_TLS_HANDSHAKING 6
		G_SOCKET_CLIENT_TLS_HANDSHAKED 7
		G_SOCKET_CLIENT_COMPLETE 8
	]

	GTestDBusFlags: [
		G_TEST_DBUS_NONE 0
	]

	GSubprocessFlags: [
		G_SUBPROCESS_FLAGS_NONE 0
		G_SUBPROCESS_FLAGS_STDIN_PIPE 1
		G_SUBPROCESS_FLAGS_STDIN_INHERIT 2
		G_SUBPROCESS_FLAGS_STDOUT_PIPE 4
		G_SUBPROCESS_FLAGS_STDOUT_SILENCE 8
		G_SUBPROCESS_FLAGS_STDERR_PIPE 16
		G_SUBPROCESS_FLAGS_STDERR_SILENCE 32
		G_SUBPROCESS_FLAGS_STDERR_MERGE 64
		G_SUBPROCESS_FLAGS_INHERIT_FDS 128
	]

	GNotificationPriority: [
		G_NOTIFICATION_PRIORITY_NORMAL 0
		G_NOTIFICATION_PRIORITY_LOW 1
		G_NOTIFICATION_PRIORITY_HIGH 2
		G_NOTIFICATION_PRIORITY_URGENT 3
	]

	GSettingsBindFlags: [
		G_SETTINGS_BIND_DEFAULT 0
		G_SETTINGS_BIND_GET 1
		G_SETTINGS_BIND_SET 2
		G_SETTINGS_BIND_NO_SENSITIVITY 4
		G_SETTINGS_BIND_GET_NO_CHANGES 8
		G_SETTINGS_BIND_INVERT_BOOLEAN 16
	]

	_GDoubleIEEE754: GDoubleIEEE754: make struct! compose/deep [
		fake [uint8 [8]]
	]
	_GFloatIEEE754: GFloatIEEE754: make struct! compose/deep [
		fake [uint8 [4]]
	]
	_GTimeVal: GTimeVal: make struct! compose/deep [
		tv_sec [int64]
		tv_usec [int64]
	]
	_GArray: GArray: make struct! compose/deep [
		data [pointer]
		len [uint32]
	]
	_GByteArray: GByteArray: make struct! compose/deep [
		data [pointer]
		len [uint32]
	]
	_GPtrArray: GPtrArray: make struct! compose/deep [
		pdata [pointer]
		len [uint32]
	]
	_GError: GError: make struct! compose/deep [
		domain [uint32]
		code [int32]
		message [pointer]
	]
	_GThread: GThread: make struct! compose/deep [
		func [pointer]
		data [pointer]
		joinable [int32]
		priority [int32]
	]
	_GMutex: GMutex: make struct! compose/deep [
		fake [uint8 [8]]
	]
	_GRecMutex: GRecMutex: make struct! compose/deep [
		p [pointer]
		i [uint32 [2]]
	]
	_GRWLock: GRWLock: make struct! compose/deep [
		p [pointer]
		i [uint32 [2]]
	]
	_GCond: GCond: make struct! compose/deep [
		p [pointer]
		i [uint32 [2]]
	]
	_GPrivate: GPrivate: make struct! compose/deep [
		p [pointer]
		notify [pointer]
		future [pointer [2]]
	]
	_GOnce: GOnce: make struct! compose/deep [
		status [int32]
		padding1 [uint8 [4]]
		retval [pointer]
	]
	_GDate: GDate: make struct! compose/deep [
		julian_days [uint32]
		julian [uint32]
		;dmy, merged with the previous field
		;day, merged with the previous field
		;month, merged with the previous field
		;year, merged with the previous field
	]
	_GMemVTable: GMemVTable: make struct! compose/deep [
		malloc [pointer]
		realloc [pointer]
		free [pointer]
		calloc [pointer]
		try_malloc [pointer]
		try_realloc [pointer]
	]
	_GNode: GNode: make struct! compose/deep [
		data [pointer]
		next [pointer]
		prev [pointer]
		parent [pointer]
		children [pointer]
	]
	_GList: GList: make struct! compose/deep [
		data [pointer]
		next [pointer]
		prev [pointer]
	]
	_GHashTableIter: GHashTableIter: make struct! compose/deep [
		dummy1 [pointer]
		dummy2 [pointer]
		dummy3 [pointer]
		dummy4 [int32]
		dummy5 [int32]
		dummy6 [pointer]
	]
	_GHook: GHook: make struct! compose/deep [
		data [pointer]
		next [pointer]
		prev [pointer]
		ref_count [uint32]
		padding4 [uint8 [4]]
		hook_id [uint64]
		flags [uint32]
		padding6 [uint8 [4]]
		func [pointer]
		destroy [pointer]
	]
	_GHookList: GHookList: make struct! compose/deep [
		seq_id [uint64]
		hook_size [uint32]
		;is_setup, merged with the previous field
		padding3 [uint8 [4]]
		hooks [pointer]
		dummy3 [pointer]
		finalize_hook [pointer]
		dummy [pointer [2]]
	]
	_GPollFD: GPollFD: make struct! compose/deep [
		fd [int32]
		events [uint16]
		revents [uint16]
	]
	_GSList: GSList: make struct! compose/deep [
		data [pointer]
		next [pointer]
	]
	_GSource: GSource: make struct! compose/deep [
		callback_data [pointer]
		callback_funcs [pointer]
		source_funcs [pointer]
		ref_count [uint32]
		padding4 [uint8 [4]]
		context [pointer]
		priority [int32]
		flags [uint32]
		source_id [uint32]
		padding8 [uint8 [4]]
		poll_fds [pointer]
		prev [pointer]
		next [pointer]
		name [pointer]
		priv [pointer]
	]
	_GSourceCallbackFuncs: GSourceCallbackFuncs: make struct! compose/deep [
		ref [pointer]
		unref [pointer]
		get [pointer]
	]
	_GSourceFuncs: GSourceFuncs: make struct! compose/deep [
		prepare [pointer]
		check [pointer]
		dispatch [pointer]
		finalize [pointer]
		closure_callback [pointer]
		closure_marshal [pointer]
	]
	_GDebugKey: GDebugKey: make struct! compose/deep [
		key [pointer]
		value [uint32]
	]
	_GString: GString: make struct! compose/deep [
		str [pointer]
		len [uint64]
		allocated_len [uint64]
	]
	_GIOChannel: GIOChannel: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		funcs [pointer]
		encoding [pointer]
		read_cd [pointer]
		write_cd [pointer]
		line_term [pointer]
		line_term_len [uint32]
		padding7 [uint8 [4]]
		buf_size [uint64]
		read_buf [pointer]
		encoded_read_buf [pointer]
		write_buf [pointer]
		partial_write_buf [int8 [6]]
		use_buffer [uint32]
		;do_encode, merged with the previous field
		;close_on_unref, merged with the previous field
		;is_readable, merged with the previous field
		;is_writeable, merged with the previous field
		;is_seekable, merged with the previous field
		;reserved1, merged with the previous field
		padding19 [uint8 [6]]
		reserved2 [pointer]
	]
	_GIOFuncs: GIOFuncs: make struct! compose/deep [
		io_read [pointer]
		io_write [pointer]
		io_seek [pointer]
		io_close [pointer]
		io_create_watch [pointer]
		io_free [pointer]
		io_set_flags [pointer]
		io_get_flags [pointer]
	]
	_GMarkupParser: GMarkupParser: make struct! compose/deep [
		start_element [pointer]
		end_element [pointer]
		text [pointer]
		passthrough [pointer]
		error [pointer]
	]
	_GOptionEntry: GOptionEntry: make struct! compose/deep [
		long_name [pointer]
		short_name [int8]
		padding2 [uint8 [3]]
		flags [int32]
		arg [int32]
		padding4 [uint8 [4]]
		arg_data [pointer]
		description [pointer]
		arg_description [pointer]
	]
	_GQueue: GQueue: make struct! compose/deep [
		head [pointer]
		tail [pointer]
		length [uint32]
	]
	_GScanner: GScanner: make struct! compose/deep [
		user_data [pointer]
		max_parse_errors [uint32]
		parse_errors [uint32]
		input_name [pointer]
		qdata [pointer]
		config [pointer]
		token [int32]
		padding7 [uint8 [12]]
		line [uint32]
		position [uint32]
		next_token [int32]
		padding10 [uint8 [12]]
		next_line [uint32]
		next_position [uint32]
		symbol_table [pointer]
		input_fd [int32]
		padding14 [uint8 [4]]
		text [pointer]
		text_end [pointer]
		buffer [pointer]
		scope_id [uint32]
		padding18 [uint8 [4]]
		msg_handler [pointer]
	]
	_GScannerConfig: GScannerConfig: make struct! compose/deep [
		cset_skip_characters [pointer]
		cset_identifier_first [pointer]
		cset_identifier_nth [pointer]
		cpair_comment_single [pointer]
		case_sensitive [uint32]
		;skip_comment_multi, merged with the previous field
		;skip_comment_single, merged with the previous field
		;scan_comment_multi, merged with the previous field
		;scan_identifier, merged with the previous field
		;scan_identifier_1char, merged with the previous field
		;scan_identifier_NULL, merged with the previous field
		;scan_symbols, merged with the previous field
		;scan_binary, merged with the previous field
		;scan_octal, merged with the previous field
		;scan_float, merged with the previous field
		;scan_hex, merged with the previous field
		;scan_hex_dollar, merged with the previous field
		;scan_string_sq, merged with the previous field
		;scan_string_dq, merged with the previous field
		;numbers_2_int, merged with the previous field
		;int_2_float, merged with the previous field
		;identifier_2_string, merged with the previous field
		;char_2_token, merged with the previous field
		;symbol_2_token, merged with the previous field
		;scope_0_fallback, merged with the previous field
		;store_int64, merged with the previous field
		padding_dummy [uint32]
	]
	_GTokenValue: GTokenValue: make struct! compose/deep [
		fake [uint8 [8]]
	]
	GTestConfig: make struct! compose/deep [
		test_initialized [int32]
		test_quick [int32]
		test_perf [int32]
		test_verbose [int32]
		test_quiet [int32]
		test_undefined [int32]
	]
	GTestLogMsg: make struct! compose/deep [
		log_type [int32]
		n_strings [uint32]
		strings [pointer]
		n_nums [uint32]
		padding4 [uint8 [4]]
		nums [pointer]
	]
	GTestLogBuffer: make struct! compose/deep [
		data [pointer]
		msgs [pointer]
	]
	_GThreadPool: GThreadPool: make struct! compose/deep [
		func [pointer]
		user_data [pointer]
		exclusive [int32]
	]
	_GTrashStack: GTrashStack: make struct! compose/deep [
		next [pointer]
	]
	_GVariantIter: GVariantIter: make struct! compose/deep [
		x [uint64 [16]]
	]
	_GVariantBuilder: GVariantBuilder: make struct! compose/deep [
		x [uint64 [16]]
	]
	_GVariantDict: GVariantDict: make struct! compose/deep [
		x [uint64 [16]]
	]
	_GCompletion: GCompletion: make struct! compose/deep [
		items [pointer]
		func [pointer]
		prefix [pointer]
		cache [pointer]
		strncmp_func [pointer]
	]
	_GTuples: GTuples: make struct! compose/deep [
		len [uint32]
	]
	_GThreadFunctions: GThreadFunctions: make struct! compose/deep [
		mutex_new [pointer]
		mutex_lock [pointer]
		mutex_trylock [pointer]
		mutex_unlock [pointer]
		mutex_free [pointer]
		cond_new [pointer]
		cond_signal [pointer]
		cond_broadcast [pointer]
		cond_wait [pointer]
		cond_timed_wait [pointer]
		cond_free [pointer]
		private_new [pointer]
		private_get [pointer]
		private_set [pointer]
		thread_create [pointer]
		thread_yield [pointer]
		thread_join [pointer]
		thread_exit [pointer]
		thread_set_priority [pointer]
		thread_self [pointer]
		thread_equal [pointer]
	]
	GStaticMutex: make struct! compose/deep [
		mutex [pointer]
	]
	_GStaticRecMutex: GStaticRecMutex: make struct! compose/deep [
		mutex [(GStaticMutex)]
		depth [uint32]
	]
	_GStaticRWLock: GStaticRWLock: make struct! compose/deep [
		mutex [(GStaticMutex)]
		read_cond [pointer]
		write_cond [pointer]
		read_counter [uint32]
		have_writer [int32]
		want_to_read [uint32]
		want_to_write [uint32]
	]
	_GStaticPrivate: GStaticPrivate: make struct! compose/deep [
		index [uint32]
	]
	_GValue: GValue: make struct! compose/deep [
		g_type [uint64]
	]
	_GTypeCValue: GTypeCValue: make struct! compose/deep [
		fake [uint8]
	]
	_GTypeClass: GTypeClass: make struct! compose/deep [
		g_type [uint64]
	]
	_GTypeInterface: GTypeInterface: make struct! compose/deep [
		g_type [uint64]
		g_instance_type [uint64]
	]
	_GTypeInstance: GTypeInstance: make struct! compose/deep [
		g_class [pointer]
	]
	_GTypeInfo: GTypeInfo: make struct! compose/deep [
		class_size [uint16]
		padding1 [uint8 [6]]
		base_init [pointer]
		base_finalize [pointer]
		class_init [pointer]
		class_finalize [pointer]
		class_data [pointer]
		instance_size [uint16]
		n_preallocs [uint16]
		padding8 [uint8 [4]]
		instance_init [pointer]
		value_table [pointer]
	]
	_GTypeFundamentalInfo: GTypeFundamentalInfo: make struct! compose/deep [
		type_flags [int32]
	]
	_GInterfaceInfo: GInterfaceInfo: make struct! compose/deep [
		interface_init [pointer]
		interface_finalize [pointer]
		interface_data [pointer]
	]
	_GTypeValueTable: GTypeValueTable: make struct! compose/deep [
		value_init [pointer]
		value_free [pointer]
		value_copy [pointer]
		value_peek_pointer [pointer]
		collect_format [pointer]
		collect_value [pointer]
		lcopy_format [pointer]
		lcopy_value [pointer]
	]
	_GTypeQuery: GTypeQuery: make struct! compose/deep [
		type [uint64]
		type_name [pointer]
		class_size [uint32]
		instance_size [uint32]
	]
	_GParamSpec: GParamSpec: make struct! compose/deep [
		g_type_instance [(GTypeInstance)]
		name [pointer]
		flags [int32]
		padding3 [uint8 [4]]
		value_type [uint64]
		owner_type [uint64]
		_nick [pointer]
		_blurb [pointer]
		qdata [pointer]
		ref_count [uint32]
		param_id [uint32]
	]
	_GParamSpecClass: GParamSpecClass: make struct! compose/deep [
		g_type_class [(GTypeClass)]
		value_type [uint64]
		finalize [pointer]
		value_set_default [pointer]
		value_validate [pointer]
		values_cmp [pointer]
		dummy [pointer [4]]
	]
	_GParameter: GParameter: make struct! compose/deep [
		name [pointer]
		value [(GValue)]
	]
	_GParamSpecTypeInfo: GParamSpecTypeInfo: make struct! compose/deep [
		instance_size [uint16]
		n_preallocs [uint16]
		padding2 [uint8 [4]]
		instance_init [pointer]
		value_type [uint64]
		finalize [pointer]
		value_set_default [pointer]
		value_validate [pointer]
		values_cmp [pointer]
	]
	_GClosure: GClosure: make struct! compose/deep [
		ref_count [uint32]
		;meta_marshal_nouse, merged with the previous field
		;n_guards, merged with the previous field
		;n_fnotifiers, merged with the previous field
		;n_inotifiers, merged with the previous field
		;in_inotify, merged with the previous field
		;floating, merged with the previous field
		;derivative_flag, merged with the previous field
		;in_marshal, merged with the previous field
		;is_invalid, merged with the previous field
		padding10 [uint8 [4]]
		marshal [pointer]
		data [pointer]
		notifiers [pointer]
	]
	_GClosureNotifyData: GClosureNotifyData: make struct! compose/deep [
		data [pointer]
		notify [pointer]
	]
	_GCClosure: GCClosure: make struct! compose/deep [
		closure [(GClosure)]
		callback [pointer]
	]
	_GSignalQuery: GSignalQuery: make struct! compose/deep [
		signal_id [uint32]
		padding1 [uint8 [4]]
		signal_name [pointer]
		itype [uint64]
		signal_flags [int32]
		padding4 [uint8 [4]]
		return_type [uint64]
		n_params [uint32]
		padding6 [uint8 [4]]
		param_types [pointer]
	]
	_GSignalInvocationHint: GSignalInvocationHint: make struct! compose/deep [
		signal_id [uint32]
		detail [uint32]
		run_type [int32]
	]
	_GObject: GObject: GInitiallyUnowned: make struct! compose/deep [
		g_type_instance [(GTypeInstance)]
		ref_count [uint32]
		padding2 [uint8 [4]]
		qdata [pointer]
	]
	_GObjectClass: GObjectClass: GInitiallyUnownedClass: make struct! compose/deep [
		g_type_class [(GTypeClass)]
		construct_properties [pointer]
		constructor [pointer]
		set_property [pointer]
		get_property [pointer]
		dispose [pointer]
		finalize [pointer]
		dispatch_properties_changed [pointer]
		notify [pointer]
		constructed [pointer]
		flags [uint64]
		pdummy [pointer [6]]
	]
	_GObjectConstructParam: GObjectConstructParam: make struct! compose/deep [
		pspec [pointer]
		value [pointer]
	]
	_GEnumClass: GEnumClass: make struct! compose/deep [
		g_type_class [(GTypeClass)]
		minimum [int32]
		maximum [int32]
		n_values [uint32]
		padding4 [uint8 [4]]
		values [pointer]
	]
	_GFlagsClass: GFlagsClass: make struct! compose/deep [
		g_type_class [(GTypeClass)]
		mask [uint32]
		n_values [uint32]
		values [pointer]
	]
	_GEnumValue: GEnumValue: make struct! compose/deep [
		value [int32]
		padding1 [uint8 [4]]
		value_name [pointer]
		value_nick [pointer]
	]
	_GFlagsValue: GFlagsValue: make struct! compose/deep [
		value [uint32]
		padding1 [uint8 [4]]
		value_name [pointer]
		value_nick [pointer]
	]
	_GParamSpecChar: GParamSpecChar: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [int8]
		maximum [int8]
		default_value [int8]
	]
	_GParamSpecUChar: GParamSpecUChar: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [uint8]
		maximum [uint8]
		default_value [uint8]
	]
	_GParamSpecBoolean: GParamSpecBoolean: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		default_value [int32]
	]
	_GParamSpecInt: GParamSpecInt: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [int32]
		maximum [int32]
		default_value [int32]
	]
	_GParamSpecUInt: GParamSpecUInt: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [uint32]
		maximum [uint32]
		default_value [uint32]
	]
	_GParamSpecLong: GParamSpecLong: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [int64]
		maximum [int64]
		default_value [int64]
	]
	_GParamSpecULong: GParamSpecULong: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [uint64]
		maximum [uint64]
		default_value [uint64]
	]
	_GParamSpecInt64: GParamSpecInt64: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [int64]
		maximum [int64]
		default_value [int64]
	]
	_GParamSpecUInt64: GParamSpecUInt64: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [uint64]
		maximum [uint64]
		default_value [uint64]
	]
	_GParamSpecUnichar: GParamSpecUnichar: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		default_value [uint32]
	]
	_GParamSpecEnum: GParamSpecEnum: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		enum_class [pointer]
		default_value [int32]
	]
	_GParamSpecFlags: GParamSpecFlags: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		flags_class [pointer]
		default_value [uint32]
	]
	_GParamSpecFloat: GParamSpecFloat: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [float]
		maximum [float]
		default_value [float]
		epsilon [float]
	]
	_GParamSpecDouble: GParamSpecDouble: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		minimum [double]
		maximum [double]
		default_value [double]
		epsilon [double]
	]
	_GParamSpecString: GParamSpecString: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		default_value [pointer]
		cset_first [pointer]
		cset_nth [pointer]
		substitutor [int8]
		null_fold_if_empty [uint32]
		;ensure_non_null, merged with the previous field
	]
	_GParamSpecParam: GParamSpecParam: make struct! compose/deep [
		parent_instance [(GParamSpec)]
	]
	_GParamSpecBoxed: GParamSpecBoxed: make struct! compose/deep [
		parent_instance [(GParamSpec)]
	]
	_GParamSpecPointer: GParamSpecPointer: make struct! compose/deep [
		parent_instance [(GParamSpec)]
	]
	_GParamSpecValueArray: GParamSpecValueArray: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		element_spec [pointer]
		fixed_n_elements [uint32]
	]
	_GParamSpecObject: GParamSpecObject: make struct! compose/deep [
		parent_instance [(GParamSpec)]
	]
	_GParamSpecOverride: GParamSpecOverride: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		overridden [pointer]
	]
	_GParamSpecGType: GParamSpecGType: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		is_a_type [uint64]
	]
	_GParamSpecVariant: GParamSpecVariant: make struct! compose/deep [
		parent_instance [(GParamSpec)]
		type [pointer]
		default_value [pointer]
		padding [pointer [4]]
	]
	_GTypeModule: GTypeModule: make struct! compose/deep [
		parent_instance [(GObject)]
		use_count [uint32]
		padding2 [uint8 [4]]
		type_infos [pointer]
		interface_infos [pointer]
		name [pointer]
	]
	_GTypeModuleClass: GTypeModuleClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		load [pointer]
		unload [pointer]
		reserved1 [pointer]
		reserved2 [pointer]
		reserved3 [pointer]
		reserved4 [pointer]
	]
	_GTypePluginClass: GTypePluginClass: make struct! compose/deep [
		base_iface [(GTypeInterface)]
		use_plugin [pointer]
		unuse_plugin [pointer]
		complete_type_info [pointer]
		complete_interface_info [pointer]
	]
	_GValueArray: GValueArray: make struct! compose/deep [
		n_values [uint32]
		padding1 [uint8 [4]]
		values [pointer]
		n_prealloced [uint32]
	]
	_GAppLaunchContext: GAppLaunchContext: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GInputStream: GInputStream: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFilterInputStream: GFilterInputStream: make struct! compose/deep [
		parent_instance [(GInputStream)]
		base_stream [pointer]
	]
	_GBufferedInputStream: GBufferedInputStream: make struct! compose/deep [
		parent_instance [(GFilterInputStream)]
		priv [pointer]
	]
	_GOutputStream: GOutputStream: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFilterOutputStream: GFilterOutputStream: make struct! compose/deep [
		parent_instance [(GOutputStream)]
		base_stream [pointer]
	]
	_GBufferedOutputStream: GBufferedOutputStream: make struct! compose/deep [
		parent_instance [(GFilterOutputStream)]
		priv [pointer]
	]
	_GCancellable: GCancellable: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GConverterInputStream: GConverterInputStream: make struct! compose/deep [
		parent_instance [(GFilterInputStream)]
		priv [pointer]
	]
	_GConverterOutputStream: GConverterOutputStream: make struct! compose/deep [
		parent_instance [(GFilterOutputStream)]
		priv [pointer]
	]
	_GDataInputStream: GDataInputStream: make struct! compose/deep [
		parent_instance [(GBufferedInputStream)]
		priv [pointer]
	]
	_GSimpleActionGroup: GSimpleActionGroup: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GApplication: GApplication: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GApplicationCommandLine: GApplicationCommandLine: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSettings: GSettings: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GPermission: GPermission: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GMenuModel: GMenuModel: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFileEnumerator: GFileEnumerator: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFileMonitor: GFileMonitor: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFileAttributeInfo: GFileAttributeInfo: make struct! compose/deep [
		name [pointer]
		type [int32]
		flags [int32]
	]
	_GFileAttributeInfoList: GFileAttributeInfoList: make struct! compose/deep [
		infos [pointer]
		n_infos [int32]
	]
	_GFileInputStream: GFileInputStream: make struct! compose/deep [
		parent_instance [(GInputStream)]
		priv [pointer]
	]
	_GFileOutputStream: GFileOutputStream: make struct! compose/deep [
		parent_instance [(GOutputStream)]
		priv [pointer]
	]
	_GIOStream: GIOStream: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GFileIOStream: GFileIOStream: make struct! compose/deep [
		parent_instance [(GIOStream)]
		priv [pointer]
	]
	_GInetAddress: GInetAddress: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GInetAddressMask: GInetAddressMask: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocketAddress: GSocketAddress: make struct! compose/deep [
		parent_instance [(GObject)]
	]
	_GInetSocketAddress: GInetSocketAddress: make struct! compose/deep [
		parent_instance [(GSocketAddress)]
		priv [pointer]
	]
	_GMemoryInputStream: GMemoryInputStream: make struct! compose/deep [
		parent_instance [(GInputStream)]
		priv [pointer]
	]
	_GMemoryOutputStream: GMemoryOutputStream: make struct! compose/deep [
		parent_instance [(GOutputStream)]
		priv [pointer]
	]
	_GMountOperation: GMountOperation: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GNetworkAddress: GNetworkAddress: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GNetworkService: GNetworkService: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GResolver: GResolver: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocket: GSocket: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocketControlMessage: GSocketControlMessage: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocketClient: GSocketClient: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocketConnection: GSocketConnection: make struct! compose/deep [
		parent_instance [(GIOStream)]
		priv [pointer]
	]
	_GSocketListener: GSocketListener: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSocketService: GSocketService: make struct! compose/deep [
		parent_instance [(GSocketListener)]
		priv [pointer]
	]
	_GSocketAddressEnumerator: GSocketAddressEnumerator: make struct! compose/deep [
		parent_instance [(GObject)]
	]
	_GTcpConnection: GTcpConnection: make struct! compose/deep [
		parent_instance [(GSocketConnection)]
		priv [pointer]
	]
	_GTcpWrapperConnection: GTcpWrapperConnection: make struct! compose/deep [
		parent_instance [(GTcpConnection)]
		priv [pointer]
	]
	_GThreadedSocketService: GThreadedSocketService: make struct! compose/deep [
		parent_instance [(GSocketService)]
		priv [pointer]
	]
	_GTlsCertificate: GTlsCertificate: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GTlsConnection: GTlsConnection: make struct! compose/deep [
		parent_instance [(GIOStream)]
		priv [pointer]
	]
	_GTlsDatabase: GTlsDatabase: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GTlsInteraction: GTlsInteraction: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GTlsPassword: GTlsPassword: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GVfs: GVfs: make struct! compose/deep [
		parent_instance [(GObject)]
	]
	_GProxyAddress: GProxyAddress: make struct! compose/deep [
		parent_instance [(GInetSocketAddress)]
		priv [pointer]
	]
	_GProxyAddressEnumerator: GProxyAddressEnumerator: make struct! compose/deep [
		parent_instance [(GSocketAddressEnumerator)]
		priv [pointer]
	]
	_GVolumeMonitor: GVolumeMonitor: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GInputVector: GInputVector: make struct! compose/deep [
		buffer [pointer]
		size [uint64]
	]
	_GOutputVector: GOutputVector: make struct! compose/deep [
		buffer [pointer]
		size [uint64]
	]
	_GDBusProxy: GDBusProxy: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GDBusErrorEntry: GDBusErrorEntry: make struct! compose/deep [
		error_code [int32]
		padding1 [uint8 [4]]
		dbus_error_name [pointer]
	]
	_GDBusInterfaceVTable: GDBusInterfaceVTable: make struct! compose/deep [
		method_call [pointer]
		get_property [pointer]
		set_property [pointer]
		padding [pointer [8]]
	]
	_GDBusSubtreeVTable: GDBusSubtreeVTable: make struct! compose/deep [
		enumerate [pointer]
		introspect [pointer]
		dispatch [pointer]
		padding [pointer [8]]
	]
	_GDBusAnnotationInfo: GDBusAnnotationInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		key [pointer]
		value [pointer]
		annotations [pointer]
	]
	_GDBusArgInfo: GDBusArgInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		name [pointer]
		signature [pointer]
		annotations [pointer]
	]
	_GDBusMethodInfo: GDBusMethodInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		name [pointer]
		in_args [pointer]
		out_args [pointer]
		annotations [pointer]
	]
	_GDBusSignalInfo: GDBusSignalInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		name [pointer]
		args [pointer]
		annotations [pointer]
	]
	_GDBusPropertyInfo: GDBusPropertyInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		name [pointer]
		signature [pointer]
		flags [int32]
		padding4 [uint8 [4]]
		annotations [pointer]
	]
	_GDBusInterfaceInfo: GDBusInterfaceInfo: GDBusSubtreeIntrospectFunc: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		name [pointer]
		methods [pointer]
		signals [pointer]
		properties [pointer]
		annotations [pointer]
	]
	_GDBusNodeInfo: GDBusNodeInfo: make struct! compose/deep [
		ref_count [int32]
		padding1 [uint8 [4]]
		path [pointer]
		interfaces [pointer]
		nodes [pointer]
		annotations [pointer]
	]
	_GDBusInterfaceSkeleton: GDBusInterfaceSkeleton: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GDBusObjectSkeleton: GDBusObjectSkeleton: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GDBusObjectProxy: GDBusObjectProxy: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GDBusObjectManagerClient: GDBusObjectManagerClient: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GDBusObjectManagerServer: GDBusObjectManagerServer: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GActionInterface: GActionInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		get_name [pointer]
		get_parameter_type [pointer]
		get_state_type [pointer]
		get_state_hint [pointer]
		get_enabled [pointer]
		get_state [pointer]
		change_state [pointer]
		activate [pointer]
	]
	_GActionGroupInterface: GActionGroupInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		has_action [pointer]
		list_actions [pointer]
		get_action_enabled [pointer]
		get_action_parameter_type [pointer]
		get_action_state_type [pointer]
		get_action_state_hint [pointer]
		get_action_state [pointer]
		change_action_state [pointer]
		activate_action [pointer]
		action_added [pointer]
		action_removed [pointer]
		action_enabled_changed [pointer]
		action_state_changed [pointer]
		query_action [pointer]
	]
	_GActionMapInterface: GActionMapInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		lookup_action [pointer]
		add_action [pointer]
		remove_action [pointer]
	]
	_GActionEntry: GActionEntry: make struct! compose/deep [
		name [pointer]
		activate [pointer]
		parameter_type [pointer]
		state [pointer]
		change_state [pointer]
		padding [uint64 [3]]
	]
	_GAppLaunchContextClass: GAppLaunchContextClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_display [pointer]
		get_startup_notify_id [pointer]
		launch_failed [pointer]
		launched [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
	]
	_GAppInfoIface: GAppInfoIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		dup [pointer]
		equal [pointer]
		get_id [pointer]
		get_name [pointer]
		get_description [pointer]
		get_executable [pointer]
		get_icon [pointer]
		launch [pointer]
		supports_uris [pointer]
		supports_files [pointer]
		launch_uris [pointer]
		should_show [pointer]
		set_as_default_for_type [pointer]
		set_as_default_for_extension [pointer]
		add_supports_type [pointer]
		can_remove_supports_type [pointer]
		remove_supports_type [pointer]
		can_delete [pointer]
		do_delete [pointer]
		get_commandline [pointer]
		get_display_name [pointer]
		set_as_last_used_for_type [pointer]
		get_supported_types [pointer]
	]
	_GApplicationClass: GApplicationClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		startup [pointer]
		activate [pointer]
		open [pointer]
		command_line [pointer]
		local_command_line [pointer]
		before_emit [pointer]
		after_emit [pointer]
		add_platform_data [pointer]
		quit_mainloop [pointer]
		run_mainloop [pointer]
		shutdown [pointer]
		dbus_register [pointer]
		dbus_unregister [pointer]
		handle_local_options [pointer]
		padding [pointer [8]]
	]
	_GApplicationCommandLineClass: GApplicationCommandLineClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		print_literal [pointer]
		printerr_literal [pointer]
		get_stdin [pointer]
		padding [pointer [11]]
	]
	_GInitableIface: GInitableIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		init [pointer]
	]
	_GAsyncInitableIface: GAsyncInitableIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		init_async [pointer]
		init_finish [pointer]
	]
	_GAsyncResultIface: GAsyncResultIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		get_user_data [pointer]
		get_source_object [pointer]
		is_tagged [pointer]
	]
	_GInputStreamClass: GInputStreamClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		read_fn [pointer]
		skip [pointer]
		close_fn [pointer]
		read_async [pointer]
		read_finish [pointer]
		skip_async [pointer]
		skip_finish [pointer]
		close_async [pointer]
		close_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GFilterInputStreamClass: GFilterInputStreamClass: make struct! compose/deep [
		parent_class [(GInputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
	]
	_GBufferedInputStreamClass: GBufferedInputStreamClass: make struct! compose/deep [
		parent_class [(GFilterInputStreamClass)]
		fill [pointer]
		fill_async [pointer]
		fill_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GOutputStreamClass: GOutputStreamClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		write_fn [pointer]
		splice [pointer]
		flush [pointer]
		close_fn [pointer]
		write_async [pointer]
		write_finish [pointer]
		splice_async [pointer]
		splice_finish [pointer]
		flush_async [pointer]
		flush_finish [pointer]
		close_async [pointer]
		close_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
		_g_reserved8 [pointer]
	]
	_GFilterOutputStreamClass: GFilterOutputStreamClass: make struct! compose/deep [
		parent_class [(GOutputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
	]
	_GBufferedOutputStreamClass: GBufferedOutputStreamClass: make struct! compose/deep [
		parent_class [(GFilterOutputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
	]
	_GCancellableClass: GCancellableClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		cancelled [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GConverterIface: GConverterIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		convert [pointer]
		reset [pointer]
	]
	_GCharsetConverterClass: GCharsetConverterClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GConverterInputStreamClass: GConverterInputStreamClass: make struct! compose/deep [
		parent_class [(GFilterInputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GConverterOutputStreamClass: GConverterOutputStreamClass: make struct! compose/deep [
		parent_class [(GFilterOutputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GDataInputStreamClass: GDataInputStreamClass: make struct! compose/deep [
		parent_class [(GBufferedInputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GDataOutputStream: GDataOutputStream: make struct! compose/deep [
		parent_instance [(GFilterOutputStream)]
		priv [pointer]
	]
	_GDataOutputStreamClass: GDataOutputStreamClass: make struct! compose/deep [
		parent_class [(GFilterOutputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GDBusProxyClass: GDBusProxyClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		g_properties_changed [pointer]
		g_signal [pointer]
		padding [pointer [32]]
	]
	_GDriveIface: GDriveIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		changed [pointer]
		disconnected [pointer]
		eject_button [pointer]
		get_name [pointer]
		get_icon [pointer]
		has_volumes [pointer]
		get_volumes [pointer]
		is_media_removable [pointer]
		has_media [pointer]
		is_media_check_automatic [pointer]
		can_eject [pointer]
		can_poll_for_media [pointer]
		eject [pointer]
		eject_finish [pointer]
		poll_for_media [pointer]
		poll_for_media_finish [pointer]
		get_identifier [pointer]
		enumerate_identifiers [pointer]
		get_start_stop_type [pointer]
		can_start [pointer]
		can_start_degraded [pointer]
		start [pointer]
		start_finish [pointer]
		can_stop [pointer]
		stop [pointer]
		stop_finish [pointer]
		stop_button [pointer]
		eject_with_operation [pointer]
		eject_with_operation_finish [pointer]
		get_sort_key [pointer]
		get_symbolic_icon [pointer]
	]
	_GIconIface: GIconIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		hash [pointer]
		equal [pointer]
		to_tokens [pointer]
		from_tokens [pointer]
		serialize [pointer]
	]
	_GEmblemedIcon: GEmblemedIcon: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GEmblemedIconClass: GEmblemedIconClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GFileEnumeratorClass: GFileEnumeratorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		next_file [pointer]
		close_fn [pointer]
		next_files_async [pointer]
		next_files_finish [pointer]
		close_async [pointer]
		close_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
	]
	_GFileIface: GFileIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		dup [pointer]
		hash [pointer]
		equal [pointer]
		is_native [pointer]
		has_uri_scheme [pointer]
		get_uri_scheme [pointer]
		get_basename [pointer]
		get_path [pointer]
		get_uri [pointer]
		get_parse_name [pointer]
		get_parent [pointer]
		prefix_matches [pointer]
		get_relative_path [pointer]
		resolve_relative_path [pointer]
		get_child_for_display_name [pointer]
		enumerate_children [pointer]
		enumerate_children_async [pointer]
		enumerate_children_finish [pointer]
		query_info [pointer]
		query_info_async [pointer]
		query_info_finish [pointer]
		query_filesystem_info [pointer]
		query_filesystem_info_async [pointer]
		query_filesystem_info_finish [pointer]
		find_enclosing_mount [pointer]
		find_enclosing_mount_async [pointer]
		find_enclosing_mount_finish [pointer]
		set_display_name [pointer]
		set_display_name_async [pointer]
		set_display_name_finish [pointer]
		query_settable_attributes [pointer]
		_query_settable_attributes_async [pointer]
		_query_settable_attributes_finish [pointer]
		query_writable_namespaces [pointer]
		_query_writable_namespaces_async [pointer]
		_query_writable_namespaces_finish [pointer]
		set_attribute [pointer]
		set_attributes_from_info [pointer]
		set_attributes_async [pointer]
		set_attributes_finish [pointer]
		read_fn [pointer]
		read_async [pointer]
		read_finish [pointer]
		append_to [pointer]
		append_to_async [pointer]
		append_to_finish [pointer]
		create [pointer]
		create_async [pointer]
		create_finish [pointer]
		replace [pointer]
		replace_async [pointer]
		replace_finish [pointer]
		delete_file [pointer]
		delete_file_async [pointer]
		delete_file_finish [pointer]
		trash [pointer]
		trash_async [pointer]
		trash_finish [pointer]
		make_directory [pointer]
		make_directory_async [pointer]
		make_directory_finish [pointer]
		make_symbolic_link [pointer]
		_make_symbolic_link_async [pointer]
		_make_symbolic_link_finish [pointer]
		copy [pointer]
		copy_async [pointer]
		copy_finish [pointer]
		move [pointer]
		_move_async [pointer]
		_move_finish [pointer]
		mount_mountable [pointer]
		mount_mountable_finish [pointer]
		unmount_mountable [pointer]
		unmount_mountable_finish [pointer]
		eject_mountable [pointer]
		eject_mountable_finish [pointer]
		mount_enclosing_volume [pointer]
		mount_enclosing_volume_finish [pointer]
		monitor_dir [pointer]
		monitor_file [pointer]
		open_readwrite [pointer]
		open_readwrite_async [pointer]
		open_readwrite_finish [pointer]
		create_readwrite [pointer]
		create_readwrite_async [pointer]
		create_readwrite_finish [pointer]
		replace_readwrite [pointer]
		replace_readwrite_async [pointer]
		replace_readwrite_finish [pointer]
		start_mountable [pointer]
		start_mountable_finish [pointer]
		stop_mountable [pointer]
		stop_mountable_finish [pointer]
		supports_thread_contexts [int32]
		padding95 [uint8 [4]]
		unmount_mountable_with_operation [pointer]
		unmount_mountable_with_operation_finish [pointer]
		eject_mountable_with_operation [pointer]
		eject_mountable_with_operation_finish [pointer]
		poll_mountable [pointer]
		poll_mountable_finish [pointer]
		measure_disk_usage [pointer]
		measure_disk_usage_async [pointer]
		measure_disk_usage_finish [pointer]
	]
	_GFileInputStreamClass: GFileInputStreamClass: make struct! compose/deep [
		parent_class [(GInputStreamClass)]
		tell [pointer]
		can_seek [pointer]
		seek [pointer]
		query_info [pointer]
		query_info_async [pointer]
		query_info_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GIOStreamClass: GIOStreamClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_input_stream [pointer]
		get_output_stream [pointer]
		close_fn [pointer]
		close_async [pointer]
		close_finish [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
		_g_reserved8 [pointer]
		_g_reserved9 [pointer]
		_g_reserved10 [pointer]
	]
	_GFileIOStreamClass: GFileIOStreamClass: make struct! compose/deep [
		parent_class [(GIOStreamClass)]
		tell [pointer]
		can_seek [pointer]
		seek [pointer]
		can_truncate [pointer]
		truncate_fn [pointer]
		query_info [pointer]
		query_info_async [pointer]
		query_info_finish [pointer]
		get_etag [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GFileMonitorClass: GFileMonitorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		changed [pointer]
		cancel [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GFilenameCompleterClass: GFilenameCompleterClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		got_completion_data [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
	]
	_GFileOutputStreamClass: GFileOutputStreamClass: make struct! compose/deep [
		parent_class [(GOutputStreamClass)]
		tell [pointer]
		can_seek [pointer]
		seek [pointer]
		can_truncate [pointer]
		truncate_fn [pointer]
		query_info [pointer]
		query_info_async [pointer]
		query_info_finish [pointer]
		get_etag [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GInetAddressClass: GInetAddressClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		to_string [pointer]
		to_bytes [pointer]
	]
	_GInetAddressMaskClass: GInetAddressMaskClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GSocketAddressClass: GSocketAddressClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_family [pointer]
		get_native_size [pointer]
		to_native [pointer]
	]
	_GInetSocketAddressClass: GInetSocketAddressClass: make struct! compose/deep [
		parent_class [(GSocketAddressClass)]
	]
	_GLoadableIconIface: GLoadableIconIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		load [pointer]
		load_async [pointer]
		load_finish [pointer]
	]
	_GMemoryInputStreamClass: GMemoryInputStreamClass: make struct! compose/deep [
		parent_class [(GInputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GMemoryOutputStreamClass: GMemoryOutputStreamClass: make struct! compose/deep [
		parent_class [(GOutputStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GMountIface: GMountIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		changed [pointer]
		unmounted [pointer]
		get_root [pointer]
		get_name [pointer]
		get_icon [pointer]
		get_uuid [pointer]
		get_volume [pointer]
		get_drive [pointer]
		can_unmount [pointer]
		can_eject [pointer]
		unmount [pointer]
		unmount_finish [pointer]
		eject [pointer]
		eject_finish [pointer]
		remount [pointer]
		remount_finish [pointer]
		guess_content_type [pointer]
		guess_content_type_finish [pointer]
		guess_content_type_sync [pointer]
		pre_unmount [pointer]
		unmount_with_operation [pointer]
		unmount_with_operation_finish [pointer]
		eject_with_operation [pointer]
		eject_with_operation_finish [pointer]
		get_default_location [pointer]
		get_sort_key [pointer]
		get_symbolic_icon [pointer]
	]
	_GMountOperationClass: GMountOperationClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		ask_password [pointer]
		ask_question [pointer]
		reply [pointer]
		aborted [pointer]
		show_processes [pointer]
		show_unmount_progress [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
		_g_reserved8 [pointer]
		_g_reserved9 [pointer]
	]
	_GVolumeMonitorClass: GVolumeMonitorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		volume_added [pointer]
		volume_removed [pointer]
		volume_changed [pointer]
		mount_added [pointer]
		mount_removed [pointer]
		mount_pre_unmount [pointer]
		mount_changed [pointer]
		drive_connected [pointer]
		drive_disconnected [pointer]
		drive_changed [pointer]
		is_supported [pointer]
		get_connected_drives [pointer]
		get_volumes [pointer]
		get_mounts [pointer]
		get_volume_for_uuid [pointer]
		get_mount_for_uuid [pointer]
		adopt_orphan_mount [pointer]
		drive_eject_button [pointer]
		drive_stop_button [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GNativeVolumeMonitor: GNativeVolumeMonitor: make struct! compose/deep [
		parent_instance [(GVolumeMonitor)]
	]
	_GNativeVolumeMonitorClass: GNativeVolumeMonitorClass: make struct! compose/deep [
		parent_class [(GVolumeMonitorClass)]
		get_mount_for_mount_path [pointer]
	]
	_GNetworkAddressClass: GNetworkAddressClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GNetworkMonitorInterface: GNetworkMonitorInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		network_changed [pointer]
		can_reach [pointer]
		can_reach_async [pointer]
		can_reach_finish [pointer]
	]
	_GNetworkServiceClass: GNetworkServiceClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GPermissionClass: GPermissionClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		acquire [pointer]
		acquire_async [pointer]
		acquire_finish [pointer]
		release [pointer]
		release_async [pointer]
		release_finish [pointer]
		reserved [pointer [16]]
	]
	_GPollableInputStreamInterface: GPollableInputStreamInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		can_poll [pointer]
		is_readable [pointer]
		create_source [pointer]
		read_nonblocking [pointer]
	]
	_GPollableOutputStreamInterface: GPollableOutputStreamInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		can_poll [pointer]
		is_writable [pointer]
		create_source [pointer]
		write_nonblocking [pointer]
	]
	_GProxyInterface: GProxyInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		connect [pointer]
		connect_async [pointer]
		connect_finish [pointer]
		supports_hostname [pointer]
	]
	_GProxyAddressClass: GProxyAddressClass: make struct! compose/deep [
		parent_class [(GInetSocketAddressClass)]
	]
	_GSocketAddressEnumeratorClass: GSocketAddressEnumeratorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		next [pointer]
		next_async [pointer]
		next_finish [pointer]
	]
	_GProxyAddressEnumeratorClass: GProxyAddressEnumeratorClass: make struct! compose/deep [
		parent_class [(GSocketAddressEnumeratorClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
	]
	_GProxyResolverInterface: GProxyResolverInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		is_supported [pointer]
		lookup [pointer]
		lookup_async [pointer]
		lookup_finish [pointer]
	]
	_GResolverClass: GResolverClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		reload [pointer]
		lookup_by_name [pointer]
		lookup_by_name_async [pointer]
		lookup_by_name_finish [pointer]
		lookup_by_address [pointer]
		lookup_by_address_async [pointer]
		lookup_by_address_finish [pointer]
		lookup_service [pointer]
		lookup_service_async [pointer]
		lookup_service_finish [pointer]
		lookup_records [pointer]
		lookup_records_async [pointer]
		lookup_records_finish [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GStaticResource: GStaticResource: make struct! compose/deep [
		data [pointer]
		data_len [uint64]
		resource [pointer]
		next [pointer]
		padding [pointer]
	]
	_GSeekableIface: GSeekableIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		tell [pointer]
		can_seek [pointer]
		seek [pointer]
		can_truncate [pointer]
		truncate_fn [pointer]
	]
	_GSettingsClass: GSettingsClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		writable_changed [pointer]
		changed [pointer]
		writable_change_event [pointer]
		change_event [pointer]
		padding [pointer [20]]
	]
	_GSimpleActionGroupClass: GSimpleActionGroupClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		padding [pointer [12]]
	]
	_GSocketClientClass: GSocketClientClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		event [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
	]
	_GSocketConnectableIface: GSocketConnectableIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		enumerate [pointer]
		proxy_enumerate [pointer]
	]
	_GSocketClass: GSocketClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
		_g_reserved7 [pointer]
		_g_reserved8 [pointer]
		_g_reserved9 [pointer]
		_g_reserved10 [pointer]
	]
	_GSocketConnectionClass: GSocketConnectionClass: make struct! compose/deep [
		parent_class [(GIOStreamClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GSocketControlMessageClass: GSocketControlMessageClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_size [pointer]
		get_level [pointer]
		get_type [pointer]
		serialize [pointer]
		deserialize [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GSocketListenerClass: GSocketListenerClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		changed [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GSocketServiceClass: GSocketServiceClass: make struct! compose/deep [
		parent_class [(GSocketListenerClass)]
		incoming [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GSimpleProxyResolver: GSimpleProxyResolver: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GSimpleProxyResolverClass: GSimpleProxyResolverClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GTcpConnectionClass: GTcpConnectionClass: make struct! compose/deep [
		parent_class [(GSocketConnectionClass)]
	]
	_GTcpWrapperConnectionClass: GTcpWrapperConnectionClass: make struct! compose/deep [
		parent_class [(GTcpConnectionClass)]
	]
	_GThreadedSocketServiceClass: GThreadedSocketServiceClass: make struct! compose/deep [
		parent_class [(GSocketServiceClass)]
		run [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
	]
	_GTlsBackendInterface: GTlsBackendInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		supports_tls [pointer]
		get_certificate_type [pointer]
		get_client_connection_type [pointer]
		get_server_connection_type [pointer]
		get_file_database_type [pointer]
		get_default_database [pointer]
	]
	_GTlsCertificateClass: GTlsCertificateClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		verify [pointer]
		padding [pointer [8]]
	]
	_GTlsConnectionClass: GTlsConnectionClass: make struct! compose/deep [
		parent_class [(GIOStreamClass)]
		accept_certificate [pointer]
		handshake [pointer]
		handshake_async [pointer]
		handshake_finish [pointer]
		padding [pointer [8]]
	]
	_GTlsClientConnectionInterface: GTlsClientConnectionInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
	]
	_GTlsDatabaseClass: GTlsDatabaseClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		verify_chain [pointer]
		verify_chain_async [pointer]
		verify_chain_finish [pointer]
		create_certificate_handle [pointer]
		lookup_certificate_for_handle [pointer]
		lookup_certificate_for_handle_async [pointer]
		lookup_certificate_for_handle_finish [pointer]
		lookup_certificate_issuer [pointer]
		lookup_certificate_issuer_async [pointer]
		lookup_certificate_issuer_finish [pointer]
		lookup_certificates_issued_by [pointer]
		lookup_certificates_issued_by_async [pointer]
		lookup_certificates_issued_by_finish [pointer]
		padding [pointer [16]]
	]
	_GTlsFileDatabaseInterface: GTlsFileDatabaseInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		padding [pointer [8]]
	]
	_GTlsInteractionClass: GTlsInteractionClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		ask_password [pointer]
		ask_password_async [pointer]
		ask_password_finish [pointer]
		request_certificate [pointer]
		request_certificate_async [pointer]
		request_certificate_finish [pointer]
		padding [pointer [21]]
	]
	_GTlsServerConnectionInterface: GTlsServerConnectionInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
	]
	_GTlsPasswordClass: GTlsPasswordClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_value [pointer]
		set_value [pointer]
		get_default_warning [pointer]
		padding [pointer [4]]
	]
	_GVfsClass: GVfsClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		is_active [pointer]
		get_file_for_path [pointer]
		get_file_for_uri [pointer]
		get_supported_uri_schemes [pointer]
		parse_name [pointer]
		local_file_add_info [pointer]
		add_writable_namespaces [pointer]
		local_file_set_attributes [pointer]
		local_file_removed [pointer]
		local_file_moved [pointer]
		deserialize_icon [pointer]
		_g_reserved1 [pointer]
		_g_reserved2 [pointer]
		_g_reserved3 [pointer]
		_g_reserved4 [pointer]
		_g_reserved5 [pointer]
		_g_reserved6 [pointer]
	]
	_GVolumeIface: GVolumeIface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		changed [pointer]
		removed [pointer]
		get_name [pointer]
		get_icon [pointer]
		get_uuid [pointer]
		get_drive [pointer]
		get_mount [pointer]
		can_mount [pointer]
		can_eject [pointer]
		mount_fn [pointer]
		mount_finish [pointer]
		eject [pointer]
		eject_finish [pointer]
		get_identifier [pointer]
		enumerate_identifiers [pointer]
		should_automount [pointer]
		get_activation_root [pointer]
		eject_with_operation [pointer]
		eject_with_operation_finish [pointer]
		get_sort_key [pointer]
		get_symbolic_icon [pointer]
	]
	_GZlibCompressorClass: GZlibCompressorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GZlibDecompressorClass: GZlibDecompressorClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
	]
	_GDBusInterfaceIface: GDBusInterfaceIface: make struct! compose/deep [
		parent_iface [(GTypeInterface)]
		get_info [pointer]
		get_object [pointer]
		set_object [pointer]
		dup_object [pointer]
	]
	_GDBusInterfaceSkeletonClass: GDBusInterfaceSkeletonClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_info [pointer]
		get_vtable [pointer]
		get_properties [pointer]
		flush [pointer]
		vfunc_padding [pointer [8]]
		g_authorize_method [pointer]
		signal_padding [pointer [8]]
	]
	_GDBusObjectIface: GDBusObjectIface: make struct! compose/deep [
		parent_iface [(GTypeInterface)]
		get_object_path [pointer]
		get_interfaces [pointer]
		get_interface [pointer]
		interface_added [pointer]
		interface_removed [pointer]
	]
	_GDBusObjectSkeletonClass: GDBusObjectSkeletonClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		authorize_method [pointer]
		padding [pointer [8]]
	]
	_GDBusObjectProxyClass: GDBusObjectProxyClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		padding [pointer [8]]
	]
	_GDBusObjectManagerIface: GDBusObjectManagerIface: make struct! compose/deep [
		parent_iface [(GTypeInterface)]
		get_object_path [pointer]
		get_objects [pointer]
		get_object [pointer]
		get_interface [pointer]
		object_added [pointer]
		object_removed [pointer]
		interface_added [pointer]
		interface_removed [pointer]
	]
	_GDBusObjectManagerClientClass: GDBusObjectManagerClientClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		interface_proxy_signal [pointer]
		interface_proxy_properties_changed [pointer]
		padding [pointer [8]]
	]
	_GDBusObjectManagerServerClass: GDBusObjectManagerServerClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		padding [pointer [8]]
	]
	_GRemoteActionGroupInterface: GRemoteActionGroupInterface: make struct! compose/deep [
		g_iface [(GTypeInterface)]
		activate_action_full [pointer]
		change_action_state_full [pointer]
	]
	_GMenuModelClass: GMenuModelClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		is_mutable [pointer]
		get_n_items [pointer]
		get_item_attributes [pointer]
		iterate_item_attributes [pointer]
		get_item_attribute_value [pointer]
		get_item_links [pointer]
		iterate_item_links [pointer]
		get_item_link [pointer]
	]
	_GMenuAttributeIterClass: GMenuAttributeIterClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_next [pointer]
	]
	_GMenuAttributeIter: GMenuAttributeIter: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	_GMenuLinkIterClass: GMenuLinkIterClass: make struct! compose/deep [
		parent_class [(GObjectClass)]
		get_next [pointer]
	]
	_GMenuLinkIter: GMenuLinkIter: make struct! compose/deep [
		parent_instance [(GObject)]
		priv [pointer]
	]
	glib: make library! %libglib-2.0.so
	gobject: make library! %libgobject-2.0.so
	gmodule: make library! %libgmodule-2.0.so
	gio: make library! %libgio-2.0.so
	array_new: make routine! compose/deep [[
		zero_terminated [int32]
		clear_ [int32]
		element_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_new"]

	array_sized_new: make routine! compose/deep [[
		zero_terminated [int32]
		clear_ [int32]
		element_size [uint32]
		reserved_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_sized_new"]

	array_free: make routine! compose/deep [[
		array [pointer]
		free_segment [int32]
		return: [pointer]
		abi: default
	] (glib) "g_array_free"]

	array_ref: make routine! compose/deep [[
		array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_array_ref"]

	array_unref: make routine! compose/deep [[
		array [pointer]
		return: [void]
		abi: default
	] (glib) "g_array_unref"]

	array_get_element_size: make routine! compose/deep [[
		array [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_array_get_element_size"]

	array_append_vals: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		len [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_append_vals"]

	array_prepend_vals: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		len [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_prepend_vals"]

	array_insert_vals: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		data [pointer]
		len [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_insert_vals"]

	array_set_size: make routine! compose/deep [[
		array [pointer]
		length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_set_size"]

	array_remove_index: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_remove_index"]

	array_remove_index_fast: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_remove_index_fast"]

	array_remove_range: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_array_remove_range"]

	array_sort: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_array_sort"]

	array_sort_with_data: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_array_sort_with_data"]

	array_set_clear_func: make routine! compose/deep [[
		array [pointer]
		clear_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_array_set_clear_func"]

	ptr_array_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_new"]

	ptr_array_new_with_free_func: make routine! compose/deep [[
		element_free_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_new_with_free_func"]

	ptr_array_sized_new: make routine! compose/deep [[
		reserved_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_sized_new"]

	ptr_array_new_full: make routine! compose/deep [[
		reserved_size [uint32]
		element_free_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_new_full"]

	ptr_array_free: make routine! compose/deep [[
		array [pointer]
		free_seg [int32]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_free"]

	ptr_array_ref: make routine! compose/deep [[
		array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_ref"]

	ptr_array_unref: make routine! compose/deep [[
		array [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_unref"]

	ptr_array_set_free_func: make routine! compose/deep [[
		array [pointer]
		element_free_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_set_free_func"]

	ptr_array_set_size: make routine! compose/deep [[
		array [pointer]
		length [int32]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_set_size"]

	ptr_array_remove_index: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_remove_index"]

	ptr_array_remove_index_fast: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_remove_index_fast"]

	ptr_array_remove: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_ptr_array_remove"]

	ptr_array_remove_fast: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_ptr_array_remove_fast"]

	ptr_array_remove_range: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_ptr_array_remove_range"]

	ptr_array_add: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_add"]

	ptr_array_insert: make routine! compose/deep [[
		array [pointer]
		index_ [int32]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_insert"]

	ptr_array_sort: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_sort"]

	ptr_array_sort_with_data: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_sort_with_data"]

	ptr_array_foreach: make routine! compose/deep [[
		array [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_ptr_array_foreach"]

	byte_array_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_new"]

	byte_array_new_take: make routine! compose/deep [[
		data [pointer]
		len [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_new_take"]

	byte_array_sized_new: make routine! compose/deep [[
		reserved_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_sized_new"]

	byte_array_free: make routine! compose/deep [[
		array [pointer]
		free_segment [int32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_free"]

	byte_array_free_to_bytes: make routine! compose/deep [[
		array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_free_to_bytes"]

	byte_array_ref: make routine! compose/deep [[
		array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_ref"]

	byte_array_unref: make routine! compose/deep [[
		array [pointer]
		return: [void]
		abi: default
	] (glib) "g_byte_array_unref"]

	byte_array_append: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		len [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_append"]

	byte_array_prepend: make routine! compose/deep [[
		array [pointer]
		data [pointer]
		len [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_prepend"]

	byte_array_set_size: make routine! compose/deep [[
		array [pointer]
		length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_set_size"]

	byte_array_remove_index: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_remove_index"]

	byte_array_remove_index_fast: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_remove_index_fast"]

	byte_array_remove_range: make routine! compose/deep [[
		array [pointer]
		index_ [uint32]
		length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_byte_array_remove_range"]

	byte_array_sort: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_byte_array_sort"]

	byte_array_sort_with_data: make routine! compose/deep [[
		array [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_byte_array_sort_with_data"]

	atomic_int_get: make routine! compose/deep [[
		atomic [pointer]
		return: [int32]
		abi: default
	] (glib) "g_atomic_int_get"]

	atomic_int_set: make routine! compose/deep [[
		atomic [pointer]
		newval [int32]
		return: [void]
		abi: default
	] (glib) "g_atomic_int_set"]

	atomic_int_inc: make routine! compose/deep [[
		atomic [pointer]
		return: [void]
		abi: default
	] (glib) "g_atomic_int_inc"]

	atomic_int_dec_and_test: make routine! compose/deep [[
		atomic [pointer]
		return: [int32]
		abi: default
	] (glib) "g_atomic_int_dec_and_test"]

	atomic_int_compare_and_exchange: make routine! compose/deep [[
		atomic [pointer]
		oldval [int32]
		newval [int32]
		return: [int32]
		abi: default
	] (glib) "g_atomic_int_compare_and_exchange"]

	atomic_int_add: make routine! compose/deep [[
		atomic [pointer]
		val [int32]
		return: [int32]
		abi: default
	] (glib) "g_atomic_int_add"]

	atomic_int_and: make routine! compose/deep [[
		atomic [pointer]
		val [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_atomic_int_and"]

	atomic_int_or: make routine! compose/deep [[
		atomic [pointer]
		val [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_atomic_int_or"]

	atomic_int_xor: make routine! compose/deep [[
		atomic [pointer]
		val [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_atomic_int_xor"]

	atomic_pointer_get: make routine! compose/deep [[
		atomic [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_atomic_pointer_get"]

	atomic_pointer_set: make routine! compose/deep [[
		atomic [pointer]
		newval [pointer]
		return: [void]
		abi: default
	] (glib) "g_atomic_pointer_set"]

	atomic_pointer_compare_and_exchange: make routine! compose/deep [[
		atomic [pointer]
		oldval [pointer]
		newval [pointer]
		return: [int32]
		abi: default
	] (glib) "g_atomic_pointer_compare_and_exchange"]

	atomic_pointer_add: make routine! compose/deep [[
		atomic [pointer]
		val [int64]
		return: [int64]
		abi: default
	] (glib) "g_atomic_pointer_add"]

	atomic_pointer_and: make routine! compose/deep [[
		atomic [pointer]
		val [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_atomic_pointer_and"]

	atomic_pointer_or: make routine! compose/deep [[
		atomic [pointer]
		val [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_atomic_pointer_or"]

	atomic_pointer_xor: make routine! compose/deep [[
		atomic [pointer]
		val [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_atomic_pointer_xor"]

	quark_try_string: make routine! compose/deep [[
		string [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_quark_try_string"]

	quark_from_static_string: make routine! compose/deep [[
		string [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_quark_from_static_string"]

	quark_from_string: make routine! compose/deep [[
		string [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_quark_from_string"]

	quark_to_string: make routine! compose/deep [[
		quark [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_quark_to_string"]

	intern_string: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_intern_string"]

	intern_static_string: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_intern_static_string"]

	error_new: make routine! compose/deep [[
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_error_new"]

	error_new_literal: make routine! compose/deep [[
		domain [uint32]
		code [int32]
		message [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_error_new_literal"]

	error_new_valist: make routine! compose/deep [[
		domain [uint32]
		code [int32]
		format [pointer]
		args [int32]
		return: [pointer]
		abi: default
	] (glib) "g_error_new_valist"]

	error_free: make routine! compose/deep [[
		error [pointer]
		return: [void]
		abi: default
	] (glib) "g_error_free"]

	error_copy: make routine! compose/deep [[
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_error_copy"]

	error_matches: make routine! compose/deep [[
		error [pointer]
		domain [uint32]
		code [int32]
		return: [int32]
		abi: default
	] (glib) "g_error_matches"]

	set_error: make routine! compose/deep [[
		err [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_set_error"]

	set_error_literal: make routine! compose/deep [[
		err [pointer]
		domain [uint32]
		code [int32]
		message [pointer]
		return: [void]
		abi: default
	] (glib) "g_set_error_literal"]

	propagate_error: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		return: [void]
		abi: default
	] (glib) "g_propagate_error"]

	clear_error: make routine! compose/deep [[
		err [pointer]
		return: [void]
		abi: default
	] (glib) "g_clear_error"]

	prefix_error: make routine! compose/deep [[
		err [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_prefix_error"]

	propagate_prefixed_error: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_propagate_prefixed_error"]

	thread_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_thread_error_quark"]

	thread_ref: make routine! compose/deep [[
		thread [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_thread_ref"]

	thread_unref: make routine! compose/deep [[
		thread [pointer]
		return: [void]
		abi: default
	] (glib) "g_thread_unref"]

	thread_new: make routine! compose/deep [[
		name [pointer]
		func [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_thread_new"]

	thread_try_new: make routine! compose/deep [[
		name [pointer]
		func [pointer]
		data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_thread_try_new"]

	thread_self: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_thread_self"]

	thread_exit: make routine! compose/deep [[
		retval [pointer]
		return: [void]
		abi: default
	] (glib) "g_thread_exit"]

	thread_join: make routine! compose/deep [[
		thread [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_thread_join"]

	thread_yield: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_thread_yield"]

	mutex_init: make routine! compose/deep [[
		mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_mutex_init"]

	mutex_clear: make routine! compose/deep [[
		mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_mutex_clear"]

	mutex_lock: make routine! compose/deep [[
		mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_mutex_lock"]

	mutex_trylock: make routine! compose/deep [[
		mutex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_mutex_trylock"]

	mutex_unlock: make routine! compose/deep [[
		mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_mutex_unlock"]

	rw_lock_init: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_init"]

	rw_lock_clear: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_clear"]

	rw_lock_writer_lock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_writer_lock"]

	rw_lock_writer_trylock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [int32]
		abi: default
	] (glib) "g_rw_lock_writer_trylock"]

	rw_lock_writer_unlock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_writer_unlock"]

	rw_lock_reader_lock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_reader_lock"]

	rw_lock_reader_trylock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [int32]
		abi: default
	] (glib) "g_rw_lock_reader_trylock"]

	rw_lock_reader_unlock: make routine! compose/deep [[
		rw_lock [pointer]
		return: [void]
		abi: default
	] (glib) "g_rw_lock_reader_unlock"]

	rec_mutex_init: make routine! compose/deep [[
		rec_mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_rec_mutex_init"]

	rec_mutex_clear: make routine! compose/deep [[
		rec_mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_rec_mutex_clear"]

	rec_mutex_lock: make routine! compose/deep [[
		rec_mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_rec_mutex_lock"]

	rec_mutex_trylock: make routine! compose/deep [[
		rec_mutex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_rec_mutex_trylock"]

	rec_mutex_unlock: make routine! compose/deep [[
		rec_mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_rec_mutex_unlock"]

	cond_init: make routine! compose/deep [[
		cond [pointer]
		return: [void]
		abi: default
	] (glib) "g_cond_init"]

	cond_clear: make routine! compose/deep [[
		cond [pointer]
		return: [void]
		abi: default
	] (glib) "g_cond_clear"]

	cond_wait: make routine! compose/deep [[
		cond [pointer]
		mutex [pointer]
		return: [void]
		abi: default
	] (glib) "g_cond_wait"]

	cond_signal: make routine! compose/deep [[
		cond [pointer]
		return: [void]
		abi: default
	] (glib) "g_cond_signal"]

	cond_broadcast: make routine! compose/deep [[
		cond [pointer]
		return: [void]
		abi: default
	] (glib) "g_cond_broadcast"]

	cond_wait_until: make routine! compose/deep [[
		cond [pointer]
		mutex [pointer]
		end_time [int64]
		return: [int32]
		abi: default
	] (glib) "g_cond_wait_until"]

	private_get: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_private_get"]

	private_set: make routine! compose/deep [[
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_private_set"]

	private_replace: make routine! compose/deep [[
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_private_replace"]

	once_impl: make routine! compose/deep [[
		once [pointer]
		func [pointer]
		arg [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_once_impl"]

	once_init_enter: make routine! compose/deep [[
		location [pointer]
		return: [int32]
		abi: default
	] (glib) "g_once_init_enter"]

	once_init_leave: make routine! compose/deep [[
		location [pointer]
		result [uint64]
		return: [void]
		abi: default
	] (glib) "g_once_init_leave"]

	get_num_processors: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_get_num_processors"]

	async_queue_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_new"]

	async_queue_new_full: make routine! compose/deep [[
		item_free_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_new_full"]

	async_queue_lock: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_lock"]

	async_queue_unlock: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_unlock"]

	async_queue_ref: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_ref"]

	async_queue_unref: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_unref"]

	async_queue_push: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_push"]

	async_queue_push_unlocked: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_push_unlocked"]

	async_queue_push_sorted: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_push_sorted"]

	async_queue_push_sorted_unlocked: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_push_sorted_unlocked"]

	async_queue_pop: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_pop"]

	async_queue_pop_unlocked: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_pop_unlocked"]

	async_queue_try_pop: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_try_pop"]

	async_queue_try_pop_unlocked: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_try_pop_unlocked"]

	async_queue_timeout_pop: make routine! compose/deep [[
		queue [pointer]
		timeout [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_timeout_pop"]

	async_queue_timeout_pop_unlocked: make routine! compose/deep [[
		queue [pointer]
		timeout [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_async_queue_timeout_pop_unlocked"]

	async_queue_length: make routine! compose/deep [[
		queue [pointer]
		return: [int32]
		abi: default
	] (glib) "g_async_queue_length"]

	async_queue_length_unlocked: make routine! compose/deep [[
		queue [pointer]
		return: [int32]
		abi: default
	] (glib) "g_async_queue_length_unlocked"]

	async_queue_sort: make routine! compose/deep [[
		queue [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_sort"]

	async_queue_sort_unlocked: make routine! compose/deep [[
		queue [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_async_queue_sort_unlocked"]

	on_error_query: make routine! compose/deep [[
		prg_name [pointer]
		return: [void]
		abi: default
	] (glib) "g_on_error_query"]

	on_error_stack_trace: make routine! compose/deep [[
		prg_name [pointer]
		return: [void]
		abi: default
	] (glib) "g_on_error_stack_trace"]

	base64_encode_step: make routine! compose/deep [[
		in [pointer]
		len [uint64]
		break_lines [int32]
		out [pointer]
		state [pointer]
		save [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_base64_encode_step"]

	base64_encode_close: make routine! compose/deep [[
		break_lines [int32]
		out [pointer]
		state [pointer]
		save [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_base64_encode_close"]

	base64_encode: make routine! compose/deep [[
		data [pointer]
		len [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_base64_encode"]

	base64_decode_step: make routine! compose/deep [[
		in [pointer]
		len [uint64]
		out [pointer]
		state [pointer]
		save [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_base64_decode_step"]

	base64_decode: make routine! compose/deep [[
		text [pointer]
		out_len [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_base64_decode"]

	base64_decode_inplace: make routine! compose/deep [[
		text [pointer]
		out_len [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_base64_decode_inplace"]

	bit_lock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [void]
		abi: default
	] (glib) "g_bit_lock"]

	bit_trylock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [int32]
		abi: default
	] (glib) "g_bit_trylock"]

	bit_unlock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [void]
		abi: default
	] (glib) "g_bit_unlock"]

	pointer_bit_lock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [void]
		abi: default
	] (glib) "g_pointer_bit_lock"]

	pointer_bit_trylock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [int32]
		abi: default
	] (glib) "g_pointer_bit_trylock"]

	pointer_bit_unlock: make routine! compose/deep [[
		address [pointer]
		lock_bit [int32]
		return: [void]
		abi: default
	] (glib) "g_pointer_bit_unlock"]

	bookmark_file_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_bookmark_file_error_quark"]

	bookmark_file_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_new"]

	bookmark_file_free: make routine! compose/deep [[
		bookmark [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_free"]

	bookmark_file_load_from_file: make routine! compose/deep [[
		bookmark [pointer]
		filename [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_load_from_file"]

	bookmark_file_load_from_data: make routine! compose/deep [[
		bookmark [pointer]
		data [pointer]
		length [uint64]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_load_from_data"]

	bookmark_file_load_from_data_dirs: make routine! compose/deep [[
		bookmark [pointer]
		file [pointer]
		full_path [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_load_from_data_dirs"]

	bookmark_file_to_data: make routine! compose/deep [[
		bookmark [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_to_data"]

	bookmark_file_to_file: make routine! compose/deep [[
		bookmark [pointer]
		filename [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_to_file"]

	bookmark_file_set_title: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		title [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_title"]

	bookmark_file_get_title: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_title"]

	bookmark_file_set_description: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		description [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_description"]

	bookmark_file_get_description: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_description"]

	bookmark_file_set_mime_type: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		mime_type [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_mime_type"]

	bookmark_file_get_mime_type: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_mime_type"]

	bookmark_file_set_groups: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		groups [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_groups"]

	bookmark_file_add_group: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		group [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_add_group"]

	bookmark_file_has_group: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		group [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_has_group"]

	bookmark_file_get_groups: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_groups"]

	bookmark_file_add_application: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		name [pointer]
		exec [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_add_application"]

	bookmark_file_has_application: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		name [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_has_application"]

	bookmark_file_get_applications: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_applications"]

	bookmark_file_set_app_info: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		name [pointer]
		exec [pointer]
		count [int32]
		stamp [int64]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_set_app_info"]

	bookmark_file_get_app_info: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		name [pointer]
		exec [pointer]
		count [pointer]
		stamp [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_get_app_info"]

	bookmark_file_set_is_private: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		is_private [int32]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_is_private"]

	bookmark_file_get_is_private: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_get_is_private"]

	bookmark_file_set_icon: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		href [pointer]
		mime_type [pointer]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_icon"]

	bookmark_file_get_icon: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		href [pointer]
		mime_type [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_get_icon"]

	bookmark_file_set_added: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		added [int64]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_added"]

	bookmark_file_get_added: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (glib) "g_bookmark_file_get_added"]

	bookmark_file_set_modified: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		modified [int64]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_modified"]

	bookmark_file_get_modified: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (glib) "g_bookmark_file_get_modified"]

	bookmark_file_set_visited: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		visited [int64]
		return: [void]
		abi: default
	] (glib) "g_bookmark_file_set_visited"]

	bookmark_file_get_visited: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (glib) "g_bookmark_file_get_visited"]

	bookmark_file_has_item: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_has_item"]

	bookmark_file_get_size: make routine! compose/deep [[
		bookmark [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_get_size"]

	bookmark_file_get_uris: make routine! compose/deep [[
		bookmark [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bookmark_file_get_uris"]

	bookmark_file_remove_group: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		group [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_remove_group"]

	bookmark_file_remove_application: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		name [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_remove_application"]

	bookmark_file_remove_item: make routine! compose/deep [[
		bookmark [pointer]
		uri [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_remove_item"]

	bookmark_file_move_item: make routine! compose/deep [[
		bookmark [pointer]
		old_uri [pointer]
		new_uri [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bookmark_file_move_item"]

	bytes_new: make routine! compose/deep [[
		data [pointer]
		size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_new"]

	bytes_new_take: make routine! compose/deep [[
		data [pointer]
		size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_new_take"]

	bytes_new_static: make routine! compose/deep [[
		data [pointer]
		size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_new_static"]

	bytes_new_with_free_func: make routine! compose/deep [[
		data [pointer]
		size [uint64]
		free_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_new_with_free_func"]

	bytes_new_from_bytes: make routine! compose/deep [[
		bytes [pointer]
		offset [uint64]
		length [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_new_from_bytes"]

	bytes_get_data: make routine! compose/deep [[
		bytes [pointer]
		size [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_get_data"]

	bytes_get_size: make routine! compose/deep [[
		bytes [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_bytes_get_size"]

	bytes_ref: make routine! compose/deep [[
		bytes [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_ref"]

	bytes_unref: make routine! compose/deep [[
		bytes [pointer]
		return: [void]
		abi: default
	] (glib) "g_bytes_unref"]

	bytes_unref_to_data: make routine! compose/deep [[
		bytes [pointer]
		size [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_unref_to_data"]

	bytes_unref_to_array: make routine! compose/deep [[
		bytes [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_bytes_unref_to_array"]

	bytes_hash: make routine! compose/deep [[
		bytes [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_bytes_hash"]

	bytes_equal: make routine! compose/deep [[
		bytes1 [pointer]
		bytes2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bytes_equal"]

	bytes_compare: make routine! compose/deep [[
		bytes1 [pointer]
		bytes2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_bytes_compare"]

	get_charset: make routine! compose/deep [[
		charset [pointer]
		return: [int32]
		abi: default
	] (glib) "g_get_charset"]

	get_codeset: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_codeset"]

	get_language_names: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_language_names"]

	get_locale_variants: make routine! compose/deep [[
		locale [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_get_locale_variants"]

	checksum_type_get_length: make routine! compose/deep [[
		checksum_type [int32]
		return: [int64]
		abi: default
	] (glib) "g_checksum_type_get_length"]

	checksum_new: make routine! compose/deep [[
		checksum_type [int32]
		return: [pointer]
		abi: default
	] (glib) "g_checksum_new"]

	checksum_reset: make routine! compose/deep [[
		checksum [pointer]
		return: [void]
		abi: default
	] (glib) "g_checksum_reset"]

	checksum_copy: make routine! compose/deep [[
		checksum [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_checksum_copy"]

	checksum_free: make routine! compose/deep [[
		checksum [pointer]
		return: [void]
		abi: default
	] (glib) "g_checksum_free"]

	checksum_update: make routine! compose/deep [[
		checksum [pointer]
		data [pointer]
		length [int64]
		return: [void]
		abi: default
	] (glib) "g_checksum_update"]

	checksum_get_string: make routine! compose/deep [[
		checksum [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_checksum_get_string"]

	checksum_get_digest: make routine! compose/deep [[
		checksum [pointer]
		buffer [pointer]
		digest_len [pointer]
		return: [void]
		abi: default
	] (glib) "g_checksum_get_digest"]

	compute_checksum_for_data: make routine! compose/deep [[
		checksum_type [int32]
		data [pointer]
		length [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_compute_checksum_for_data"]

	compute_checksum_for_string: make routine! compose/deep [[
		checksum_type [int32]
		str [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_compute_checksum_for_string"]

	compute_checksum_for_bytes: make routine! compose/deep [[
		checksum_type [int32]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_compute_checksum_for_bytes"]

	convert_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_convert_error_quark"]

	iconv_open: make routine! compose/deep [[
		to_codeset [pointer]
		from_codeset [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_iconv_open"]

	iconv: make routine! compose/deep [[
		converter [pointer]
		inbuf [pointer]
		inbytes_left [pointer]
		outbuf [pointer]
		outbytes_left [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_iconv"]

	iconv_close: make routine! compose/deep [[
		converter [pointer]
		return: [int32]
		abi: default
	] (glib) "g_iconv_close"]

	convert: make routine! compose/deep [[
		str [pointer]
		len [int64]
		to_codeset [pointer]
		from_codeset [pointer]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_convert"]

	convert_with_iconv: make routine! compose/deep [[
		str [pointer]
		len [int64]
		converter [pointer]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_convert_with_iconv"]

	convert_with_fallback: make routine! compose/deep [[
		str [pointer]
		len [int64]
		to_codeset [pointer]
		from_codeset [pointer]
		fallback [pointer]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_convert_with_fallback"]

	locale_to_utf8: make routine! compose/deep [[
		opsysstring [pointer]
		len [int64]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_locale_to_utf8"]

	locale_from_utf8: make routine! compose/deep [[
		utf8string [pointer]
		len [int64]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_locale_from_utf8"]

	filename_to_utf8: make routine! compose/deep [[
		opsysstring [pointer]
		len [int64]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_to_utf8"]

	filename_from_utf8: make routine! compose/deep [[
		utf8string [pointer]
		len [int64]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_from_utf8"]

	filename_from_uri: make routine! compose/deep [[
		uri [pointer]
		hostname [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_from_uri"]

	filename_to_uri: make routine! compose/deep [[
		filename [pointer]
		hostname [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_to_uri"]

	filename_display_name: make routine! compose/deep [[
		filename [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_display_name"]

	get_filename_charsets: make routine! compose/deep [[
		charsets [pointer]
		return: [int32]
		abi: default
	] (glib) "g_get_filename_charsets"]

	filename_display_basename: make routine! compose/deep [[
		filename [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_filename_display_basename"]

	uri_list_extract_uris: make routine! compose/deep [[
		uri_list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_uri_list_extract_uris"]

	datalist_init: make routine! compose/deep [[
		datalist [pointer]
		return: [void]
		abi: default
	] (glib) "g_datalist_init"]

	datalist_clear: make routine! compose/deep [[
		datalist [pointer]
		return: [void]
		abi: default
	] (glib) "g_datalist_clear"]

	datalist_id_get_data: make routine! compose/deep [[
		datalist [pointer]
		key_id [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_datalist_id_get_data"]

	datalist_id_set_data_full: make routine! compose/deep [[
		datalist [pointer]
		key_id [uint32]
		data [pointer]
		destroy_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_datalist_id_set_data_full"]

	datalist_id_dup_data: make routine! compose/deep [[
		datalist [pointer]
		key_id [uint32]
		dup_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_datalist_id_dup_data"]

	datalist_id_replace_data: make routine! compose/deep [[
		datalist [pointer]
		key_id [uint32]
		oldval [pointer]
		newval [pointer]
		destroy [pointer]
		old_destroy [pointer]
		return: [int32]
		abi: default
	] (glib) "g_datalist_id_replace_data"]

	datalist_id_remove_no_notify: make routine! compose/deep [[
		datalist [pointer]
		key_id [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_datalist_id_remove_no_notify"]

	datalist_foreach: make routine! compose/deep [[
		datalist [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_datalist_foreach"]

	datalist_set_flags: make routine! compose/deep [[
		datalist [pointer]
		flags [uint32]
		return: [void]
		abi: default
	] (glib) "g_datalist_set_flags"]

	datalist_unset_flags: make routine! compose/deep [[
		datalist [pointer]
		flags [uint32]
		return: [void]
		abi: default
	] (glib) "g_datalist_unset_flags"]

	datalist_get_flags: make routine! compose/deep [[
		datalist [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_datalist_get_flags"]

	dataset_destroy: make routine! compose/deep [[
		dataset_location [pointer]
		return: [void]
		abi: default
	] (glib) "g_dataset_destroy"]

	dataset_id_get_data: make routine! compose/deep [[
		dataset_location [pointer]
		key_id [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_dataset_id_get_data"]

	datalist_get_data: make routine! compose/deep [[
		datalist [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_datalist_get_data"]

	dataset_id_set_data_full: make routine! compose/deep [[
		dataset_location [pointer]
		key_id [uint32]
		data [pointer]
		destroy_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_dataset_id_set_data_full"]

	dataset_id_remove_no_notify: make routine! compose/deep [[
		dataset_location [pointer]
		key_id [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_dataset_id_remove_no_notify"]

	dataset_foreach: make routine! compose/deep [[
		dataset_location [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_dataset_foreach"]

	date_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_date_new"]

	date_new_dmy: make routine! compose/deep [[
		day [uint8]
		month [int32]
		year [uint16]
		return: [pointer]
		abi: default
	] (glib) "g_date_new_dmy"]

	date_new_julian: make routine! compose/deep [[
		julian_day [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_date_new_julian"]

	date_free: make routine! compose/deep [[
		date [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_free"]

	date_valid: make routine! compose/deep [[
		date [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_valid"]

	date_valid_day: make routine! compose/deep [[
		day [uint8]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_day"]

	date_valid_month: make routine! compose/deep [[
		month [int32]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_month"]

	date_valid_year: make routine! compose/deep [[
		year [uint16]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_year"]

	date_valid_weekday: make routine! compose/deep [[
		weekday [int32]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_weekday"]

	date_valid_julian: make routine! compose/deep [[
		julian_date [uint32]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_julian"]

	date_valid_dmy: make routine! compose/deep [[
		day [uint8]
		month [int32]
		year [uint16]
		return: [int32]
		abi: default
	] (glib) "g_date_valid_dmy"]

	date_get_weekday: make routine! compose/deep [[
		date [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_get_weekday"]

	date_get_month: make routine! compose/deep [[
		date [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_get_month"]

	date_get_year: make routine! compose/deep [[
		date [pointer]
		return: [uint16]
		abi: default
	] (glib) "g_date_get_year"]

	date_get_day: make routine! compose/deep [[
		date [pointer]
		return: [uint8]
		abi: default
	] (glib) "g_date_get_day"]

	date_get_julian: make routine! compose/deep [[
		date [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_get_julian"]

	date_get_day_of_year: make routine! compose/deep [[
		date [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_get_day_of_year"]

	date_get_monday_week_of_year: make routine! compose/deep [[
		date [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_get_monday_week_of_year"]

	date_get_sunday_week_of_year: make routine! compose/deep [[
		date [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_get_sunday_week_of_year"]

	date_get_iso8601_week_of_year: make routine! compose/deep [[
		date [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_get_iso8601_week_of_year"]

	date_clear: make routine! compose/deep [[
		date [pointer]
		n_dates [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_clear"]

	date_set_parse: make routine! compose/deep [[
		date [pointer]
		str [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_set_parse"]

	date_set_time_t: make routine! compose/deep [[
		date [pointer]
		timet [int64]
		return: [void]
		abi: default
	] (glib) "g_date_set_time_t"]

	date_set_time_val: make routine! compose/deep [[
		date [pointer]
		timeval [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_set_time_val"]

	date_set_month: make routine! compose/deep [[
		date [pointer]
		month [int32]
		return: [void]
		abi: default
	] (glib) "g_date_set_month"]

	date_set_day: make routine! compose/deep [[
		date [pointer]
		day [uint8]
		return: [void]
		abi: default
	] (glib) "g_date_set_day"]

	date_set_year: make routine! compose/deep [[
		date [pointer]
		year [uint16]
		return: [void]
		abi: default
	] (glib) "g_date_set_year"]

	date_set_dmy: make routine! compose/deep [[
		date [pointer]
		day [uint8]
		month [int32]
		y [uint16]
		return: [void]
		abi: default
	] (glib) "g_date_set_dmy"]

	date_set_julian: make routine! compose/deep [[
		date [pointer]
		julian_date [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_set_julian"]

	date_is_first_of_month: make routine! compose/deep [[
		date [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_is_first_of_month"]

	date_is_last_of_month: make routine! compose/deep [[
		date [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_is_last_of_month"]

	date_add_days: make routine! compose/deep [[
		date [pointer]
		n_days [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_add_days"]

	date_subtract_days: make routine! compose/deep [[
		date [pointer]
		n_days [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_subtract_days"]

	date_add_months: make routine! compose/deep [[
		date [pointer]
		n_months [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_add_months"]

	date_subtract_months: make routine! compose/deep [[
		date [pointer]
		n_months [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_subtract_months"]

	date_add_years: make routine! compose/deep [[
		date [pointer]
		n_years [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_add_years"]

	date_subtract_years: make routine! compose/deep [[
		date [pointer]
		n_years [uint32]
		return: [void]
		abi: default
	] (glib) "g_date_subtract_years"]

	date_is_leap_year: make routine! compose/deep [[
		year [uint16]
		return: [int32]
		abi: default
	] (glib) "g_date_is_leap_year"]

	date_get_days_in_month: make routine! compose/deep [[
		month [int32]
		year [uint16]
		return: [uint8]
		abi: default
	] (glib) "g_date_get_days_in_month"]

	date_get_monday_weeks_in_year: make routine! compose/deep [[
		year [uint16]
		return: [uint8]
		abi: default
	] (glib) "g_date_get_monday_weeks_in_year"]

	date_get_sunday_weeks_in_year: make routine! compose/deep [[
		year [uint16]
		return: [uint8]
		abi: default
	] (glib) "g_date_get_sunday_weeks_in_year"]

	date_days_between: make routine! compose/deep [[
		date1 [pointer]
		date2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_days_between"]

	date_compare: make routine! compose/deep [[
		lhs [pointer]
		rhs [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_compare"]

	date_to_struct_tm: make routine! compose/deep [[
		date [pointer]
		tm [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_to_struct_tm"]

	date_clamp: make routine! compose/deep [[
		date [pointer]
		min_date [pointer]
		max_date [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_clamp"]

	date_order: make routine! compose/deep [[
		date1 [pointer]
		date2 [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_order"]

	date_strftime: make routine! compose/deep [[
		s [pointer]
		slen [uint64]
		format [pointer]
		date [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_date_strftime"]

	time_zone_new: make routine! compose/deep [[
		identifier [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_time_zone_new"]

	time_zone_new_utc: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_time_zone_new_utc"]

	time_zone_new_local: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_time_zone_new_local"]

	time_zone_ref: make routine! compose/deep [[
		tz [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_time_zone_ref"]

	time_zone_unref: make routine! compose/deep [[
		tz [pointer]
		return: [void]
		abi: default
	] (glib) "g_time_zone_unref"]

	time_zone_find_interval: make routine! compose/deep [[
		tz [pointer]
		type [int32]
		time_ [int64]
		return: [int32]
		abi: default
	] (glib) "g_time_zone_find_interval"]

	time_zone_adjust_time: make routine! compose/deep [[
		tz [pointer]
		type [int32]
		time_ [pointer]
		return: [int32]
		abi: default
	] (glib) "g_time_zone_adjust_time"]

	time_zone_get_abbreviation: make routine! compose/deep [[
		tz [pointer]
		interval [int32]
		return: [pointer]
		abi: default
	] (glib) "g_time_zone_get_abbreviation"]

	time_zone_get_offset: make routine! compose/deep [[
		tz [pointer]
		interval [int32]
		return: [int32]
		abi: default
	] (glib) "g_time_zone_get_offset"]

	time_zone_is_dst: make routine! compose/deep [[
		tz [pointer]
		interval [int32]
		return: [int32]
		abi: default
	] (glib) "g_time_zone_is_dst"]

	date_time_unref: make routine! compose/deep [[
		datetime [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_time_unref"]

	date_time_ref: make routine! compose/deep [[
		datetime [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_ref"]

	date_time_new_now: make routine! compose/deep [[
		tz [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_now"]

	date_time_new_now_local: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_now_local"]

	date_time_new_now_utc: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_now_utc"]

	date_time_new_from_unix_local: make routine! compose/deep [[
		t [int64]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_from_unix_local"]

	date_time_new_from_unix_utc: make routine! compose/deep [[
		t [int64]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_from_unix_utc"]

	date_time_new_from_timeval_local: make routine! compose/deep [[
		tv [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_from_timeval_local"]

	date_time_new_from_timeval_utc: make routine! compose/deep [[
		tv [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_from_timeval_utc"]

	date_time_new: make routine! compose/deep [[
		tz [pointer]
		year [int32]
		month [int32]
		day [int32]
		hour [int32]
		minute [int32]
		seconds [double]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new"]

	date_time_new_local: make routine! compose/deep [[
		year [int32]
		month [int32]
		day [int32]
		hour [int32]
		minute [int32]
		seconds [double]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_local"]

	date_time_new_utc: make routine! compose/deep [[
		year [int32]
		month [int32]
		day [int32]
		hour [int32]
		minute [int32]
		seconds [double]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_new_utc"]

	date_time_add: make routine! compose/deep [[
		datetime [pointer]
		timespan [int64]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add"]

	date_time_add_years: make routine! compose/deep [[
		datetime [pointer]
		years [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_years"]

	date_time_add_months: make routine! compose/deep [[
		datetime [pointer]
		months [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_months"]

	date_time_add_weeks: make routine! compose/deep [[
		datetime [pointer]
		weeks [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_weeks"]

	date_time_add_days: make routine! compose/deep [[
		datetime [pointer]
		days [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_days"]

	date_time_add_hours: make routine! compose/deep [[
		datetime [pointer]
		hours [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_hours"]

	date_time_add_minutes: make routine! compose/deep [[
		datetime [pointer]
		minutes [int32]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_minutes"]

	date_time_add_seconds: make routine! compose/deep [[
		datetime [pointer]
		seconds [double]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_seconds"]

	date_time_add_full: make routine! compose/deep [[
		datetime [pointer]
		years [int32]
		months [int32]
		days [int32]
		hours [int32]
		minutes [int32]
		seconds [double]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_add_full"]

	date_time_compare: make routine! compose/deep [[
		dt1 [pointer]
		dt2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_compare"]

	date_time_difference: make routine! compose/deep [[
		end [pointer]
		begin [pointer]
		return: [int64]
		abi: default
	] (glib) "g_date_time_difference"]

	date_time_hash: make routine! compose/deep [[
		datetime [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_date_time_hash"]

	date_time_equal: make routine! compose/deep [[
		dt1 [pointer]
		dt2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_equal"]

	date_time_get_ymd: make routine! compose/deep [[
		datetime [pointer]
		year [pointer]
		month [pointer]
		day [pointer]
		return: [void]
		abi: default
	] (glib) "g_date_time_get_ymd"]

	date_time_get_year: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_year"]

	date_time_get_month: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_month"]

	date_time_get_day_of_month: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_day_of_month"]

	date_time_get_week_numbering_year: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_week_numbering_year"]

	date_time_get_week_of_year: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_week_of_year"]

	date_time_get_day_of_week: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_day_of_week"]

	date_time_get_day_of_year: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_day_of_year"]

	date_time_get_hour: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_hour"]

	date_time_get_minute: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_minute"]

	date_time_get_second: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_second"]

	date_time_get_microsecond: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_get_microsecond"]

	date_time_get_seconds: make routine! compose/deep [[
		datetime [pointer]
		return: [double]
		abi: default
	] (glib) "g_date_time_get_seconds"]

	date_time_to_unix: make routine! compose/deep [[
		datetime [pointer]
		return: [int64]
		abi: default
	] (glib) "g_date_time_to_unix"]

	date_time_to_timeval: make routine! compose/deep [[
		datetime [pointer]
		tv [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_to_timeval"]

	date_time_get_utc_offset: make routine! compose/deep [[
		datetime [pointer]
		return: [int64]
		abi: default
	] (glib) "g_date_time_get_utc_offset"]

	date_time_get_timezone_abbreviation: make routine! compose/deep [[
		datetime [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_get_timezone_abbreviation"]

	date_time_is_daylight_savings: make routine! compose/deep [[
		datetime [pointer]
		return: [int32]
		abi: default
	] (glib) "g_date_time_is_daylight_savings"]

	date_time_to_timezone: make routine! compose/deep [[
		datetime [pointer]
		tz [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_to_timezone"]

	date_time_to_local: make routine! compose/deep [[
		datetime [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_to_local"]

	date_time_to_utc: make routine! compose/deep [[
		datetime [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_to_utc"]

	date_time_format: make routine! compose/deep [[
		datetime [pointer]
		format [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_date_time_format"]

	dir_open: make routine! compose/deep [[
		path [pointer]
		flags [uint32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_dir_open"]

	dir_read_name: make routine! compose/deep [[
		dir [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_dir_read_name"]

	dir_rewind: make routine! compose/deep [[
		dir [pointer]
		return: [void]
		abi: default
	] (glib) "g_dir_rewind"]

	dir_close: make routine! compose/deep [[
		dir [pointer]
		return: [void]
		abi: default
	] (glib) "g_dir_close"]

	getenv: make routine! compose/deep [[
		variable [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_getenv"]

	setenv: make routine! compose/deep [[
		variable [pointer]
		value [pointer]
		overwrite [int32]
		return: [int32]
		abi: default
	] (glib) "g_setenv"]

	unsetenv: make routine! compose/deep [[
		variable [pointer]
		return: [void]
		abi: default
	] (glib) "g_unsetenv"]

	listenv: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_listenv"]

	get_environ: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_environ"]

	environ_getenv: make routine! compose/deep [[
		envp [pointer]
		variable [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_environ_getenv"]

	environ_setenv: make routine! compose/deep [[
		envp [pointer]
		variable [pointer]
		value [pointer]
		overwrite [int32]
		return: [pointer]
		abi: default
	] (glib) "g_environ_setenv"]

	environ_unsetenv: make routine! compose/deep [[
		envp [pointer]
		variable [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_environ_unsetenv"]

	file_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_file_error_quark"]

	file_error_from_errno: make routine! compose/deep [[
		err_no [int32]
		return: [int32]
		abi: default
	] (glib) "g_file_error_from_errno"]

	file_test: make routine! compose/deep [[
		filename [pointer]
		test [int32]
		return: [int32]
		abi: default
	] (glib) "g_file_test"]

	file_get_contents: make routine! compose/deep [[
		filename [pointer]
		contents [pointer]
		length [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_file_get_contents"]

	file_set_contents: make routine! compose/deep [[
		filename [pointer]
		contents [pointer]
		length [int64]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_file_set_contents"]

	file_read_link: make routine! compose/deep [[
		filename [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_file_read_link"]

	mkdtemp: make routine! compose/deep [[
		tmpl [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mkdtemp"]

	mkdtemp_full: make routine! compose/deep [[
		tmpl [pointer]
		mode [int32]
		return: [pointer]
		abi: default
	] (glib) "g_mkdtemp_full"]

	mkstemp: make routine! compose/deep [[
		tmpl [pointer]
		return: [int32]
		abi: default
	] (glib) "g_mkstemp"]

	mkstemp_full: make routine! compose/deep [[
		tmpl [pointer]
		flags [int32]
		mode [int32]
		return: [int32]
		abi: default
	] (glib) "g_mkstemp_full"]

	file_open_tmp: make routine! compose/deep [[
		tmpl [pointer]
		name_used [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_file_open_tmp"]

	dir_make_tmp: make routine! compose/deep [[
		tmpl [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_dir_make_tmp"]

	build_path: make routine! compose/deep [[
		separator [pointer]
		first_element [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_build_path"]

	build_pathv: make routine! compose/deep [[
		separator [pointer]
		args [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_build_pathv"]

	build_filename: make routine! compose/deep [[
		first_element [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_build_filename"]

	build_filenamev: make routine! compose/deep [[
		args [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_build_filenamev"]

	mkdir_with_parents: make routine! compose/deep [[
		pathname [pointer]
		mode [int32]
		return: [int32]
		abi: default
	] (glib) "g_mkdir_with_parents"]

	path_is_absolute: make routine! compose/deep [[
		file_name [pointer]
		return: [int32]
		abi: default
	] (glib) "g_path_is_absolute"]

	path_skip_root: make routine! compose/deep [[
		file_name [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_path_skip_root"]

	get_current_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_current_dir"]

	path_get_basename: make routine! compose/deep [[
		file_name [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_path_get_basename"]

	path_get_dirname: make routine! compose/deep [[
		file_name [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_path_get_dirname"]

	strip_context: make routine! compose/deep [[
		msgid [pointer]
		msgval [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strip_context"]

	dgettext: make routine! compose/deep [[
		domain [pointer]
		msgid [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_dgettext"]

	dcgettext: make routine! compose/deep [[
		domain [pointer]
		msgid [pointer]
		category [int32]
		return: [pointer]
		abi: default
	] (glib) "g_dcgettext"]

	dngettext: make routine! compose/deep [[
		domain [pointer]
		msgid [pointer]
		msgid_plural [pointer]
		n [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_dngettext"]

	dpgettext: make routine! compose/deep [[
		domain [pointer]
		msgctxtid [pointer]
		msgidoffset [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_dpgettext"]

	dpgettext2: make routine! compose/deep [[
		domain [pointer]
		context [pointer]
		msgid [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_dpgettext2"]

	free: make routine! compose/deep [[
		mem [pointer]
		return: [void]
		abi: default
	] (glib) "g_free"]

	clear_pointer: make routine! compose/deep [[
		pp [pointer]
		destroy [pointer]
		return: [void]
		abi: default
	] (glib) "g_clear_pointer"]

	malloc: make routine! compose/deep [[
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_malloc"]

	malloc0: make routine! compose/deep [[
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_malloc0"]

	realloc: make routine! compose/deep [[
		mem [pointer]
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_realloc"]

	try_malloc: make routine! compose/deep [[
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_malloc"]

	try_malloc0: make routine! compose/deep [[
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_malloc0"]

	try_realloc: make routine! compose/deep [[
		mem [pointer]
		n_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_realloc"]

	malloc_n: make routine! compose/deep [[
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_malloc_n"]

	malloc0_n: make routine! compose/deep [[
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_malloc0_n"]

	realloc_n: make routine! compose/deep [[
		mem [pointer]
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_realloc_n"]

	try_malloc_n: make routine! compose/deep [[
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_malloc_n"]

	try_malloc0_n: make routine! compose/deep [[
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_malloc0_n"]

	try_realloc_n: make routine! compose/deep [[
		mem [pointer]
		n_blocks [uint64]
		n_block_bytes [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_try_realloc_n"]

	mem_set_vtable: make routine! compose/deep [[
		vtable [pointer]
		return: [void]
		abi: default
	] (glib) "g_mem_set_vtable"]

	mem_is_system_malloc: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_mem_is_system_malloc"]

	mem_profile: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_mem_profile"]

	node_new: make routine! compose/deep [[
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_new"]

	node_destroy: make routine! compose/deep [[
		root [pointer]
		return: [void]
		abi: default
	] (glib) "g_node_destroy"]

	node_unlink: make routine! compose/deep [[
		node [pointer]
		return: [void]
		abi: default
	] (glib) "g_node_unlink"]

	node_copy_deep: make routine! compose/deep [[
		node [pointer]
		copy_func [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_copy_deep"]

	node_copy: make routine! compose/deep [[
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_copy"]

	node_insert: make routine! compose/deep [[
		parent [pointer]
		position [int32]
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_insert"]

	node_insert_before: make routine! compose/deep [[
		parent [pointer]
		sibling [pointer]
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_insert_before"]

	node_insert_after: make routine! compose/deep [[
		parent [pointer]
		sibling [pointer]
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_insert_after"]

	node_prepend: make routine! compose/deep [[
		parent [pointer]
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_prepend"]

	node_n_nodes: make routine! compose/deep [[
		root [pointer]
		flags [int32]
		return: [uint32]
		abi: default
	] (glib) "g_node_n_nodes"]

	node_get_root: make routine! compose/deep [[
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_get_root"]

	node_is_ancestor: make routine! compose/deep [[
		node [pointer]
		descendant [pointer]
		return: [int32]
		abi: default
	] (glib) "g_node_is_ancestor"]

	node_depth: make routine! compose/deep [[
		node [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_node_depth"]

	node_find: make routine! compose/deep [[
		root [pointer]
		order [int32]
		flags [int32]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_find"]

	node_traverse: make routine! compose/deep [[
		root [pointer]
		order [int32]
		flags [int32]
		max_depth [int32]
		func [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_node_traverse"]

	node_max_height: make routine! compose/deep [[
		root [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_node_max_height"]

	node_children_foreach: make routine! compose/deep [[
		node [pointer]
		flags [int32]
		func [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_node_children_foreach"]

	node_reverse_children: make routine! compose/deep [[
		node [pointer]
		return: [void]
		abi: default
	] (glib) "g_node_reverse_children"]

	node_n_children: make routine! compose/deep [[
		node [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_node_n_children"]

	node_nth_child: make routine! compose/deep [[
		node [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_node_nth_child"]

	node_last_child: make routine! compose/deep [[
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_last_child"]

	node_find_child: make routine! compose/deep [[
		node [pointer]
		flags [int32]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_find_child"]

	node_child_position: make routine! compose/deep [[
		node [pointer]
		child [pointer]
		return: [int32]
		abi: default
	] (glib) "g_node_child_position"]

	node_child_index: make routine! compose/deep [[
		node [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_node_child_index"]

	node_first_sibling: make routine! compose/deep [[
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_first_sibling"]

	node_last_sibling: make routine! compose/deep [[
		node [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_node_last_sibling"]

	list_alloc: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_list_alloc"]

	list_free: make routine! compose/deep [[
		list [pointer]
		return: [void]
		abi: default
	] (glib) "g_list_free"]

	list_free_1: make routine! compose/deep [[
		list [pointer]
		return: [void]
		abi: default
	] (glib) "g_list_free_1"]

	list_free_full: make routine! compose/deep [[
		list [pointer]
		free_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_list_free_full"]

	list_append: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_append"]

	list_prepend: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_prepend"]

	list_insert: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		position [int32]
		return: [pointer]
		abi: default
	] (glib) "g_list_insert"]

	list_insert_sorted: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_insert_sorted"]

	list_insert_sorted_with_data: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_insert_sorted_with_data"]

	list_insert_before: make routine! compose/deep [[
		list [pointer]
		sibling [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_insert_before"]

	list_concat: make routine! compose/deep [[
		list1 [pointer]
		list2 [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_concat"]

	list_remove: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_remove"]

	list_remove_all: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_remove_all"]

	list_remove_link: make routine! compose/deep [[
		list [pointer]
		llink [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_remove_link"]

	list_delete_link: make routine! compose/deep [[
		list [pointer]
		link_ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_delete_link"]

	list_reverse: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_reverse"]

	list_copy: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_copy"]

	list_copy_deep: make routine! compose/deep [[
		list [pointer]
		func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_copy_deep"]

	list_nth: make routine! compose/deep [[
		list [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_list_nth"]

	list_nth_prev: make routine! compose/deep [[
		list [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_list_nth_prev"]

	list_find: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_find"]

	list_find_custom: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_find_custom"]

	list_position: make routine! compose/deep [[
		list [pointer]
		llink [pointer]
		return: [int32]
		abi: default
	] (glib) "g_list_position"]

	list_index: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_list_index"]

	list_last: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_last"]

	list_first: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_first"]

	list_length: make routine! compose/deep [[
		list [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_list_length"]

	list_foreach: make routine! compose/deep [[
		list [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_list_foreach"]

	list_sort: make routine! compose/deep [[
		list [pointer]
		compare_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_sort"]

	list_sort_with_data: make routine! compose/deep [[
		list [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_list_sort_with_data"]

	list_nth_data: make routine! compose/deep [[
		list [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_list_nth_data"]

	hash_table_new: make routine! compose/deep [[
		hash_func [pointer]
		key_equal_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_new"]

	hash_table_new_full: make routine! compose/deep [[
		hash_func [pointer]
		key_equal_func [pointer]
		key_destroy_func [pointer]
		value_destroy_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_new_full"]

	hash_table_destroy: make routine! compose/deep [[
		hash_table [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_destroy"]

	hash_table_insert: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_insert"]

	hash_table_replace: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_replace"]

	hash_table_add: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_add"]

	hash_table_remove: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_remove"]

	hash_table_remove_all: make routine! compose/deep [[
		hash_table [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_remove_all"]

	hash_table_steal: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_steal"]

	hash_table_steal_all: make routine! compose/deep [[
		hash_table [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_steal_all"]

	hash_table_lookup: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_lookup"]

	hash_table_contains: make routine! compose/deep [[
		hash_table [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_contains"]

	hash_table_lookup_extended: make routine! compose/deep [[
		hash_table [pointer]
		lookup_key [pointer]
		orig_key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_lookup_extended"]

	hash_table_foreach: make routine! compose/deep [[
		hash_table [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_foreach"]

	hash_table_find: make routine! compose/deep [[
		hash_table [pointer]
		predicate [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_find"]

	hash_table_foreach_remove: make routine! compose/deep [[
		hash_table [pointer]
		func [pointer]
		user_data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_hash_table_foreach_remove"]

	hash_table_foreach_steal: make routine! compose/deep [[
		hash_table [pointer]
		func [pointer]
		user_data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_hash_table_foreach_steal"]

	hash_table_size: make routine! compose/deep [[
		hash_table [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_hash_table_size"]

	hash_table_get_keys: make routine! compose/deep [[
		hash_table [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_get_keys"]

	hash_table_get_values: make routine! compose/deep [[
		hash_table [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_get_values"]

	hash_table_get_keys_as_array: make routine! compose/deep [[
		hash_table [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_get_keys_as_array"]

	hash_table_iter_init: make routine! compose/deep [[
		iter [pointer]
		hash_table [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_iter_init"]

	hash_table_iter_next: make routine! compose/deep [[
		iter [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hash_table_iter_next"]

	hash_table_iter_get_hash_table: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_iter_get_hash_table"]

	hash_table_iter_remove: make routine! compose/deep [[
		iter [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_iter_remove"]

	hash_table_iter_replace: make routine! compose/deep [[
		iter [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_iter_replace"]

	hash_table_iter_steal: make routine! compose/deep [[
		iter [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_iter_steal"]

	hash_table_ref: make routine! compose/deep [[
		hash_table [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hash_table_ref"]

	hash_table_unref: make routine! compose/deep [[
		hash_table [pointer]
		return: [void]
		abi: default
	] (glib) "g_hash_table_unref"]

	str_equal: make routine! compose/deep [[
		v1 [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_str_equal"]

	str_hash: make routine! compose/deep [[
		v [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_str_hash"]

	int_equal: make routine! compose/deep [[
		v1 [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_int_equal"]

	int_hash: make routine! compose/deep [[
		v [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_int_hash"]

	int64_equal: make routine! compose/deep [[
		v1 [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_int64_equal"]

	int64_hash: make routine! compose/deep [[
		v [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_int64_hash"]

	double_equal: make routine! compose/deep [[
		v1 [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_double_equal"]

	double_hash: make routine! compose/deep [[
		v [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_double_hash"]

	direct_hash: make routine! compose/deep [[
		v [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_direct_hash"]

	direct_equal: make routine! compose/deep [[
		v1 [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_direct_equal"]

	hmac_new: make routine! compose/deep [[
		digest_type [int32]
		key [pointer]
		key_len [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_hmac_new"]

	hmac_copy: make routine! compose/deep [[
		hmac [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hmac_copy"]

	hmac_ref: make routine! compose/deep [[
		hmac [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hmac_ref"]

	hmac_unref: make routine! compose/deep [[
		hmac [pointer]
		return: [void]
		abi: default
	] (glib) "g_hmac_unref"]

	hmac_update: make routine! compose/deep [[
		hmac [pointer]
		data [pointer]
		length [int64]
		return: [void]
		abi: default
	] (glib) "g_hmac_update"]

	hmac_get_string: make routine! compose/deep [[
		hmac [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hmac_get_string"]

	hmac_get_digest: make routine! compose/deep [[
		hmac [pointer]
		buffer [pointer]
		digest_len [pointer]
		return: [void]
		abi: default
	] (glib) "g_hmac_get_digest"]

	compute_hmac_for_data: make routine! compose/deep [[
		digest_type [int32]
		key [pointer]
		key_len [uint64]
		data [pointer]
		length [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_compute_hmac_for_data"]

	compute_hmac_for_string: make routine! compose/deep [[
		digest_type [int32]
		key [pointer]
		key_len [uint64]
		str [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_compute_hmac_for_string"]

	hook_list_init: make routine! compose/deep [[
		hook_list [pointer]
		hook_size [uint32]
		return: [void]
		abi: default
	] (glib) "g_hook_list_init"]

	hook_list_clear: make routine! compose/deep [[
		hook_list [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_list_clear"]

	hook_alloc: make routine! compose/deep [[
		hook_list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_alloc"]

	hook_free: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_free"]

	hook_ref: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_ref"]

	hook_unref: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_unref"]

	hook_destroy: make routine! compose/deep [[
		hook_list [pointer]
		hook_id [uint64]
		return: [int32]
		abi: default
	] (glib) "g_hook_destroy"]

	hook_destroy_link: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_destroy_link"]

	hook_prepend: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_prepend"]

	hook_insert_before: make routine! compose/deep [[
		hook_list [pointer]
		sibling [pointer]
		hook [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_insert_before"]

	hook_insert_sorted: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		func [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_insert_sorted"]

	hook_get: make routine! compose/deep [[
		hook_list [pointer]
		hook_id [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_hook_get"]

	hook_find: make routine! compose/deep [[
		hook_list [pointer]
		need_valids [int32]
		func [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_find"]

	hook_find_data: make routine! compose/deep [[
		hook_list [pointer]
		need_valids [int32]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_find_data"]

	hook_find_func: make routine! compose/deep [[
		hook_list [pointer]
		need_valids [int32]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_find_func"]

	hook_find_func_data: make routine! compose/deep [[
		hook_list [pointer]
		need_valids [int32]
		func [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hook_find_func_data"]

	hook_first_valid: make routine! compose/deep [[
		hook_list [pointer]
		may_be_in_call [int32]
		return: [pointer]
		abi: default
	] (glib) "g_hook_first_valid"]

	hook_next_valid: make routine! compose/deep [[
		hook_list [pointer]
		hook [pointer]
		may_be_in_call [int32]
		return: [pointer]
		abi: default
	] (glib) "g_hook_next_valid"]

	hook_compare_ids: make routine! compose/deep [[
		new_hook [pointer]
		sibling [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hook_compare_ids"]

	hook_list_invoke: make routine! compose/deep [[
		hook_list [pointer]
		may_recurse [int32]
		return: [void]
		abi: default
	] (glib) "g_hook_list_invoke"]

	hook_list_invoke_check: make routine! compose/deep [[
		hook_list [pointer]
		may_recurse [int32]
		return: [void]
		abi: default
	] (glib) "g_hook_list_invoke_check"]

	hook_list_marshal: make routine! compose/deep [[
		hook_list [pointer]
		may_recurse [int32]
		marshaller [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_list_marshal"]

	hook_list_marshal_check: make routine! compose/deep [[
		hook_list [pointer]
		may_recurse [int32]
		marshaller [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_hook_list_marshal_check"]

	hostname_is_non_ascii: make routine! compose/deep [[
		hostname [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hostname_is_non_ascii"]

	hostname_is_ascii_encoded: make routine! compose/deep [[
		hostname [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hostname_is_ascii_encoded"]

	hostname_is_ip_address: make routine! compose/deep [[
		hostname [pointer]
		return: [int32]
		abi: default
	] (glib) "g_hostname_is_ip_address"]

	hostname_to_ascii: make routine! compose/deep [[
		hostname [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hostname_to_ascii"]

	hostname_to_unicode: make routine! compose/deep [[
		hostname [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_hostname_to_unicode"]

	poll: make routine! compose/deep [[
		fds [pointer]
		nfds [uint32]
		timeout [int32]
		return: [int32]
		abi: default
	] (glib) "g_poll"]

	slist_alloc: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_slist_alloc"]

	slist_free: make routine! compose/deep [[
		list [pointer]
		return: [void]
		abi: default
	] (glib) "g_slist_free"]

	slist_free_1: make routine! compose/deep [[
		list [pointer]
		return: [void]
		abi: default
	] (glib) "g_slist_free_1"]

	slist_free_full: make routine! compose/deep [[
		list [pointer]
		free_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_slist_free_full"]

	slist_append: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_append"]

	slist_prepend: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_prepend"]

	slist_insert: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		position [int32]
		return: [pointer]
		abi: default
	] (glib) "g_slist_insert"]

	slist_insert_sorted: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_insert_sorted"]

	slist_insert_sorted_with_data: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_insert_sorted_with_data"]

	slist_insert_before: make routine! compose/deep [[
		slist [pointer]
		sibling [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_insert_before"]

	slist_concat: make routine! compose/deep [[
		list1 [pointer]
		list2 [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_concat"]

	slist_remove: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_remove"]

	slist_remove_all: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_remove_all"]

	slist_remove_link: make routine! compose/deep [[
		list [pointer]
		link_ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_remove_link"]

	slist_delete_link: make routine! compose/deep [[
		list [pointer]
		link_ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_delete_link"]

	slist_reverse: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_reverse"]

	slist_copy: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_copy"]

	slist_copy_deep: make routine! compose/deep [[
		list [pointer]
		func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_copy_deep"]

	slist_nth: make routine! compose/deep [[
		list [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_slist_nth"]

	slist_find: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_find"]

	slist_find_custom: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_find_custom"]

	slist_position: make routine! compose/deep [[
		list [pointer]
		llink [pointer]
		return: [int32]
		abi: default
	] (glib) "g_slist_position"]

	slist_index: make routine! compose/deep [[
		list [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_slist_index"]

	slist_last: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_last"]

	slist_length: make routine! compose/deep [[
		list [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_slist_length"]

	slist_foreach: make routine! compose/deep [[
		list [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_slist_foreach"]

	slist_sort: make routine! compose/deep [[
		list [pointer]
		compare_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_sort"]

	slist_sort_with_data: make routine! compose/deep [[
		list [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slist_sort_with_data"]

	slist_nth_data: make routine! compose/deep [[
		list [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_slist_nth_data"]

	main_context_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_main_context_new"]

	main_context_ref: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_context_ref"]

	main_context_unref: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_unref"]

	main_context_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_main_context_default"]

	main_context_iteration: make routine! compose/deep [[
		context [pointer]
		may_block [int32]
		return: [int32]
		abi: default
	] (glib) "g_main_context_iteration"]

	main_context_pending: make routine! compose/deep [[
		context [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_context_pending"]

	main_context_find_source_by_id: make routine! compose/deep [[
		context [pointer]
		source_id [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_main_context_find_source_by_id"]

	main_context_find_source_by_user_data: make routine! compose/deep [[
		context [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_context_find_source_by_user_data"]

	main_context_find_source_by_funcs_user_data: make routine! compose/deep [[
		context [pointer]
		funcs [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_context_find_source_by_funcs_user_data"]

	main_context_wakeup: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_wakeup"]

	main_context_acquire: make routine! compose/deep [[
		context [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_context_acquire"]

	main_context_release: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_release"]

	main_context_is_owner: make routine! compose/deep [[
		context [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_context_is_owner"]

	main_context_wait: make routine! compose/deep [[
		context [pointer]
		cond [pointer]
		mutex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_context_wait"]

	main_context_prepare: make routine! compose/deep [[
		context [pointer]
		priority [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_context_prepare"]

	main_context_query: make routine! compose/deep [[
		context [pointer]
		max_priority [int32]
		timeout_ [pointer]
		fds [pointer]
		n_fds [int32]
		return: [int32]
		abi: default
	] (glib) "g_main_context_query"]

	main_context_check: make routine! compose/deep [[
		context [pointer]
		max_priority [int32]
		fds [pointer]
		n_fds [int32]
		return: [int32]
		abi: default
	] (glib) "g_main_context_check"]

	main_context_dispatch: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_dispatch"]

	main_context_set_poll_func: make routine! compose/deep [[
		context [pointer]
		func [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_set_poll_func"]

	main_context_get_poll_func: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_context_get_poll_func"]

	main_context_add_poll: make routine! compose/deep [[
		context [pointer]
		fd [pointer]
		priority [int32]
		return: [void]
		abi: default
	] (glib) "g_main_context_add_poll"]

	main_context_remove_poll: make routine! compose/deep [[
		context [pointer]
		fd [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_remove_poll"]

	main_depth: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_main_depth"]

	main_current_source: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_main_current_source"]

	main_context_push_thread_default: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_push_thread_default"]

	main_context_pop_thread_default: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_pop_thread_default"]

	main_context_get_thread_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_main_context_get_thread_default"]

	main_context_ref_thread_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_main_context_ref_thread_default"]

	main_loop_new: make routine! compose/deep [[
		context [pointer]
		is_running [int32]
		return: [pointer]
		abi: default
	] (glib) "g_main_loop_new"]

	main_loop_run: make routine! compose/deep [[
		loop [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_loop_run"]

	main_loop_quit: make routine! compose/deep [[
		loop [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_loop_quit"]

	main_loop_ref: make routine! compose/deep [[
		loop [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_loop_ref"]

	main_loop_unref: make routine! compose/deep [[
		loop [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_loop_unref"]

	main_loop_is_running: make routine! compose/deep [[
		loop [pointer]
		return: [int32]
		abi: default
	] (glib) "g_main_loop_is_running"]

	main_loop_get_context: make routine! compose/deep [[
		loop [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_main_loop_get_context"]

	source_new: make routine! compose/deep [[
		source_funcs [pointer]
		struct_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_source_new"]

	source_ref: make routine! compose/deep [[
		source [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_source_ref"]

	source_unref: make routine! compose/deep [[
		source [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_unref"]

	source_attach: make routine! compose/deep [[
		source [pointer]
		context [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_source_attach"]

	source_destroy: make routine! compose/deep [[
		source [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_destroy"]

	source_set_priority: make routine! compose/deep [[
		source [pointer]
		priority [int32]
		return: [void]
		abi: default
	] (glib) "g_source_set_priority"]

	source_get_priority: make routine! compose/deep [[
		source [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_get_priority"]

	source_set_can_recurse: make routine! compose/deep [[
		source [pointer]
		can_recurse [int32]
		return: [void]
		abi: default
	] (glib) "g_source_set_can_recurse"]

	source_get_can_recurse: make routine! compose/deep [[
		source [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_get_can_recurse"]

	source_get_id: make routine! compose/deep [[
		source [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_source_get_id"]

	source_get_context: make routine! compose/deep [[
		source [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_source_get_context"]

	source_set_callback: make routine! compose/deep [[
		source [pointer]
		func [pointer]
		data [pointer]
		notify [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_set_callback"]

	source_set_funcs: make routine! compose/deep [[
		source [pointer]
		funcs [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_set_funcs"]

	source_is_destroyed: make routine! compose/deep [[
		source [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_is_destroyed"]

	source_set_name: make routine! compose/deep [[
		source [pointer]
		name [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_set_name"]

	source_get_name: make routine! compose/deep [[
		source [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_source_get_name"]

	source_set_name_by_id: make routine! compose/deep [[
		tag [uint32]
		name [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_set_name_by_id"]

	source_set_ready_time: make routine! compose/deep [[
		source [pointer]
		ready_time [int64]
		return: [void]
		abi: default
	] (glib) "g_source_set_ready_time"]

	source_get_ready_time: make routine! compose/deep [[
		source [pointer]
		return: [int64]
		abi: default
	] (glib) "g_source_get_ready_time"]

	source_add_unix_fd: make routine! compose/deep [[
		source [pointer]
		fd [int32]
		events [int32]
		return: [pointer]
		abi: default
	] (glib) "g_source_add_unix_fd"]

	source_modify_unix_fd: make routine! compose/deep [[
		source [pointer]
		tag [pointer]
		new_events [int32]
		return: [void]
		abi: default
	] (glib) "g_source_modify_unix_fd"]

	source_remove_unix_fd: make routine! compose/deep [[
		source [pointer]
		tag [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_remove_unix_fd"]

	source_query_unix_fd: make routine! compose/deep [[
		source [pointer]
		tag [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_query_unix_fd"]

	source_set_callback_indirect: make routine! compose/deep [[
		source [pointer]
		callback_data [pointer]
		callback_funcs [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_set_callback_indirect"]

	source_add_poll: make routine! compose/deep [[
		source [pointer]
		fd [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_add_poll"]

	source_remove_poll: make routine! compose/deep [[
		source [pointer]
		fd [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_remove_poll"]

	source_add_child_source: make routine! compose/deep [[
		source [pointer]
		child_source [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_add_child_source"]

	source_remove_child_source: make routine! compose/deep [[
		source [pointer]
		child_source [pointer]
		return: [void]
		abi: default
	] (glib) "g_source_remove_child_source"]

	source_get_time: make routine! compose/deep [[
		source [pointer]
		return: [int64]
		abi: default
	] (glib) "g_source_get_time"]

	idle_source_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_idle_source_new"]

	child_watch_source_new: make routine! compose/deep [[
		pid [int32]
		return: [pointer]
		abi: default
	] (glib) "g_child_watch_source_new"]

	timeout_source_new: make routine! compose/deep [[
		interval [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_timeout_source_new"]

	timeout_source_new_seconds: make routine! compose/deep [[
		interval [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_timeout_source_new_seconds"]

	get_current_time: make routine! compose/deep [[
		result [pointer]
		return: [void]
		abi: default
	] (glib) "g_get_current_time"]

	get_monotonic_time: make routine! compose/deep [[
		return: [int64]
		abi: default
	] (glib) "g_get_monotonic_time"]

	get_real_time: make routine! compose/deep [[
		return: [int64]
		abi: default
	] (glib) "g_get_real_time"]

	source_remove: make routine! compose/deep [[
		tag [uint32]
		return: [int32]
		abi: default
	] (glib) "g_source_remove"]

	source_remove_by_user_data: make routine! compose/deep [[
		user_data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_remove_by_user_data"]

	source_remove_by_funcs_user_data: make routine! compose/deep [[
		funcs [pointer]
		user_data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_source_remove_by_funcs_user_data"]

	timeout_add_full: make routine! compose/deep [[
		priority [int32]
		interval [uint32]
		function [pointer]
		data [pointer]
		notify [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_timeout_add_full"]

	timeout_add: make routine! compose/deep [[
		interval [uint32]
		function [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_timeout_add"]

	timeout_add_seconds_full: make routine! compose/deep [[
		priority [int32]
		interval [uint32]
		function [pointer]
		data [pointer]
		notify [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_timeout_add_seconds_full"]

	timeout_add_seconds: make routine! compose/deep [[
		interval [uint32]
		function [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_timeout_add_seconds"]

	child_watch_add_full: make routine! compose/deep [[
		priority [int32]
		pid [int32]
		function [pointer]
		data [pointer]
		notify [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_child_watch_add_full"]

	child_watch_add: make routine! compose/deep [[
		pid [int32]
		function [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_child_watch_add"]

	idle_add: make routine! compose/deep [[
		function [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_idle_add"]

	idle_add_full: make routine! compose/deep [[
		priority [int32]
		function [pointer]
		data [pointer]
		notify [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_idle_add_full"]

	idle_remove_by_data: make routine! compose/deep [[
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_idle_remove_by_data"]

	main_context_invoke_full: make routine! compose/deep [[
		context [pointer]
		priority [int32]
		function [pointer]
		data [pointer]
		notify [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_invoke_full"]

	main_context_invoke: make routine! compose/deep [[
		context [pointer]
		function [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_main_context_invoke"]

	unicode_script_to_iso15924: make routine! compose/deep [[
		script [int32]
		return: [uint32]
		abi: default
	] (glib) "g_unicode_script_to_iso15924"]

	unicode_script_from_iso15924: make routine! compose/deep [[
		iso15924 [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unicode_script_from_iso15924"]

	unichar_isalnum: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isalnum"]

	unichar_isalpha: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isalpha"]

	unichar_iscntrl: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_iscntrl"]

	unichar_isdigit: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isdigit"]

	unichar_isgraph: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isgraph"]

	unichar_islower: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_islower"]

	unichar_isprint: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isprint"]

	unichar_ispunct: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_ispunct"]

	unichar_isspace: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isspace"]

	unichar_isupper: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isupper"]

	unichar_isxdigit: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isxdigit"]

	unichar_istitle: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_istitle"]

	unichar_isdefined: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_isdefined"]

	unichar_iswide: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_iswide"]

	unichar_iswide_cjk: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_iswide_cjk"]

	unichar_iszerowidth: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_iszerowidth"]

	unichar_ismark: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_ismark"]

	unichar_toupper: make routine! compose/deep [[
		c [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_unichar_toupper"]

	unichar_tolower: make routine! compose/deep [[
		c [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_unichar_tolower"]

	unichar_totitle: make routine! compose/deep [[
		c [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_unichar_totitle"]

	unichar_digit_value: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_digit_value"]

	unichar_xdigit_value: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_xdigit_value"]

	unichar_type: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_type"]

	unichar_break_type: make routine! compose/deep [[
		c [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_break_type"]

	unichar_combining_class: make routine! compose/deep [[
		uc [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_combining_class"]

	unichar_get_mirror_char: make routine! compose/deep [[
		ch [uint32]
		mirrored_ch [pointer]
		return: [int32]
		abi: default
	] (glib) "g_unichar_get_mirror_char"]

	unichar_get_script: make routine! compose/deep [[
		ch [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_get_script"]

	unichar_validate: make routine! compose/deep [[
		ch [uint32]
		return: [int32]
		abi: default
	] (glib) "g_unichar_validate"]

	unichar_compose: make routine! compose/deep [[
		a [uint32]
		b [uint32]
		ch [pointer]
		return: [int32]
		abi: default
	] (glib) "g_unichar_compose"]

	unichar_decompose: make routine! compose/deep [[
		ch [uint32]
		a [pointer]
		b [pointer]
		return: [int32]
		abi: default
	] (glib) "g_unichar_decompose"]

	unichar_fully_decompose: make routine! compose/deep [[
		ch [uint32]
		compat [int32]
		result [pointer]
		result_len [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_unichar_fully_decompose"]

	unicode_canonical_ordering: make routine! compose/deep [[
		string [pointer]
		len [uint64]
		return: [void]
		abi: default
	] (glib) "g_unicode_canonical_ordering"]

	utf8_get_char: make routine! compose/deep [[
		p [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_utf8_get_char"]

	utf8_get_char_validated: make routine! compose/deep [[
		p [pointer]
		max_len [int64]
		return: [uint32]
		abi: default
	] (glib) "g_utf8_get_char_validated"]

	utf8_offset_to_pointer: make routine! compose/deep [[
		str [pointer]
		offset [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_offset_to_pointer"]

	utf8_pointer_to_offset: make routine! compose/deep [[
		str [pointer]
		pos [pointer]
		return: [int64]
		abi: default
	] (glib) "g_utf8_pointer_to_offset"]

	utf8_prev_char: make routine! compose/deep [[
		p [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_prev_char"]

	utf8_find_next_char: make routine! compose/deep [[
		p [pointer]
		end [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_find_next_char"]

	utf8_find_prev_char: make routine! compose/deep [[
		str [pointer]
		p [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_find_prev_char"]

	utf8_strlen: make routine! compose/deep [[
		p [pointer]
		max [int64]
		return: [int64]
		abi: default
	] (glib) "g_utf8_strlen"]

	utf8_substring: make routine! compose/deep [[
		str [pointer]
		start_pos [int64]
		end_pos [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_substring"]

	utf8_strncpy: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		n [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strncpy"]

	utf8_strchr: make routine! compose/deep [[
		p [pointer]
		len [int64]
		c [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strchr"]

	utf8_strrchr: make routine! compose/deep [[
		p [pointer]
		len [int64]
		c [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strrchr"]

	utf8_strreverse: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strreverse"]

	utf8_to_utf16: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_to_utf16"]

	utf8_to_ucs4: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_to_ucs4"]

	utf8_to_ucs4_fast: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_written [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_to_ucs4_fast"]

	utf16_to_ucs4: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf16_to_ucs4"]

	utf16_to_utf8: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_utf16_to_utf8"]

	ucs4_to_utf16: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_ucs4_to_utf16"]

	ucs4_to_utf8: make routine! compose/deep [[
		str [pointer]
		len [int64]
		items_read [pointer]
		items_written [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_ucs4_to_utf8"]

	unichar_to_utf8: make routine! compose/deep [[
		c [uint32]
		outbuf [pointer]
		return: [int32]
		abi: default
	] (glib) "g_unichar_to_utf8"]

	utf8_validate: make routine! compose/deep [[
		str [pointer]
		max_len [int64]
		end [pointer]
		return: [int32]
		abi: default
	] (glib) "g_utf8_validate"]

	utf8_strup: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strup"]

	utf8_strdown: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_strdown"]

	utf8_casefold: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_casefold"]

	utf8_normalize: make routine! compose/deep [[
		str [pointer]
		len [int64]
		mode [int32]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_normalize"]

	utf8_collate: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_utf8_collate"]

	utf8_collate_key: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_collate_key"]

	utf8_collate_key_for_filename: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_utf8_collate_key_for_filename"]

	get_user_name: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_user_name"]

	get_real_name: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_real_name"]

	get_home_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_home_dir"]

	get_tmp_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_tmp_dir"]

	get_host_name: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_host_name"]

	get_prgname: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_prgname"]

	set_prgname: make routine! compose/deep [[
		prgname [pointer]
		return: [void]
		abi: default
	] (glib) "g_set_prgname"]

	get_application_name: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_application_name"]

	set_application_name: make routine! compose/deep [[
		application_name [pointer]
		return: [void]
		abi: default
	] (glib) "g_set_application_name"]

	reload_user_special_dirs_cache: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_reload_user_special_dirs_cache"]

	get_user_data_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_user_data_dir"]

	get_user_config_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_user_config_dir"]

	get_user_cache_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_user_cache_dir"]

	get_system_data_dirs: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_system_data_dirs"]

	get_system_config_dirs: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_system_config_dirs"]

	get_user_runtime_dir: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_get_user_runtime_dir"]

	get_user_special_dir: make routine! compose/deep [[
		directory [int32]
		return: [pointer]
		abi: default
	] (glib) "g_get_user_special_dir"]

	parse_debug_string: make routine! compose/deep [[
		string [pointer]
		keys [pointer]
		nkeys [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_parse_debug_string"]

	snprintf: make routine! compose/deep [[
		string [pointer]
		n [uint64]
		format [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_snprintf"]

	vsnprintf: make routine! compose/deep [[
		string [pointer]
		n [uint64]
		format [pointer]
		args [int32]
		return: [int32]
		abi: default
	] (glib) "g_vsnprintf"]

	nullify_pointer: make routine! compose/deep [[
		nullify_location [pointer]
		return: [void]
		abi: default
	] (glib) "g_nullify_pointer"]

	format_size_full: make routine! compose/deep [[
		size [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (glib) "g_format_size_full"]

	format_size: make routine! compose/deep [[
		size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_format_size"]

	find_program_in_path: make routine! compose/deep [[
		program [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_find_program_in_path"]

	string_new: make routine! compose/deep [[
		init [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_new"]

	string_new_len: make routine! compose/deep [[
		init [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_new_len"]

	string_sized_new: make routine! compose/deep [[
		dfl_size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_string_sized_new"]

	string_free: make routine! compose/deep [[
		string [pointer]
		free_segment [int32]
		return: [pointer]
		abi: default
	] (glib) "g_string_free"]

	string_free_to_bytes: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_free_to_bytes"]

	string_equal: make routine! compose/deep [[
		v [pointer]
		v2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_string_equal"]

	string_hash: make routine! compose/deep [[
		str [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_string_hash"]

	string_assign: make routine! compose/deep [[
		string [pointer]
		rval [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_assign"]

	string_truncate: make routine! compose/deep [[
		string [pointer]
		len [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_string_truncate"]

	string_set_size: make routine! compose/deep [[
		string [pointer]
		len [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_string_set_size"]

	string_insert_len: make routine! compose/deep [[
		string [pointer]
		pos [int64]
		val [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_insert_len"]

	string_append: make routine! compose/deep [[
		string [pointer]
		val [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_append"]

	string_append_len: make routine! compose/deep [[
		string [pointer]
		val [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_append_len"]

	string_append_c: make routine! compose/deep [[
		string [pointer]
		c [int8]
		return: [pointer]
		abi: default
	] (glib) "g_string_append_c"]

	string_append_unichar: make routine! compose/deep [[
		string [pointer]
		wc [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_string_append_unichar"]

	string_prepend: make routine! compose/deep [[
		string [pointer]
		val [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_prepend"]

	string_prepend_c: make routine! compose/deep [[
		string [pointer]
		c [int8]
		return: [pointer]
		abi: default
	] (glib) "g_string_prepend_c"]

	string_prepend_unichar: make routine! compose/deep [[
		string [pointer]
		wc [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_string_prepend_unichar"]

	string_prepend_len: make routine! compose/deep [[
		string [pointer]
		val [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_prepend_len"]

	string_insert: make routine! compose/deep [[
		string [pointer]
		pos [int64]
		val [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_insert"]

	string_insert_c: make routine! compose/deep [[
		string [pointer]
		pos [int64]
		c [int8]
		return: [pointer]
		abi: default
	] (glib) "g_string_insert_c"]

	string_insert_unichar: make routine! compose/deep [[
		string [pointer]
		pos [int64]
		wc [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_string_insert_unichar"]

	string_overwrite: make routine! compose/deep [[
		string [pointer]
		pos [uint64]
		val [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_overwrite"]

	string_overwrite_len: make routine! compose/deep [[
		string [pointer]
		pos [uint64]
		val [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_overwrite_len"]

	string_erase: make routine! compose/deep [[
		string [pointer]
		pos [int64]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_erase"]

	string_ascii_down: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_ascii_down"]

	string_ascii_up: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_ascii_up"]

	string_vprintf: make routine! compose/deep [[
		string [pointer]
		format [pointer]
		args [int32]
		return: [void]
		abi: default
	] (glib) "g_string_vprintf"]

	string_printf: make routine! compose/deep [[
		string [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_string_printf"]

	string_append_vprintf: make routine! compose/deep [[
		string [pointer]
		format [pointer]
		args [int32]
		return: [void]
		abi: default
	] (glib) "g_string_append_vprintf"]

	string_append_printf: make routine! compose/deep [[
		string [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_string_append_printf"]

	string_append_uri_escaped: make routine! compose/deep [[
		string [pointer]
		unescaped [pointer]
		reserved_chars_allowed [pointer]
		allow_utf8 [int32]
		return: [pointer]
		abi: default
	] (glib) "g_string_append_uri_escaped"]

	io_channel_init: make routine! compose/deep [[
		channel [pointer]
		return: [void]
		abi: default
	] (glib) "g_io_channel_init"]

	io_channel_ref: make routine! compose/deep [[
		channel [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_io_channel_ref"]

	io_channel_unref: make routine! compose/deep [[
		channel [pointer]
		return: [void]
		abi: default
	] (glib) "g_io_channel_unref"]

	io_channel_shutdown: make routine! compose/deep [[
		channel [pointer]
		flush [int32]
		err [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_shutdown"]

	io_add_watch_full: make routine! compose/deep [[
		channel [pointer]
		priority [int32]
		condition [int32]
		func [pointer]
		user_data [pointer]
		notify [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_io_add_watch_full"]

	io_create_watch: make routine! compose/deep [[
		channel [pointer]
		condition [int32]
		return: [pointer]
		abi: default
	] (glib) "g_io_create_watch"]

	io_add_watch: make routine! compose/deep [[
		channel [pointer]
		condition [int32]
		func [pointer]
		user_data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_io_add_watch"]

	io_channel_set_buffer_size: make routine! compose/deep [[
		channel [pointer]
		size [uint64]
		return: [void]
		abi: default
	] (glib) "g_io_channel_set_buffer_size"]

	io_channel_get_buffer_size: make routine! compose/deep [[
		channel [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_io_channel_get_buffer_size"]

	io_channel_get_buffer_condition: make routine! compose/deep [[
		channel [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_get_buffer_condition"]

	io_channel_set_flags: make routine! compose/deep [[
		channel [pointer]
		flags [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_set_flags"]

	io_channel_get_flags: make routine! compose/deep [[
		channel [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_get_flags"]

	io_channel_set_line_term: make routine! compose/deep [[
		channel [pointer]
		line_term [pointer]
		length [int32]
		return: [void]
		abi: default
	] (glib) "g_io_channel_set_line_term"]

	io_channel_get_line_term: make routine! compose/deep [[
		channel [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_io_channel_get_line_term"]

	io_channel_set_buffered: make routine! compose/deep [[
		channel [pointer]
		buffered [int32]
		return: [void]
		abi: default
	] (glib) "g_io_channel_set_buffered"]

	io_channel_get_buffered: make routine! compose/deep [[
		channel [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_get_buffered"]

	io_channel_set_encoding: make routine! compose/deep [[
		channel [pointer]
		encoding [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_set_encoding"]

	io_channel_get_encoding: make routine! compose/deep [[
		channel [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_io_channel_get_encoding"]

	io_channel_set_close_on_unref: make routine! compose/deep [[
		channel [pointer]
		do_close [int32]
		return: [void]
		abi: default
	] (glib) "g_io_channel_set_close_on_unref"]

	io_channel_get_close_on_unref: make routine! compose/deep [[
		channel [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_get_close_on_unref"]

	io_channel_flush: make routine! compose/deep [[
		channel [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_flush"]

	io_channel_read_line: make routine! compose/deep [[
		channel [pointer]
		str_return [pointer]
		length [pointer]
		terminator_pos [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_read_line"]

	io_channel_read_line_string: make routine! compose/deep [[
		channel [pointer]
		buffer [pointer]
		terminator_pos [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_read_line_string"]

	io_channel_read_to_end: make routine! compose/deep [[
		channel [pointer]
		str_return [pointer]
		length [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_read_to_end"]

	io_channel_read_chars: make routine! compose/deep [[
		channel [pointer]
		buf [pointer]
		count [uint64]
		bytes_read [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_read_chars"]

	io_channel_read_unichar: make routine! compose/deep [[
		channel [pointer]
		thechar [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_read_unichar"]

	io_channel_write_chars: make routine! compose/deep [[
		channel [pointer]
		buf [pointer]
		count [int64]
		bytes_written [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_write_chars"]

	io_channel_write_unichar: make routine! compose/deep [[
		channel [pointer]
		thechar [uint32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_write_unichar"]

	io_channel_seek_position: make routine! compose/deep [[
		channel [pointer]
		offset [int64]
		type [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_seek_position"]

	io_channel_new_file: make routine! compose/deep [[
		filename [pointer]
		mode [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_io_channel_new_file"]

	io_channel_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_io_channel_error_quark"]

	io_channel_error_from_errno: make routine! compose/deep [[
		en [int32]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_error_from_errno"]

	io_channel_unix_new: make routine! compose/deep [[
		fd [int32]
		return: [pointer]
		abi: default
	] (glib) "g_io_channel_unix_new"]

	io_channel_unix_get_fd: make routine! compose/deep [[
		channel [pointer]
		return: [int32]
		abi: default
	] (glib) "g_io_channel_unix_get_fd"]

	key_file_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_key_file_error_quark"]

	key_file_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_key_file_new"]

	key_file_ref: make routine! compose/deep [[
		key_file [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_ref"]

	key_file_unref: make routine! compose/deep [[
		key_file [pointer]
		return: [void]
		abi: default
	] (glib) "g_key_file_unref"]

	key_file_free: make routine! compose/deep [[
		key_file [pointer]
		return: [void]
		abi: default
	] (glib) "g_key_file_free"]

	key_file_set_list_separator: make routine! compose/deep [[
		key_file [pointer]
		separator [int8]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_list_separator"]

	key_file_load_from_file: make routine! compose/deep [[
		key_file [pointer]
		file [pointer]
		flags [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_load_from_file"]

	key_file_load_from_data: make routine! compose/deep [[
		key_file [pointer]
		data [pointer]
		length [uint64]
		flags [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_load_from_data"]

	key_file_load_from_dirs: make routine! compose/deep [[
		key_file [pointer]
		file [pointer]
		search_dirs [pointer]
		full_path [pointer]
		flags [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_load_from_dirs"]

	key_file_load_from_data_dirs: make routine! compose/deep [[
		key_file [pointer]
		file [pointer]
		full_path [pointer]
		flags [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_load_from_data_dirs"]

	key_file_to_data: make routine! compose/deep [[
		key_file [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_to_data"]

	key_file_save_to_file: make routine! compose/deep [[
		key_file [pointer]
		filename [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_save_to_file"]

	key_file_get_start_group: make routine! compose/deep [[
		key_file [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_start_group"]

	key_file_get_groups: make routine! compose/deep [[
		key_file [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_groups"]

	key_file_get_keys: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_keys"]

	key_file_has_group: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_has_group"]

	key_file_has_key: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_has_key"]

	key_file_get_value: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_value"]

	key_file_set_value: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_value"]

	key_file_get_string: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_string"]

	key_file_set_string: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		string [pointer]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_string"]

	key_file_get_locale_string: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		locale [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_locale_string"]

	key_file_set_locale_string: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		locale [pointer]
		string [pointer]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_locale_string"]

	key_file_get_boolean: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_get_boolean"]

	key_file_set_boolean: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [int32]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_boolean"]

	key_file_get_integer: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_get_integer"]

	key_file_set_integer: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [int32]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_integer"]

	key_file_get_int64: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (glib) "g_key_file_get_int64"]

	key_file_set_int64: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [int64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_int64"]

	key_file_get_uint64: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_key_file_get_uint64"]

	key_file_set_uint64: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_uint64"]

	key_file_get_double: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [double]
		abi: default
	] (glib) "g_key_file_get_double"]

	key_file_set_double: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		value [double]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_double"]

	key_file_get_string_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_string_list"]

	key_file_set_string_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		list [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_string_list"]

	key_file_get_locale_string_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		locale [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_locale_string_list"]

	key_file_set_locale_string_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		locale [pointer]
		list [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_locale_string_list"]

	key_file_get_boolean_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_boolean_list"]

	key_file_set_boolean_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		list [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_boolean_list"]

	key_file_get_integer_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_integer_list"]

	key_file_set_double_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		list [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_double_list"]

	key_file_get_double_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_double_list"]

	key_file_set_integer_list: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		list [pointer]
		length [uint64]
		return: [void]
		abi: default
	] (glib) "g_key_file_set_integer_list"]

	key_file_set_comment: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		comment [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_set_comment"]

	key_file_get_comment: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_key_file_get_comment"]

	key_file_remove_comment: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_remove_comment"]

	key_file_remove_key: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		key [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_remove_key"]

	key_file_remove_group: make routine! compose/deep [[
		key_file [pointer]
		group_name [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_key_file_remove_group"]

	mapped_file_new: make routine! compose/deep [[
		filename [pointer]
		writable [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mapped_file_new"]

	mapped_file_new_from_fd: make routine! compose/deep [[
		fd [int32]
		writable [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mapped_file_new_from_fd"]

	mapped_file_get_length: make routine! compose/deep [[
		file [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_mapped_file_get_length"]

	mapped_file_get_contents: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mapped_file_get_contents"]

	mapped_file_get_bytes: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mapped_file_get_bytes"]

	mapped_file_ref: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_mapped_file_ref"]

	mapped_file_unref: make routine! compose/deep [[
		file [pointer]
		return: [void]
		abi: default
	] (glib) "g_mapped_file_unref"]

	markup_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_markup_error_quark"]

	markup_parse_context_new: make routine! compose/deep [[
		parser [pointer]
		flags [int32]
		user_data [pointer]
		user_data_dnotify [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_new"]

	markup_parse_context_ref: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_ref"]

	markup_parse_context_unref: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_markup_parse_context_unref"]

	markup_parse_context_free: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_markup_parse_context_free"]

	markup_parse_context_parse: make routine! compose/deep [[
		context [pointer]
		text [pointer]
		text_len [int64]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_markup_parse_context_parse"]

	markup_parse_context_push: make routine! compose/deep [[
		context [pointer]
		parser [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_markup_parse_context_push"]

	markup_parse_context_pop: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_pop"]

	markup_parse_context_end_parse: make routine! compose/deep [[
		context [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_markup_parse_context_end_parse"]

	markup_parse_context_get_element: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_get_element"]

	markup_parse_context_get_element_stack: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_get_element_stack"]

	markup_parse_context_get_position: make routine! compose/deep [[
		context [pointer]
		line_number [pointer]
		char_number [pointer]
		return: [void]
		abi: default
	] (glib) "g_markup_parse_context_get_position"]

	markup_parse_context_get_user_data: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_markup_parse_context_get_user_data"]

	markup_escape_text: make routine! compose/deep [[
		text [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_markup_escape_text"]

	markup_printf_escaped: make routine! compose/deep [[
		format [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_markup_printf_escaped"]

	markup_vprintf_escaped: make routine! compose/deep [[
		format [pointer]
		args [int32]
		return: [pointer]
		abi: default
	] (glib) "g_markup_vprintf_escaped"]

	markup_collect_attributes: make routine! compose/deep [[
		element_name [pointer]
		attribute_names [pointer]
		attribute_values [pointer]
		error [pointer]
		first_type [int32]
		first_attr [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_markup_collect_attributes"]

	printf_string_upper_bound: make routine! compose/deep [[
		format [pointer]
		args [int32]
		return: [uint64]
		abi: default
	] (glib) "g_printf_string_upper_bound"]

	log_set_handler: make routine! compose/deep [[
		log_domain [pointer]
		log_levels [int32]
		log_func [pointer]
		user_data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_log_set_handler"]

	log_remove_handler: make routine! compose/deep [[
		log_domain [pointer]
		handler_id [uint32]
		return: [void]
		abi: default
	] (glib) "g_log_remove_handler"]

	log_default_handler: make routine! compose/deep [[
		log_domain [pointer]
		log_level [int32]
		message [pointer]
		unused_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_log_default_handler"]

	log_set_default_handler: make routine! compose/deep [[
		log_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_log_set_default_handler"]

	log: make routine! compose/deep [[
		log_domain [pointer]
		log_level [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_log"]

	logv: make routine! compose/deep [[
		log_domain [pointer]
		log_level [int32]
		format [pointer]
		args [int32]
		return: [void]
		abi: default
	] (glib) "g_logv"]

	log_set_fatal_mask: make routine! compose/deep [[
		log_domain [pointer]
		fatal_mask [int32]
		return: [int32]
		abi: default
	] (glib) "g_log_set_fatal_mask"]

	log_set_always_fatal: make routine! compose/deep [[
		fatal_mask [int32]
		return: [int32]
		abi: default
	] (glib) "g_log_set_always_fatal"]

	return_if_fail_warning: make routine! compose/deep [[
		log_domain [pointer]
		pretty_function [pointer]
		expression [pointer]
		return: [void]
		abi: default
	] (glib) "g_return_if_fail_warning"]

	warn_message: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		warnexpr [pointer]
		return: [void]
		abi: default
	] (glib) "g_warn_message"]

	print: make routine! compose/deep [[
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_print"]

	set_print_handler: make routine! compose/deep [[
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_set_print_handler"]

	printerr: make routine! compose/deep [[
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_printerr"]

	set_printerr_handler: make routine! compose/deep [[
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_set_printerr_handler"]

	option_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_option_error_quark"]

	option_context_new: make routine! compose/deep [[
		parameter_string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_context_new"]

	option_context_set_summary: make routine! compose/deep [[
		context [pointer]
		summary [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_summary"]

	option_context_get_summary: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_context_get_summary"]

	option_context_set_description: make routine! compose/deep [[
		context [pointer]
		description [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_description"]

	option_context_get_description: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_context_get_description"]

	option_context_free: make routine! compose/deep [[
		context [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_free"]

	option_context_set_help_enabled: make routine! compose/deep [[
		context [pointer]
		help_enabled [int32]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_help_enabled"]

	option_context_get_help_enabled: make routine! compose/deep [[
		context [pointer]
		return: [int32]
		abi: default
	] (glib) "g_option_context_get_help_enabled"]

	option_context_set_ignore_unknown_options: make routine! compose/deep [[
		context [pointer]
		ignore_unknown [int32]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_ignore_unknown_options"]

	option_context_get_ignore_unknown_options: make routine! compose/deep [[
		context [pointer]
		return: [int32]
		abi: default
	] (glib) "g_option_context_get_ignore_unknown_options"]

	option_context_add_main_entries: make routine! compose/deep [[
		context [pointer]
		entries [pointer]
		translation_domain [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_add_main_entries"]

	option_context_parse: make routine! compose/deep [[
		context [pointer]
		argc [pointer]
		argv [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_option_context_parse"]

	option_context_parse_strv: make routine! compose/deep [[
		context [pointer]
		arguments [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_option_context_parse_strv"]

	option_context_set_translate_func: make routine! compose/deep [[
		context [pointer]
		func [pointer]
		data [pointer]
		destroy_notify [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_translate_func"]

	option_context_set_translation_domain: make routine! compose/deep [[
		context [pointer]
		domain [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_translation_domain"]

	option_context_add_group: make routine! compose/deep [[
		context [pointer]
		group [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_add_group"]

	option_context_set_main_group: make routine! compose/deep [[
		context [pointer]
		group [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_context_set_main_group"]

	option_context_get_main_group: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_context_get_main_group"]

	option_context_get_help: make routine! compose/deep [[
		context [pointer]
		main_help [int32]
		group [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_context_get_help"]

	option_group_new: make routine! compose/deep [[
		name [pointer]
		description [pointer]
		help_description [pointer]
		user_data [pointer]
		destroy [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_option_group_new"]

	option_group_set_parse_hooks: make routine! compose/deep [[
		group [pointer]
		pre_parse_func [pointer]
		post_parse_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_set_parse_hooks"]

	option_group_set_error_hook: make routine! compose/deep [[
		group [pointer]
		error_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_set_error_hook"]

	option_group_free: make routine! compose/deep [[
		group [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_free"]

	option_group_add_entries: make routine! compose/deep [[
		group [pointer]
		entries [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_add_entries"]

	option_group_set_translate_func: make routine! compose/deep [[
		group [pointer]
		func [pointer]
		data [pointer]
		destroy_notify [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_set_translate_func"]

	option_group_set_translation_domain: make routine! compose/deep [[
		group [pointer]
		domain [pointer]
		return: [void]
		abi: default
	] (glib) "g_option_group_set_translation_domain"]

	pattern_spec_new: make routine! compose/deep [[
		pattern [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_pattern_spec_new"]

	pattern_spec_free: make routine! compose/deep [[
		pspec [pointer]
		return: [void]
		abi: default
	] (glib) "g_pattern_spec_free"]

	pattern_spec_equal: make routine! compose/deep [[
		pspec1 [pointer]
		pspec2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_pattern_spec_equal"]

	pattern_match: make routine! compose/deep [[
		pspec [pointer]
		string_length [uint32]
		string [pointer]
		string_reversed [pointer]
		return: [int32]
		abi: default
	] (glib) "g_pattern_match"]

	pattern_match_string: make routine! compose/deep [[
		pspec [pointer]
		string [pointer]
		return: [int32]
		abi: default
	] (glib) "g_pattern_match_string"]

	pattern_match_simple: make routine! compose/deep [[
		pattern [pointer]
		string [pointer]
		return: [int32]
		abi: default
	] (glib) "g_pattern_match_simple"]

	spaced_primes_closest: make routine! compose/deep [[
		num [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_spaced_primes_closest"]

	qsort_with_data: make routine! compose/deep [[
		pbase [pointer]
		total_elems [int32]
		size [uint64]
		compare_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_qsort_with_data"]

	queue_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_queue_new"]

	queue_free: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_free"]

	queue_free_full: make routine! compose/deep [[
		queue [pointer]
		free_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_free_full"]

	queue_init: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_init"]

	queue_clear: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_clear"]

	queue_is_empty: make routine! compose/deep [[
		queue [pointer]
		return: [int32]
		abi: default
	] (glib) "g_queue_is_empty"]

	queue_get_length: make routine! compose/deep [[
		queue [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_queue_get_length"]

	queue_reverse: make routine! compose/deep [[
		queue [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_reverse"]

	queue_copy: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_copy"]

	queue_foreach: make routine! compose/deep [[
		queue [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_foreach"]

	queue_find: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_find"]

	queue_find_custom: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_find_custom"]

	queue_sort: make routine! compose/deep [[
		queue [pointer]
		compare_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_sort"]

	queue_push_head: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_push_head"]

	queue_push_tail: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_push_tail"]

	queue_push_nth: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		n [int32]
		return: [void]
		abi: default
	] (glib) "g_queue_push_nth"]

	queue_pop_head: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_head"]

	queue_pop_tail: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_tail"]

	queue_pop_nth: make routine! compose/deep [[
		queue [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_nth"]

	queue_peek_head: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_head"]

	queue_peek_tail: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_tail"]

	queue_peek_nth: make routine! compose/deep [[
		queue [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_nth"]

	queue_index: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_queue_index"]

	queue_remove: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [int32]
		abi: default
	] (glib) "g_queue_remove"]

	queue_remove_all: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_queue_remove_all"]

	queue_insert_before: make routine! compose/deep [[
		queue [pointer]
		sibling [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_insert_before"]

	queue_insert_after: make routine! compose/deep [[
		queue [pointer]
		sibling [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_insert_after"]

	queue_insert_sorted: make routine! compose/deep [[
		queue [pointer]
		data [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_insert_sorted"]

	queue_push_head_link: make routine! compose/deep [[
		queue [pointer]
		link_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_push_head_link"]

	queue_push_tail_link: make routine! compose/deep [[
		queue [pointer]
		link_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_push_tail_link"]

	queue_push_nth_link: make routine! compose/deep [[
		queue [pointer]
		n [int32]
		link_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_push_nth_link"]

	queue_pop_head_link: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_head_link"]

	queue_pop_tail_link: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_tail_link"]

	queue_pop_nth_link: make routine! compose/deep [[
		queue [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_queue_pop_nth_link"]

	queue_peek_head_link: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_head_link"]

	queue_peek_tail_link: make routine! compose/deep [[
		queue [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_tail_link"]

	queue_peek_nth_link: make routine! compose/deep [[
		queue [pointer]
		n [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_queue_peek_nth_link"]

	queue_link_index: make routine! compose/deep [[
		queue [pointer]
		link_ [pointer]
		return: [int32]
		abi: default
	] (glib) "g_queue_link_index"]

	queue_unlink: make routine! compose/deep [[
		queue [pointer]
		link_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_unlink"]

	queue_delete_link: make routine! compose/deep [[
		queue [pointer]
		link_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_queue_delete_link"]

	rand_new_with_seed: make routine! compose/deep [[
		seed [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_rand_new_with_seed"]

	rand_new_with_seed_array: make routine! compose/deep [[
		seed [pointer]
		seed_length [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_rand_new_with_seed_array"]

	rand_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_rand_new"]

	rand_free: make routine! compose/deep [[
		rand_ [pointer]
		return: [void]
		abi: default
	] (glib) "g_rand_free"]

	rand_copy: make routine! compose/deep [[
		rand_ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_rand_copy"]

	rand_set_seed: make routine! compose/deep [[
		rand_ [pointer]
		seed [uint32]
		return: [void]
		abi: default
	] (glib) "g_rand_set_seed"]

	rand_set_seed_array: make routine! compose/deep [[
		rand_ [pointer]
		seed [pointer]
		seed_length [uint32]
		return: [void]
		abi: default
	] (glib) "g_rand_set_seed_array"]

	rand_int: make routine! compose/deep [[
		rand_ [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_rand_int"]

	rand_int_range: make routine! compose/deep [[
		rand_ [pointer]
		begin [int32]
		end [int32]
		return: [int32]
		abi: default
	] (glib) "g_rand_int_range"]

	rand_double: make routine! compose/deep [[
		rand_ [pointer]
		return: [double]
		abi: default
	] (glib) "g_rand_double"]

	rand_double_range: make routine! compose/deep [[
		rand_ [pointer]
		begin [double]
		end [double]
		return: [double]
		abi: default
	] (glib) "g_rand_double_range"]

	random_set_seed: make routine! compose/deep [[
		seed [uint32]
		return: [void]
		abi: default
	] (glib) "g_random_set_seed"]

	random_int: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_random_int"]

	random_int_range: make routine! compose/deep [[
		begin [int32]
		end [int32]
		return: [int32]
		abi: default
	] (glib) "g_random_int_range"]

	random_double: make routine! compose/deep [[
		return: [double]
		abi: default
	] (glib) "g_random_double"]

	random_double_range: make routine! compose/deep [[
		begin [double]
		end [double]
		return: [double]
		abi: default
	] (glib) "g_random_double_range"]

	regex_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_regex_error_quark"]

	regex_new: make routine! compose/deep [[
		pattern [pointer]
		compile_options [int32]
		match_options [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_new"]

	regex_ref: make routine! compose/deep [[
		regex [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_ref"]

	regex_unref: make routine! compose/deep [[
		regex [pointer]
		return: [void]
		abi: default
	] (glib) "g_regex_unref"]

	regex_get_pattern: make routine! compose/deep [[
		regex [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_get_pattern"]

	regex_get_max_backref: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_max_backref"]

	regex_get_capture_count: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_capture_count"]

	regex_get_has_cr_or_lf: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_has_cr_or_lf"]

	regex_get_max_lookbehind: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_max_lookbehind"]

	regex_get_string_number: make routine! compose/deep [[
		regex [pointer]
		name [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_string_number"]

	regex_escape_string: make routine! compose/deep [[
		string [pointer]
		length [int32]
		return: [pointer]
		abi: default
	] (glib) "g_regex_escape_string"]

	regex_escape_nul: make routine! compose/deep [[
		string [pointer]
		length [int32]
		return: [pointer]
		abi: default
	] (glib) "g_regex_escape_nul"]

	regex_get_compile_flags: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_compile_flags"]

	regex_get_match_flags: make routine! compose/deep [[
		regex [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_get_match_flags"]

	regex_match_simple: make routine! compose/deep [[
		pattern [pointer]
		string [pointer]
		compile_options [int32]
		match_options [int32]
		return: [int32]
		abi: default
	] (glib) "g_regex_match_simple"]

	regex_match: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		match_options [int32]
		match_info [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_match"]

	regex_match_full: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		match_options [int32]
		match_info [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_match_full"]

	regex_match_all: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		match_options [int32]
		match_info [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_match_all"]

	regex_match_all_full: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		match_options [int32]
		match_info [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_match_all_full"]

	regex_split_simple: make routine! compose/deep [[
		pattern [pointer]
		string [pointer]
		compile_options [int32]
		match_options [int32]
		return: [pointer]
		abi: default
	] (glib) "g_regex_split_simple"]

	regex_split: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		match_options [int32]
		return: [pointer]
		abi: default
	] (glib) "g_regex_split"]

	regex_split_full: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		match_options [int32]
		max_tokens [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_split_full"]

	regex_replace: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		replacement [pointer]
		match_options [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_replace"]

	regex_replace_literal: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		replacement [pointer]
		match_options [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_replace_literal"]

	regex_replace_eval: make routine! compose/deep [[
		regex [pointer]
		string [pointer]
		string_len [int64]
		start_position [int32]
		match_options [int32]
		eval [pointer]
		user_data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_regex_replace_eval"]

	regex_check_replacement: make routine! compose/deep [[
		replacement [pointer]
		has_references [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_regex_check_replacement"]

	match_info_get_regex: make routine! compose/deep [[
		match_info [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_get_regex"]

	match_info_get_string: make routine! compose/deep [[
		match_info [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_get_string"]

	match_info_ref: make routine! compose/deep [[
		match_info [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_ref"]

	match_info_unref: make routine! compose/deep [[
		match_info [pointer]
		return: [void]
		abi: default
	] (glib) "g_match_info_unref"]

	match_info_free: make routine! compose/deep [[
		match_info [pointer]
		return: [void]
		abi: default
	] (glib) "g_match_info_free"]

	match_info_next: make routine! compose/deep [[
		match_info [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_next"]

	match_info_matches: make routine! compose/deep [[
		match_info [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_matches"]

	match_info_get_match_count: make routine! compose/deep [[
		match_info [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_get_match_count"]

	match_info_is_partial_match: make routine! compose/deep [[
		match_info [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_is_partial_match"]

	match_info_expand_references: make routine! compose/deep [[
		match_info [pointer]
		string_to_expand [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_expand_references"]

	match_info_fetch: make routine! compose/deep [[
		match_info [pointer]
		match_num [int32]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_fetch"]

	match_info_fetch_pos: make routine! compose/deep [[
		match_info [pointer]
		match_num [int32]
		start_pos [pointer]
		end_pos [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_fetch_pos"]

	match_info_fetch_named: make routine! compose/deep [[
		match_info [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_fetch_named"]

	match_info_fetch_named_pos: make routine! compose/deep [[
		match_info [pointer]
		name [pointer]
		start_pos [pointer]
		end_pos [pointer]
		return: [int32]
		abi: default
	] (glib) "g_match_info_fetch_named_pos"]

	match_info_fetch_all: make routine! compose/deep [[
		match_info [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_match_info_fetch_all"]

	scanner_new: make routine! compose/deep [[
		config_templ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_scanner_new"]

	scanner_destroy: make routine! compose/deep [[
		scanner [pointer]
		return: [void]
		abi: default
	] (glib) "g_scanner_destroy"]

	scanner_input_file: make routine! compose/deep [[
		scanner [pointer]
		input_fd [int32]
		return: [void]
		abi: default
	] (glib) "g_scanner_input_file"]

	scanner_sync_file_offset: make routine! compose/deep [[
		scanner [pointer]
		return: [void]
		abi: default
	] (glib) "g_scanner_sync_file_offset"]

	scanner_input_text: make routine! compose/deep [[
		scanner [pointer]
		text [pointer]
		text_len [uint32]
		return: [void]
		abi: default
	] (glib) "g_scanner_input_text"]

	scanner_get_next_token: make routine! compose/deep [[
		scanner [pointer]
		return: [int32]
		abi: default
	] (glib) "g_scanner_get_next_token"]

	scanner_peek_next_token: make routine! compose/deep [[
		scanner [pointer]
		return: [int32]
		abi: default
	] (glib) "g_scanner_peek_next_token"]

	scanner_cur_token: make routine! compose/deep [[
		scanner [pointer]
		return: [int32]
		abi: default
	] (glib) "g_scanner_cur_token"]

	scanner_cur_value: make routine! compose/deep [[
		scanner [pointer]
		return: [(_GTokenValue)]
		abi: default
	] (glib) "g_scanner_cur_value"]

	scanner_cur_line: make routine! compose/deep [[
		scanner [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_scanner_cur_line"]

	scanner_cur_position: make routine! compose/deep [[
		scanner [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_scanner_cur_position"]

	scanner_eof: make routine! compose/deep [[
		scanner [pointer]
		return: [int32]
		abi: default
	] (glib) "g_scanner_eof"]

	scanner_set_scope: make routine! compose/deep [[
		scanner [pointer]
		scope_id [uint32]
		return: [uint32]
		abi: default
	] (glib) "g_scanner_set_scope"]

	scanner_scope_add_symbol: make routine! compose/deep [[
		scanner [pointer]
		scope_id [uint32]
		symbol [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_scanner_scope_add_symbol"]

	scanner_scope_remove_symbol: make routine! compose/deep [[
		scanner [pointer]
		scope_id [uint32]
		symbol [pointer]
		return: [void]
		abi: default
	] (glib) "g_scanner_scope_remove_symbol"]

	scanner_scope_lookup_symbol: make routine! compose/deep [[
		scanner [pointer]
		scope_id [uint32]
		symbol [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_scanner_scope_lookup_symbol"]

	scanner_scope_foreach_symbol: make routine! compose/deep [[
		scanner [pointer]
		scope_id [uint32]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_scanner_scope_foreach_symbol"]

	scanner_lookup_symbol: make routine! compose/deep [[
		scanner [pointer]
		symbol [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_scanner_lookup_symbol"]

	scanner_unexp_token: make routine! compose/deep [[
		scanner [pointer]
		expected_token [int32]
		identifier_spec [pointer]
		symbol_spec [pointer]
		symbol_name [pointer]
		message [pointer]
		is_error [int32]
		return: [void]
		abi: default
	] (glib) "g_scanner_unexp_token"]

	scanner_error: make routine! compose/deep [[
		scanner [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_scanner_error"]

	scanner_warn: make routine! compose/deep [[
		scanner [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_scanner_warn"]

	sequence_new: make routine! compose/deep [[
		data_destroy [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_new"]

	sequence_free: make routine! compose/deep [[
		seq [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_free"]

	sequence_get_length: make routine! compose/deep [[
		seq [pointer]
		return: [int32]
		abi: default
	] (glib) "g_sequence_get_length"]

	sequence_foreach: make routine! compose/deep [[
		seq [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_foreach"]

	sequence_foreach_range: make routine! compose/deep [[
		begin [pointer]
		end [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_foreach_range"]

	sequence_sort: make routine! compose/deep [[
		seq [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_sort"]

	sequence_sort_iter: make routine! compose/deep [[
		seq [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_sort_iter"]

	sequence_get_begin_iter: make routine! compose/deep [[
		seq [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_get_begin_iter"]

	sequence_get_end_iter: make routine! compose/deep [[
		seq [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_get_end_iter"]

	sequence_get_iter_at_pos: make routine! compose/deep [[
		seq [pointer]
		pos [int32]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_get_iter_at_pos"]

	sequence_append: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_append"]

	sequence_prepend: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_prepend"]

	sequence_insert_before: make routine! compose/deep [[
		iter [pointer]
		data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_insert_before"]

	sequence_move: make routine! compose/deep [[
		src [pointer]
		dest [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_move"]

	sequence_swap: make routine! compose/deep [[
		a [pointer]
		b [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_swap"]

	sequence_insert_sorted: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_insert_sorted"]

	sequence_insert_sorted_iter: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		iter_cmp [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_insert_sorted_iter"]

	sequence_sort_changed: make routine! compose/deep [[
		iter [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_sort_changed"]

	sequence_sort_changed_iter: make routine! compose/deep [[
		iter [pointer]
		iter_cmp [pointer]
		cmp_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_sort_changed_iter"]

	sequence_remove: make routine! compose/deep [[
		iter [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_remove"]

	sequence_remove_range: make routine! compose/deep [[
		begin [pointer]
		end [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_remove_range"]

	sequence_move_range: make routine! compose/deep [[
		dest [pointer]
		begin [pointer]
		end [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_move_range"]

	sequence_search: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_search"]

	sequence_search_iter: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		iter_cmp [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_search_iter"]

	sequence_lookup: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		cmp_func [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_lookup"]

	sequence_lookup_iter: make routine! compose/deep [[
		seq [pointer]
		data [pointer]
		iter_cmp [pointer]
		cmp_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_lookup_iter"]

	sequence_get: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_get"]

	sequence_set: make routine! compose/deep [[
		iter [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_sequence_set"]

	sequence_iter_is_begin: make routine! compose/deep [[
		iter [pointer]
		return: [int32]
		abi: default
	] (glib) "g_sequence_iter_is_begin"]

	sequence_iter_is_end: make routine! compose/deep [[
		iter [pointer]
		return: [int32]
		abi: default
	] (glib) "g_sequence_iter_is_end"]

	sequence_iter_next: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_iter_next"]

	sequence_iter_prev: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_iter_prev"]

	sequence_iter_get_position: make routine! compose/deep [[
		iter [pointer]
		return: [int32]
		abi: default
	] (glib) "g_sequence_iter_get_position"]

	sequence_iter_move: make routine! compose/deep [[
		iter [pointer]
		delta [int32]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_iter_move"]

	sequence_iter_get_sequence: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_iter_get_sequence"]

	sequence_iter_compare: make routine! compose/deep [[
		a [pointer]
		b [pointer]
		return: [int32]
		abi: default
	] (glib) "g_sequence_iter_compare"]

	sequence_range_get_midpoint: make routine! compose/deep [[
		begin [pointer]
		end [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_sequence_range_get_midpoint"]

	shell_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_shell_error_quark"]

	shell_quote: make routine! compose/deep [[
		unquoted_string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_shell_quote"]

	shell_unquote: make routine! compose/deep [[
		quoted_string [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_shell_unquote"]

	shell_parse_argv: make routine! compose/deep [[
		command_line [pointer]
		argcp [pointer]
		argvp [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_shell_parse_argv"]

	slice_alloc: make routine! compose/deep [[
		block_size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_slice_alloc"]

	slice_alloc0: make routine! compose/deep [[
		block_size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_slice_alloc0"]

	slice_copy: make routine! compose/deep [[
		block_size [uint64]
		mem_block [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_slice_copy"]

	slice_free1: make routine! compose/deep [[
		block_size [uint64]
		mem_block [pointer]
		return: [void]
		abi: default
	] (glib) "g_slice_free1"]

	slice_free_chain_with_offset: make routine! compose/deep [[
		block_size [uint64]
		mem_chain [pointer]
		next_offset [uint64]
		return: [void]
		abi: default
	] (glib) "g_slice_free_chain_with_offset"]

	spawn_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_spawn_error_quark"]

	spawn_exit_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_spawn_exit_error_quark"]

	spawn_async: make routine! compose/deep [[
		working_directory [pointer]
		argv [pointer]
		envp [pointer]
		flags [int32]
		child_setup [pointer]
		user_data [pointer]
		child_pid [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_async"]

	spawn_async_with_pipes: make routine! compose/deep [[
		working_directory [pointer]
		argv [pointer]
		envp [pointer]
		flags [int32]
		child_setup [pointer]
		user_data [pointer]
		child_pid [pointer]
		standard_input [pointer]
		standard_output [pointer]
		standard_error [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_async_with_pipes"]

	spawn_sync: make routine! compose/deep [[
		working_directory [pointer]
		argv [pointer]
		envp [pointer]
		flags [int32]
		child_setup [pointer]
		user_data [pointer]
		standard_output [pointer]
		standard_error [pointer]
		exit_status [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_sync"]

	spawn_command_line_sync: make routine! compose/deep [[
		command_line [pointer]
		standard_output [pointer]
		standard_error [pointer]
		exit_status [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_command_line_sync"]

	spawn_command_line_async: make routine! compose/deep [[
		command_line [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_command_line_async"]

	spawn_check_exit_status: make routine! compose/deep [[
		exit_status [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_spawn_check_exit_status"]

	spawn_close_pid: make routine! compose/deep [[
		pid [int32]
		return: [void]
		abi: default
	] (glib) "g_spawn_close_pid"]

	ascii_tolower: make routine! compose/deep [[
		c [int8]
		return: [int8]
		abi: default
	] (glib) "g_ascii_tolower"]

	ascii_toupper: make routine! compose/deep [[
		c [int8]
		return: [int8]
		abi: default
	] (glib) "g_ascii_toupper"]

	ascii_digit_value: make routine! compose/deep [[
		c [int8]
		return: [int32]
		abi: default
	] (glib) "g_ascii_digit_value"]

	ascii_xdigit_value: make routine! compose/deep [[
		c [int8]
		return: [int32]
		abi: default
	] (glib) "g_ascii_xdigit_value"]

	strdelimit: make routine! compose/deep [[
		string [pointer]
		delimiters [pointer]
		new_delimiter [int8]
		return: [pointer]
		abi: default
	] (glib) "g_strdelimit"]

	strcanon: make routine! compose/deep [[
		string [pointer]
		valid_chars [pointer]
		substitutor [int8]
		return: [pointer]
		abi: default
	] (glib) "g_strcanon"]

	strerror: make routine! compose/deep [[
		errnum [int32]
		return: [pointer]
		abi: default
	] (glib) "g_strerror"]

	strsignal: make routine! compose/deep [[
		signum [int32]
		return: [pointer]
		abi: default
	] (glib) "g_strsignal"]

	strreverse: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strreverse"]

	strlcpy: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		dest_size [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_strlcpy"]

	strlcat: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		dest_size [uint64]
		return: [uint64]
		abi: default
	] (glib) "g_strlcat"]

	strstr_len: make routine! compose/deep [[
		haystack [pointer]
		haystack_len [int64]
		needle [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strstr_len"]

	strrstr: make routine! compose/deep [[
		haystack [pointer]
		needle [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strrstr"]

	strrstr_len: make routine! compose/deep [[
		haystack [pointer]
		haystack_len [int64]
		needle [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strrstr_len"]

	str_has_suffix: make routine! compose/deep [[
		str [pointer]
		suffix [pointer]
		return: [int32]
		abi: default
	] (glib) "g_str_has_suffix"]

	str_has_prefix: make routine! compose/deep [[
		str [pointer]
		prefix [pointer]
		return: [int32]
		abi: default
	] (glib) "g_str_has_prefix"]

	strtod: make routine! compose/deep [[
		nptr [pointer]
		endptr [pointer]
		return: [double]
		abi: default
	] (glib) "g_strtod"]

	ascii_strtod: make routine! compose/deep [[
		nptr [pointer]
		endptr [pointer]
		return: [double]
		abi: default
	] (glib) "g_ascii_strtod"]

	ascii_strtoull: make routine! compose/deep [[
		nptr [pointer]
		endptr [pointer]
		base [uint32]
		return: [uint64]
		abi: default
	] (glib) "g_ascii_strtoull"]

	ascii_strtoll: make routine! compose/deep [[
		nptr [pointer]
		endptr [pointer]
		base [uint32]
		return: [int64]
		abi: default
	] (glib) "g_ascii_strtoll"]

	ascii_dtostr: make routine! compose/deep [[
		buffer [pointer]
		buf_len [int32]
		d [double]
		return: [pointer]
		abi: default
	] (glib) "g_ascii_dtostr"]

	ascii_formatd: make routine! compose/deep [[
		buffer [pointer]
		buf_len [int32]
		format [pointer]
		d [double]
		return: [pointer]
		abi: default
	] (glib) "g_ascii_formatd"]

	strchug: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strchug"]

	strchomp: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strchomp"]

	ascii_strcasecmp: make routine! compose/deep [[
		s1 [pointer]
		s2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_ascii_strcasecmp"]

	ascii_strncasecmp: make routine! compose/deep [[
		s1 [pointer]
		s2 [pointer]
		n [uint64]
		return: [int32]
		abi: default
	] (glib) "g_ascii_strncasecmp"]

	ascii_strdown: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_ascii_strdown"]

	ascii_strup: make routine! compose/deep [[
		str [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_ascii_strup"]

	str_is_ascii: make routine! compose/deep [[
		str [pointer]
		return: [int32]
		abi: default
	] (glib) "g_str_is_ascii"]

	strdup: make routine! compose/deep [[
		str [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strdup"]

	strdup_printf: make routine! compose/deep [[
		format [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_strdup_printf"]

	strdup_vprintf: make routine! compose/deep [[
		format [pointer]
		args [int32]
		return: [pointer]
		abi: default
	] (glib) "g_strdup_vprintf"]

	strndup: make routine! compose/deep [[
		str [pointer]
		n [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_strndup"]

	strnfill: make routine! compose/deep [[
		length [uint64]
		fill_char [int8]
		return: [pointer]
		abi: default
	] (glib) "g_strnfill"]

	strconcat: make routine! compose/deep [[
		string1 [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_strconcat"]

	strjoin: make routine! compose/deep [[
		separator [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_strjoin"]

	strcompress: make routine! compose/deep [[
		source [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strcompress"]

	strescape: make routine! compose/deep [[
		source [pointer]
		exceptions [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strescape"]

	memdup: make routine! compose/deep [[
		mem [pointer]
		byte_size [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_memdup"]

	strsplit: make routine! compose/deep [[
		string [pointer]
		delimiter [pointer]
		max_tokens [int32]
		return: [pointer]
		abi: default
	] (glib) "g_strsplit"]

	strsplit_set: make routine! compose/deep [[
		string [pointer]
		delimiters [pointer]
		max_tokens [int32]
		return: [pointer]
		abi: default
	] (glib) "g_strsplit_set"]

	strjoinv: make routine! compose/deep [[
		separator [pointer]
		str_array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strjoinv"]

	strfreev: make routine! compose/deep [[
		str_array [pointer]
		return: [void]
		abi: default
	] (glib) "g_strfreev"]

	strdupv: make routine! compose/deep [[
		str_array [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_strdupv"]

	strv_length: make routine! compose/deep [[
		str_array [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_strv_length"]

	stpcpy: make routine! compose/deep [[
		dest [pointer]
		src [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_stpcpy"]

	str_to_ascii: make routine! compose/deep [[
		str [pointer]
		from_locale [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_str_to_ascii"]

	str_tokenize_and_fold: make routine! compose/deep [[
		string [pointer]
		translit_locale [pointer]
		ascii_alternates [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_str_tokenize_and_fold"]

	str_match_string: make routine! compose/deep [[
		search_term [pointer]
		potential_hit [pointer]
		accept_alternates [int32]
		return: [int32]
		abi: default
	] (glib) "g_str_match_string"]

	string_chunk_new: make routine! compose/deep [[
		size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_string_chunk_new"]

	string_chunk_free: make routine! compose/deep [[
		chunk [pointer]
		return: [void]
		abi: default
	] (glib) "g_string_chunk_free"]

	string_chunk_clear: make routine! compose/deep [[
		chunk [pointer]
		return: [void]
		abi: default
	] (glib) "g_string_chunk_clear"]

	string_chunk_insert: make routine! compose/deep [[
		chunk [pointer]
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_chunk_insert"]

	string_chunk_insert_len: make routine! compose/deep [[
		chunk [pointer]
		string [pointer]
		len [int64]
		return: [pointer]
		abi: default
	] (glib) "g_string_chunk_insert_len"]

	string_chunk_insert_const: make routine! compose/deep [[
		chunk [pointer]
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_string_chunk_insert_const"]

	strcmp0: make routine! compose/deep [[
		str1 [pointer]
		str2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_strcmp0"]

	test_minimized_result: make routine! compose/deep [[
		minimized_quantity [double]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_test_minimized_result"]

	test_maximized_result: make routine! compose/deep [[
		maximized_quantity [double]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_test_maximized_result"]

	test_init: make routine! compose/deep [[
		argc [pointer]
		argv [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_test_init"]

	test_subprocess: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_subprocess"]

	test_run: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_run"]

	test_add_func: make routine! compose/deep [[
		testpath [pointer]
		test_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_add_func"]

	test_add_data_func: make routine! compose/deep [[
		testpath [pointer]
		test_data [pointer]
		test_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_add_data_func"]

	test_add_data_func_full: make routine! compose/deep [[
		testpath [pointer]
		test_data [pointer]
		test_func [pointer]
		data_free_func [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_add_data_func_full"]

	test_fail: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_test_fail"]

	test_incomplete: make routine! compose/deep [[
		msg [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_incomplete"]

	test_skip: make routine! compose/deep [[
		msg [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_skip"]

	test_failed: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_failed"]

	test_set_nonfatal_assertions: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_test_set_nonfatal_assertions"]

	test_message: make routine! compose/deep [[
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_test_message"]

	test_bug_base: make routine! compose/deep [[
		uri_pattern [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_bug_base"]

	test_bug: make routine! compose/deep [[
		bug_uri_snippet [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_bug"]

	test_timer_start: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_test_timer_start"]

	test_timer_elapsed: make routine! compose/deep [[
		return: [double]
		abi: default
	] (glib) "g_test_timer_elapsed"]

	test_timer_last: make routine! compose/deep [[
		return: [double]
		abi: default
	] (glib) "g_test_timer_last"]

	test_queue_free: make routine! compose/deep [[
		gfree_pointer [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_queue_free"]

	test_queue_destroy: make routine! compose/deep [[
		destroy_func [pointer]
		destroy_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_queue_destroy"]

	test_trap_subprocess: make routine! compose/deep [[
		test_path [pointer]
		usec_timeout [uint64]
		test_flags [int32]
		return: [void]
		abi: default
	] (glib) "g_test_trap_subprocess"]

	test_trap_has_passed: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_trap_has_passed"]

	test_trap_reached_timeout: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_trap_reached_timeout"]

	test_rand_int: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_test_rand_int"]

	test_rand_int_range: make routine! compose/deep [[
		begin [int32]
		end [int32]
		return: [int32]
		abi: default
	] (glib) "g_test_rand_int_range"]

	test_rand_double: make routine! compose/deep [[
		return: [double]
		abi: default
	] (glib) "g_test_rand_double"]

	test_rand_double_range: make routine! compose/deep [[
		range_start [double]
		range_end [double]
		return: [double]
		abi: default
	] (glib) "g_test_rand_double_range"]

	test_create_case: make routine! compose/deep [[
		test_name [pointer]
		data_size [uint64]
		test_data [pointer]
		data_setup [pointer]
		data_test [pointer]
		data_teardown [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_test_create_case"]

	test_create_suite: make routine! compose/deep [[
		suite_name [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_test_create_suite"]

	test_get_root: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_test_get_root"]

	test_suite_add: make routine! compose/deep [[
		suite [pointer]
		test_case [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_suite_add"]

	test_suite_add_suite: make routine! compose/deep [[
		suite [pointer]
		nestedsuite [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_suite_add_suite"]

	test_run_suite: make routine! compose/deep [[
		suite [pointer]
		return: [int32]
		abi: default
	] (glib) "g_test_run_suite"]

	test_trap_assertions: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		assertion_flags [uint64]
		pattern [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_trap_assertions"]

	assertion_message: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		message [pointer]
		return: [void]
		abi: default
	] (glib) "g_assertion_message"]

	assertion_message_expr: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		expr [pointer]
		return: [void]
		abi: default
	] (glib) "g_assertion_message_expr"]

	assertion_message_cmpstr: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		expr [pointer]
		arg1 [pointer]
		cmp [pointer]
		arg2 [pointer]
		return: [void]
		abi: default
	] (glib) "g_assertion_message_cmpstr"]

	assertion_message_error: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		expr [pointer]
		error [pointer]
		error_domain [uint32]
		error_code [int32]
		return: [void]
		abi: default
	] (glib) "g_assertion_message_error"]

	test_add_vtable: make routine! compose/deep [[
		testpath [pointer]
		data_size [uint64]
		test_data [pointer]
		data_setup [pointer]
		data_test [pointer]
		data_teardown [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_add_vtable"]

	test_log_type_name: make routine! compose/deep [[
		log_type [int32]
		return: [pointer]
		abi: default
	] (glib) "g_test_log_type_name"]

	test_log_buffer_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_test_log_buffer_new"]

	test_log_buffer_free: make routine! compose/deep [[
		tbuffer [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_log_buffer_free"]

	test_log_buffer_push: make routine! compose/deep [[
		tbuffer [pointer]
		n_bytes [uint32]
		bytes [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_log_buffer_push"]

	test_log_buffer_pop: make routine! compose/deep [[
		tbuffer [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_test_log_buffer_pop"]

	test_log_msg_free: make routine! compose/deep [[
		tmsg [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_log_msg_free"]

	test_log_set_fatal_handler: make routine! compose/deep [[
		log_func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_log_set_fatal_handler"]

	test_expect_message: make routine! compose/deep [[
		log_domain [pointer]
		log_level [int32]
		pattern [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_expect_message"]

	test_assert_expected_messages_internal: make routine! compose/deep [[
		domain [pointer]
		file [pointer]
		line [int32]
		func [pointer]
		return: [void]
		abi: default
	] (glib) "g_test_assert_expected_messages_internal"]

	test_build_filename: make routine! compose/deep [[
		file_type [int32]
		first_path [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_test_build_filename"]

	test_get_dir: make routine! compose/deep [[
		file_type [int32]
		return: [pointer]
		abi: default
	] (glib) "g_test_get_dir"]

	test_get_filename: make routine! compose/deep [[
		file_type [int32]
		first_path [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_test_get_filename"]

	thread_pool_new: make routine! compose/deep [[
		func [pointer]
		user_data [pointer]
		max_threads [int32]
		exclusive [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_thread_pool_new"]

	thread_pool_free: make routine! compose/deep [[
		pool [pointer]
		immediate [int32]
		wait_ [int32]
		return: [void]
		abi: default
	] (glib) "g_thread_pool_free"]

	thread_pool_push: make routine! compose/deep [[
		pool [pointer]
		data [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_thread_pool_push"]

	thread_pool_unprocessed: make routine! compose/deep [[
		pool [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_thread_pool_unprocessed"]

	thread_pool_set_sort_function: make routine! compose/deep [[
		pool [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_thread_pool_set_sort_function"]

	thread_pool_set_max_threads: make routine! compose/deep [[
		pool [pointer]
		max_threads [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (glib) "g_thread_pool_set_max_threads"]

	thread_pool_get_max_threads: make routine! compose/deep [[
		pool [pointer]
		return: [int32]
		abi: default
	] (glib) "g_thread_pool_get_max_threads"]

	thread_pool_get_num_threads: make routine! compose/deep [[
		pool [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_thread_pool_get_num_threads"]

	thread_pool_set_max_unused_threads: make routine! compose/deep [[
		max_threads [int32]
		return: [void]
		abi: default
	] (glib) "g_thread_pool_set_max_unused_threads"]

	thread_pool_get_max_unused_threads: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (glib) "g_thread_pool_get_max_unused_threads"]

	thread_pool_get_num_unused_threads: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_thread_pool_get_num_unused_threads"]

	thread_pool_stop_unused_threads: make routine! compose/deep [[
		return: [void]
		abi: default
	] (glib) "g_thread_pool_stop_unused_threads"]

	thread_pool_set_max_idle_time: make routine! compose/deep [[
		interval [uint32]
		return: [void]
		abi: default
	] (glib) "g_thread_pool_set_max_idle_time"]

	thread_pool_get_max_idle_time: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_thread_pool_get_max_idle_time"]

	timer_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (glib) "g_timer_new"]

	timer_destroy: make routine! compose/deep [[
		timer [pointer]
		return: [void]
		abi: default
	] (glib) "g_timer_destroy"]

	timer_start: make routine! compose/deep [[
		timer [pointer]
		return: [void]
		abi: default
	] (glib) "g_timer_start"]

	timer_stop: make routine! compose/deep [[
		timer [pointer]
		return: [void]
		abi: default
	] (glib) "g_timer_stop"]

	timer_reset: make routine! compose/deep [[
		timer [pointer]
		return: [void]
		abi: default
	] (glib) "g_timer_reset"]

	timer_continue: make routine! compose/deep [[
		timer [pointer]
		return: [void]
		abi: default
	] (glib) "g_timer_continue"]

	timer_elapsed: make routine! compose/deep [[
		timer [pointer]
		microseconds [pointer]
		return: [double]
		abi: default
	] (glib) "g_timer_elapsed"]

	usleep: make routine! compose/deep [[
		microseconds [uint64]
		return: [void]
		abi: default
	] (glib) "g_usleep"]

	time_val_add: make routine! compose/deep [[
		time_ [pointer]
		microseconds [int64]
		return: [void]
		abi: default
	] (glib) "g_time_val_add"]

	time_val_from_iso8601: make routine! compose/deep [[
		iso_date [pointer]
		time_ [pointer]
		return: [int32]
		abi: default
	] (glib) "g_time_val_from_iso8601"]

	time_val_to_iso8601: make routine! compose/deep [[
		time_ [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_time_val_to_iso8601"]

	tree_new: make routine! compose/deep [[
		key_compare_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_new"]

	tree_new_with_data: make routine! compose/deep [[
		key_compare_func [pointer]
		key_compare_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_new_with_data"]

	tree_new_full: make routine! compose/deep [[
		key_compare_func [pointer]
		key_compare_data [pointer]
		key_destroy_func [pointer]
		value_destroy_func [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_new_full"]

	tree_ref: make routine! compose/deep [[
		tree [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_ref"]

	tree_unref: make routine! compose/deep [[
		tree [pointer]
		return: [void]
		abi: default
	] (glib) "g_tree_unref"]

	tree_destroy: make routine! compose/deep [[
		tree [pointer]
		return: [void]
		abi: default
	] (glib) "g_tree_destroy"]

	tree_insert: make routine! compose/deep [[
		tree [pointer]
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_tree_insert"]

	tree_replace: make routine! compose/deep [[
		tree [pointer]
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_tree_replace"]

	tree_remove: make routine! compose/deep [[
		tree [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_tree_remove"]

	tree_steal: make routine! compose/deep [[
		tree [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_tree_steal"]

	tree_lookup: make routine! compose/deep [[
		tree [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_lookup"]

	tree_lookup_extended: make routine! compose/deep [[
		tree [pointer]
		lookup_key [pointer]
		orig_key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_tree_lookup_extended"]

	tree_foreach: make routine! compose/deep [[
		tree [pointer]
		func [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (glib) "g_tree_foreach"]

	tree_search: make routine! compose/deep [[
		tree [pointer]
		search_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_tree_search"]

	tree_height: make routine! compose/deep [[
		tree [pointer]
		return: [int32]
		abi: default
	] (glib) "g_tree_height"]

	tree_nnodes: make routine! compose/deep [[
		tree [pointer]
		return: [int32]
		abi: default
	] (glib) "g_tree_nnodes"]

	uri_unescape_string: make routine! compose/deep [[
		escaped_string [pointer]
		illegal_characters [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_uri_unescape_string"]

	uri_unescape_segment: make routine! compose/deep [[
		escaped_string [pointer]
		escaped_string_end [pointer]
		illegal_characters [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_uri_unescape_segment"]

	uri_parse_scheme: make routine! compose/deep [[
		uri [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_uri_parse_scheme"]

	uri_escape_string: make routine! compose/deep [[
		unescaped [pointer]
		reserved_chars_allowed [pointer]
		allow_utf8 [int32]
		return: [pointer]
		abi: default
	] (glib) "g_uri_escape_string"]

	variant_type_string_is_valid: make routine! compose/deep [[
		type_string [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_string_is_valid"]

	variant_type_string_scan: make routine! compose/deep [[
		string [pointer]
		limit [pointer]
		endptr [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_string_scan"]

	variant_type_free: make routine! compose/deep [[
		type [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_type_free"]

	variant_type_copy: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_copy"]

	variant_type_new: make routine! compose/deep [[
		type_string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_new"]

	variant_type_get_string_length: make routine! compose/deep [[
		type [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_type_get_string_length"]

	variant_type_peek_string: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_peek_string"]

	variant_type_dup_string: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_dup_string"]

	variant_type_is_definite: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_definite"]

	variant_type_is_container: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_container"]

	variant_type_is_basic: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_basic"]

	variant_type_is_maybe: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_maybe"]

	variant_type_is_array: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_array"]

	variant_type_is_tuple: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_tuple"]

	variant_type_is_dict_entry: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_dict_entry"]

	variant_type_is_variant: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_variant"]

	variant_type_hash: make routine! compose/deep [[
		type [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_variant_type_hash"]

	variant_type_equal: make routine! compose/deep [[
		type1 [pointer]
		type2 [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_equal"]

	variant_type_is_subtype_of: make routine! compose/deep [[
		type [pointer]
		supertype [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_type_is_subtype_of"]

	variant_type_element: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_element"]

	variant_type_first: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_first"]

	variant_type_next: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_next"]

	variant_type_n_items: make routine! compose/deep [[
		type [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_type_n_items"]

	variant_type_key: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_key"]

	variant_type_value: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_value"]

	variant_type_new_array: make routine! compose/deep [[
		element [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_new_array"]

	variant_type_new_maybe: make routine! compose/deep [[
		element [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_new_maybe"]

	variant_type_new_tuple: make routine! compose/deep [[
		items [pointer]
		length [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_new_tuple"]

	variant_type_new_dict_entry: make routine! compose/deep [[
		key [pointer]
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_new_dict_entry"]

	variant_type_checked_: make routine! compose/deep [[
		arg1 [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_type_checked_"]

	variant_unref: make routine! compose/deep [[
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_unref"]

	variant_ref: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_ref"]

	variant_ref_sink: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_ref_sink"]

	variant_is_floating: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_floating"]

	variant_take_ref: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_take_ref"]

	variant_get_type: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_type"]

	variant_get_type_string: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_type_string"]

	variant_is_of_type: make routine! compose/deep [[
		value [pointer]
		type [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_of_type"]

	variant_is_container: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_container"]

	variant_classify: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_classify"]

	variant_new_boolean: make routine! compose/deep [[
		value [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_boolean"]

	variant_new_byte: make routine! compose/deep [[
		value [uint8]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_byte"]

	variant_new_int16: make routine! compose/deep [[
		value [int16]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_int16"]

	variant_new_uint16: make routine! compose/deep [[
		value [uint16]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_uint16"]

	variant_new_int32: make routine! compose/deep [[
		value [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_int32"]

	variant_new_uint32: make routine! compose/deep [[
		value [uint32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_uint32"]

	variant_new_int64: make routine! compose/deep [[
		value [int64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_int64"]

	variant_new_uint64: make routine! compose/deep [[
		value [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_uint64"]

	variant_new_handle: make routine! compose/deep [[
		value [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_handle"]

	variant_new_double: make routine! compose/deep [[
		value [double]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_double"]

	variant_new_string: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_string"]

	variant_new_take_string: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_take_string"]

	variant_new_printf: make routine! compose/deep [[
		format_string [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_printf"]

	variant_new_object_path: make routine! compose/deep [[
		object_path [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_object_path"]

	variant_is_object_path: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_object_path"]

	variant_new_signature: make routine! compose/deep [[
		signature [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_signature"]

	variant_is_signature: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_signature"]

	variant_new_variant: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_variant"]

	variant_new_strv: make routine! compose/deep [[
		strv [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_strv"]

	variant_new_objv: make routine! compose/deep [[
		strv [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_objv"]

	variant_new_bytestring: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_bytestring"]

	variant_new_bytestring_array: make routine! compose/deep [[
		strv [pointer]
		length [int64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_bytestring_array"]

	variant_new_fixed_array: make routine! compose/deep [[
		element_type [pointer]
		elements [pointer]
		n_elements [uint64]
		element_size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_fixed_array"]

	variant_get_boolean: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_get_boolean"]

	variant_get_byte: make routine! compose/deep [[
		value [pointer]
		return: [uint8]
		abi: default
	] (glib) "g_variant_get_byte"]

	variant_get_int16: make routine! compose/deep [[
		value [pointer]
		return: [int16]
		abi: default
	] (glib) "g_variant_get_int16"]

	variant_get_uint16: make routine! compose/deep [[
		value [pointer]
		return: [uint16]
		abi: default
	] (glib) "g_variant_get_uint16"]

	variant_get_int32: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_get_int32"]

	variant_get_uint32: make routine! compose/deep [[
		value [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_variant_get_uint32"]

	variant_get_int64: make routine! compose/deep [[
		value [pointer]
		return: [int64]
		abi: default
	] (glib) "g_variant_get_int64"]

	variant_get_uint64: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_get_uint64"]

	variant_get_handle: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_get_handle"]

	variant_get_double: make routine! compose/deep [[
		value [pointer]
		return: [double]
		abi: default
	] (glib) "g_variant_get_double"]

	variant_get_variant: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_variant"]

	variant_get_string: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_string"]

	variant_dup_string: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dup_string"]

	variant_get_strv: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_strv"]

	variant_dup_strv: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dup_strv"]

	variant_get_objv: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_objv"]

	variant_dup_objv: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dup_objv"]

	variant_get_bytestring: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_bytestring"]

	variant_dup_bytestring: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dup_bytestring"]

	variant_get_bytestring_array: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_bytestring_array"]

	variant_dup_bytestring_array: make routine! compose/deep [[
		value [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dup_bytestring_array"]

	variant_new_maybe: make routine! compose/deep [[
		child_type [pointer]
		child [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_maybe"]

	variant_new_array: make routine! compose/deep [[
		child_type [pointer]
		children [pointer]
		n_children [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_array"]

	variant_new_tuple: make routine! compose/deep [[
		children [pointer]
		n_children [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_tuple"]

	variant_new_dict_entry: make routine! compose/deep [[
		key [pointer]
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_dict_entry"]

	variant_get_maybe: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_maybe"]

	variant_n_children: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_n_children"]

	variant_get_child: make routine! compose/deep [[
		value [pointer]
		index_ [uint64]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_variant_get_child"]

	variant_get_child_value: make routine! compose/deep [[
		value [pointer]
		index_ [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_child_value"]

	variant_lookup: make routine! compose/deep [[
		dictionary [pointer]
		key [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_variant_lookup"]

	variant_lookup_value: make routine! compose/deep [[
		dictionary [pointer]
		key [pointer]
		expected_type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_lookup_value"]

	variant_get_fixed_array: make routine! compose/deep [[
		value [pointer]
		n_elements [pointer]
		element_size [uint64]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_fixed_array"]

	variant_get_size: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_get_size"]

	variant_get_data: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_data"]

	variant_get_data_as_bytes: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_data_as_bytes"]

	variant_store: make routine! compose/deep [[
		value [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_store"]

	variant_print: make routine! compose/deep [[
		value [pointer]
		type_annotate [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_print"]

	variant_print_string: make routine! compose/deep [[
		value [pointer]
		string [pointer]
		type_annotate [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_print_string"]

	variant_hash: make routine! compose/deep [[
		value [pointer]
		return: [uint32]
		abi: default
	] (glib) "g_variant_hash"]

	variant_equal: make routine! compose/deep [[
		one [pointer]
		two [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_equal"]

	variant_get_normal_form: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_get_normal_form"]

	variant_is_normal_form: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_is_normal_form"]

	variant_byteswap: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_byteswap"]

	variant_new_from_bytes: make routine! compose/deep [[
		type [pointer]
		bytes [pointer]
		trusted [int32]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_from_bytes"]

	variant_new_from_data: make routine! compose/deep [[
		type [pointer]
		data [pointer]
		size [uint64]
		trusted [int32]
		notify [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_from_data"]

	variant_iter_new: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_iter_new"]

	variant_iter_init: make routine! compose/deep [[
		iter [pointer]
		value [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_iter_init"]

	variant_iter_copy: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_iter_copy"]

	variant_iter_n_children: make routine! compose/deep [[
		iter [pointer]
		return: [uint64]
		abi: default
	] (glib) "g_variant_iter_n_children"]

	variant_iter_free: make routine! compose/deep [[
		iter [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_iter_free"]

	variant_iter_next_value: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_iter_next_value"]

	variant_iter_next: make routine! compose/deep [[
		iter [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_variant_iter_next"]

	variant_iter_loop: make routine! compose/deep [[
		iter [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_variant_iter_loop"]

	variant_parse_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (glib) "g_variant_parse_error_quark"]

	variant_builder_new: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_builder_new"]

	variant_builder_unref: make routine! compose/deep [[
		builder [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_unref"]

	variant_builder_ref: make routine! compose/deep [[
		builder [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_builder_ref"]

	variant_builder_init: make routine! compose/deep [[
		builder [pointer]
		type [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_init"]

	variant_builder_end: make routine! compose/deep [[
		builder [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_builder_end"]

	variant_builder_clear: make routine! compose/deep [[
		builder [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_clear"]

	variant_builder_open: make routine! compose/deep [[
		builder [pointer]
		type [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_open"]

	variant_builder_close: make routine! compose/deep [[
		builder [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_close"]

	variant_builder_add_value: make routine! compose/deep [[
		builder [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_builder_add_value"]

	variant_builder_add: make routine! compose/deep [[
		builder [pointer]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_variant_builder_add"]

	variant_builder_add_parsed: make routine! compose/deep [[
		builder [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_variant_builder_add_parsed"]

	variant_new: make routine! compose/deep [[
		format_string [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_variant_new"]

	variant_get: make routine! compose/deep [[
		value [pointer]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_variant_get"]

	variant_new_va: make routine! compose/deep [[
		format_string [pointer]
		endptr [pointer]
		app [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_va"]

	variant_get_va: make routine! compose/deep [[
		value [pointer]
		format_string [pointer]
		endptr [pointer]
		app [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_get_va"]

	variant_check_format_string: make routine! compose/deep [[
		value [pointer]
		format_string [pointer]
		copy_only [int32]
		return: [int32]
		abi: default
	] (glib) "g_variant_check_format_string"]

	variant_parse: make routine! compose/deep [[
		type [pointer]
		text [pointer]
		limit [pointer]
		endptr [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_parse"]

	variant_new_parsed: make routine! compose/deep [[
		format [pointer]
		...
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_parsed"]

	variant_new_parsed_va: make routine! compose/deep [[
		format [pointer]
		app [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_new_parsed_va"]

	variant_parse_error_print_context: make routine! compose/deep [[
		error [pointer]
		source_str [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_parse_error_print_context"]

	variant_compare: make routine! compose/deep [[
		one [pointer]
		two [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_compare"]

	variant_dict_new: make routine! compose/deep [[
		from_asv [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dict_new"]

	variant_dict_init: make routine! compose/deep [[
		dict [pointer]
		from_asv [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_dict_init"]

	variant_dict_lookup: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (glib) "g_variant_dict_lookup"]

	variant_dict_lookup_value: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		expected_type [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dict_lookup_value"]

	variant_dict_contains: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_dict_contains"]

	variant_dict_insert: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (glib) "g_variant_dict_insert"]

	variant_dict_insert_value: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_dict_insert_value"]

	variant_dict_remove: make routine! compose/deep [[
		dict [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (glib) "g_variant_dict_remove"]

	variant_dict_clear: make routine! compose/deep [[
		dict [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_dict_clear"]

	variant_dict_end: make routine! compose/deep [[
		dict [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dict_end"]

	variant_dict_ref: make routine! compose/deep [[
		dict [pointer]
		return: [pointer]
		abi: default
	] (glib) "g_variant_dict_ref"]

	variant_dict_unref: make routine! compose/deep [[
		dict [pointer]
		return: [void]
		abi: default
	] (glib) "g_variant_dict_unref"]

	type_name: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_name"]

	type_qname: make routine! compose/deep [[
		type [uint64]
		return: [uint32]
		abi: default
	] (gobject) "g_type_qname"]

	type_from_name: make routine! compose/deep [[
		name [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_type_from_name"]

	type_parent: make routine! compose/deep [[
		type [uint64]
		return: [uint64]
		abi: default
	] (gobject) "g_type_parent"]

	type_depth: make routine! compose/deep [[
		type [uint64]
		return: [uint32]
		abi: default
	] (gobject) "g_type_depth"]

	type_next_base: make routine! compose/deep [[
		leaf_type [uint64]
		root_type [uint64]
		return: [uint64]
		abi: default
	] (gobject) "g_type_next_base"]

	type_is_a: make routine! compose/deep [[
		type [uint64]
		is_a_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_is_a"]

	type_class_ref: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_class_ref"]

	type_class_peek: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_class_peek"]

	type_class_peek_static: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_class_peek_static"]

	type_class_unref: make routine! compose/deep [[
		g_class [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_class_unref"]

	type_class_peek_parent: make routine! compose/deep [[
		g_class [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_class_peek_parent"]

	type_interface_peek: make routine! compose/deep [[
		instance_class [pointer]
		iface_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_interface_peek"]

	type_interface_peek_parent: make routine! compose/deep [[
		g_iface [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_interface_peek_parent"]

	type_default_interface_ref: make routine! compose/deep [[
		g_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_default_interface_ref"]

	type_default_interface_peek: make routine! compose/deep [[
		g_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_default_interface_peek"]

	type_default_interface_unref: make routine! compose/deep [[
		g_iface [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_default_interface_unref"]

	type_children: make routine! compose/deep [[
		type [uint64]
		n_children [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_children"]

	type_interfaces: make routine! compose/deep [[
		type [uint64]
		n_interfaces [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_interfaces"]

	type_set_qdata: make routine! compose/deep [[
		type [uint64]
		quark [uint32]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_set_qdata"]

	type_get_qdata: make routine! compose/deep [[
		type [uint64]
		quark [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_type_get_qdata"]

	type_query: make routine! compose/deep [[
		type [uint64]
		query [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_query"]

	type_register_static: make routine! compose/deep [[
		parent_type [uint64]
		type_name [pointer]
		info [pointer]
		flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_type_register_static"]

	type_register_static_simple: make routine! compose/deep [[
		parent_type [uint64]
		type_name [pointer]
		class_size [uint32]
		class_init [pointer]
		instance_size [uint32]
		instance_init [pointer]
		flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_type_register_static_simple"]

	type_register_dynamic: make routine! compose/deep [[
		parent_type [uint64]
		type_name [pointer]
		plugin [pointer]
		flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_type_register_dynamic"]

	type_register_fundamental: make routine! compose/deep [[
		type_id [uint64]
		type_name [pointer]
		info [pointer]
		finfo [pointer]
		flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_type_register_fundamental"]

	type_add_interface_static: make routine! compose/deep [[
		instance_type [uint64]
		interface_type [uint64]
		info [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_add_interface_static"]

	type_add_interface_dynamic: make routine! compose/deep [[
		instance_type [uint64]
		interface_type [uint64]
		plugin [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_add_interface_dynamic"]

	type_interface_add_prerequisite: make routine! compose/deep [[
		interface_type [uint64]
		prerequisite_type [uint64]
		return: [void]
		abi: default
	] (gobject) "g_type_interface_add_prerequisite"]

	type_interface_prerequisites: make routine! compose/deep [[
		interface_type [uint64]
		n_prerequisites [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_interface_prerequisites"]

	type_class_add_private: make routine! compose/deep [[
		g_class [pointer]
		private_size [uint64]
		return: [void]
		abi: default
	] (gobject) "g_type_class_add_private"]

	type_add_instance_private: make routine! compose/deep [[
		class_type [uint64]
		private_size [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_add_instance_private"]

	type_instance_get_private: make routine! compose/deep [[
		instance [pointer]
		private_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_instance_get_private"]

	type_class_adjust_private_offset: make routine! compose/deep [[
		g_class [pointer]
		private_size_or_offset [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_class_adjust_private_offset"]

	type_add_class_private: make routine! compose/deep [[
		class_type [uint64]
		private_size [uint64]
		return: [void]
		abi: default
	] (gobject) "g_type_add_class_private"]

	type_class_get_private: make routine! compose/deep [[
		klass [pointer]
		private_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_class_get_private"]

	type_class_get_instance_private_offset: make routine! compose/deep [[
		g_class [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_type_class_get_instance_private_offset"]

	type_ensure: make routine! compose/deep [[
		type [uint64]
		return: [void]
		abi: default
	] (gobject) "g_type_ensure"]

	type_get_type_registration_serial: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gobject) "g_type_get_type_registration_serial"]

	type_get_plugin: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_get_plugin"]

	type_interface_get_plugin: make routine! compose/deep [[
		instance_type [uint64]
		interface_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_interface_get_plugin"]

	type_fundamental_next: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_type_fundamental_next"]

	type_fundamental: make routine! compose/deep [[
		type_id [uint64]
		return: [uint64]
		abi: default
	] (gobject) "g_type_fundamental"]

	type_create_instance: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_create_instance"]

	type_free_instance: make routine! compose/deep [[
		instance [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_free_instance"]

	type_add_class_cache_func: make routine! compose/deep [[
		cache_data [pointer]
		cache_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_add_class_cache_func"]

	type_remove_class_cache_func: make routine! compose/deep [[
		cache_data [pointer]
		cache_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_remove_class_cache_func"]

	type_class_unref_uncached: make routine! compose/deep [[
		g_class [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_class_unref_uncached"]

	type_add_interface_check: make routine! compose/deep [[
		check_data [pointer]
		check_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_add_interface_check"]

	type_remove_interface_check: make routine! compose/deep [[
		check_data [pointer]
		check_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_remove_interface_check"]

	type_value_table_peek: make routine! compose/deep [[
		type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_value_table_peek"]

	type_check_instance: make routine! compose/deep [[
		instance [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_instance"]

	type_check_instance_cast: make routine! compose/deep [[
		instance [pointer]
		iface_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_check_instance_cast"]

	type_check_instance_is_a: make routine! compose/deep [[
		instance [pointer]
		iface_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_instance_is_a"]

	type_check_instance_is_fundamentally_a: make routine! compose/deep [[
		instance [pointer]
		fundamental_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_instance_is_fundamentally_a"]

	type_check_class_cast: make routine! compose/deep [[
		g_class [pointer]
		is_a_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_type_check_class_cast"]

	type_check_class_is_a: make routine! compose/deep [[
		g_class [pointer]
		is_a_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_class_is_a"]

	type_check_is_value_type: make routine! compose/deep [[
		type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_is_value_type"]

	type_check_value: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_value"]

	type_check_value_holds: make routine! compose/deep [[
		value [pointer]
		type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_type_check_value_holds"]

	type_test_flags: make routine! compose/deep [[
		type [uint64]
		flags [uint32]
		return: [int32]
		abi: default
	] (gobject) "g_type_test_flags"]

	type_name_from_instance: make routine! compose/deep [[
		instance [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_name_from_instance"]

	type_name_from_class: make routine! compose/deep [[
		g_class [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_type_name_from_class"]

	value_init: make routine! compose/deep [[
		value [pointer]
		g_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_value_init"]

	value_copy: make routine! compose/deep [[
		src_value [pointer]
		dest_value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_copy"]

	value_reset: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_reset"]

	value_unset: make routine! compose/deep [[
		value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_unset"]

	value_set_instance: make routine! compose/deep [[
		value [pointer]
		instance [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_instance"]

	value_init_from_instance: make routine! compose/deep [[
		value [pointer]
		instance [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_init_from_instance"]

	value_fits_pointer: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_value_fits_pointer"]

	value_peek_pointer: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_peek_pointer"]

	value_type_compatible: make routine! compose/deep [[
		src_type [uint64]
		dest_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_value_type_compatible"]

	value_type_transformable: make routine! compose/deep [[
		src_type [uint64]
		dest_type [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_value_type_transformable"]

	value_transform: make routine! compose/deep [[
		src_value [pointer]
		dest_value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_value_transform"]

	value_register_transform_func: make routine! compose/deep [[
		src_type [uint64]
		dest_type [uint64]
		transform_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_register_transform_func"]

	param_spec_ref: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_ref"]

	param_spec_unref: make routine! compose/deep [[
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_unref"]

	param_spec_sink: make routine! compose/deep [[
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_sink"]

	param_spec_ref_sink: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_ref_sink"]

	param_spec_get_qdata: make routine! compose/deep [[
		pspec [pointer]
		quark [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_qdata"]

	param_spec_set_qdata: make routine! compose/deep [[
		pspec [pointer]
		quark [uint32]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_set_qdata"]

	param_spec_set_qdata_full: make routine! compose/deep [[
		pspec [pointer]
		quark [uint32]
		data [pointer]
		destroy [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_set_qdata_full"]

	param_spec_steal_qdata: make routine! compose/deep [[
		pspec [pointer]
		quark [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_steal_qdata"]

	param_spec_get_redirect_target: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_redirect_target"]

	param_value_set_default: make routine! compose/deep [[
		pspec [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_value_set_default"]

	param_value_defaults: make routine! compose/deep [[
		pspec [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_param_value_defaults"]

	param_value_validate: make routine! compose/deep [[
		pspec [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_param_value_validate"]

	param_value_convert: make routine! compose/deep [[
		pspec [pointer]
		src_value [pointer]
		dest_value [pointer]
		strict_validation [int32]
		return: [int32]
		abi: default
	] (gobject) "g_param_value_convert"]

	param_values_cmp: make routine! compose/deep [[
		pspec [pointer]
		value1 [pointer]
		value2 [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_param_values_cmp"]

	param_spec_get_name: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_name"]

	param_spec_get_nick: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_nick"]

	param_spec_get_blurb: make routine! compose/deep [[
		pspec [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_blurb"]

	value_set_param: make routine! compose/deep [[
		value [pointer]
		param [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_param"]

	value_get_param: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_param"]

	value_dup_param: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_dup_param"]

	value_take_param: make routine! compose/deep [[
		value [pointer]
		param [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_take_param"]

	param_spec_get_default_value: make routine! compose/deep [[
		param [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_get_default_value"]

	param_type_register_static: make routine! compose/deep [[
		name [pointer]
		pspec_info [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_param_type_register_static"]

	param_spec_internal: make routine! compose/deep [[
		param_type [uint64]
		name [pointer]
		nick [pointer]
		blurb [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_internal"]

	param_spec_pool_new: make routine! compose/deep [[
		type_prefixing [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_pool_new"]

	param_spec_pool_insert: make routine! compose/deep [[
		pool [pointer]
		pspec [pointer]
		owner_type [uint64]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_pool_insert"]

	param_spec_pool_remove: make routine! compose/deep [[
		pool [pointer]
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_param_spec_pool_remove"]

	param_spec_pool_lookup: make routine! compose/deep [[
		pool [pointer]
		param_name [pointer]
		owner_type [uint64]
		walk_ancestors [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_pool_lookup"]

	param_spec_pool_list_owned: make routine! compose/deep [[
		pool [pointer]
		owner_type [uint64]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_pool_list_owned"]

	param_spec_pool_list: make routine! compose/deep [[
		pool [pointer]
		owner_type [uint64]
		n_pspecs_p [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_pool_list"]

	cclosure_new: make routine! compose/deep [[
		callback_func [pointer]
		user_data [pointer]
		destroy_data [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_cclosure_new"]

	cclosure_new_swap: make routine! compose/deep [[
		callback_func [pointer]
		user_data [pointer]
		destroy_data [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_cclosure_new_swap"]

	signal_type_cclosure_new: make routine! compose/deep [[
		itype [uint64]
		struct_offset [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_signal_type_cclosure_new"]

	closure_ref: make routine! compose/deep [[
		closure [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_closure_ref"]

	closure_sink: make routine! compose/deep [[
		closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_sink"]

	closure_unref: make routine! compose/deep [[
		closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_unref"]

	closure_new_simple: make routine! compose/deep [[
		sizeof_closure [uint32]
		data [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_closure_new_simple"]

	closure_add_finalize_notifier: make routine! compose/deep [[
		closure [pointer]
		notify_data [pointer]
		notify_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_add_finalize_notifier"]

	closure_remove_finalize_notifier: make routine! compose/deep [[
		closure [pointer]
		notify_data [pointer]
		notify_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_remove_finalize_notifier"]

	closure_add_invalidate_notifier: make routine! compose/deep [[
		closure [pointer]
		notify_data [pointer]
		notify_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_add_invalidate_notifier"]

	closure_remove_invalidate_notifier: make routine! compose/deep [[
		closure [pointer]
		notify_data [pointer]
		notify_func [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_remove_invalidate_notifier"]

	closure_add_marshal_guards: make routine! compose/deep [[
		closure [pointer]
		pre_marshal_data [pointer]
		pre_marshal_notify [pointer]
		post_marshal_data [pointer]
		post_marshal_notify [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_add_marshal_guards"]

	closure_set_marshal: make routine! compose/deep [[
		closure [pointer]
		marshal [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_set_marshal"]

	closure_set_meta_marshal: make routine! compose/deep [[
		closure [pointer]
		marshal_data [pointer]
		meta_marshal [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_set_meta_marshal"]

	closure_invalidate: make routine! compose/deep [[
		closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_invalidate"]

	closure_invoke: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		return: [void]
		abi: default
	] (gobject) "g_closure_invoke"]

	cclosure_marshal_generic: make routine! compose/deep [[
		closure [pointer]
		return_gvalue [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_generic"]

	cclosure_marshal_generic_va: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args_list [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_generic_va"]

	cclosure_marshal_VOID__VOID: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__VOID"]

	cclosure_marshal_VOID__VOIDv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__VOIDv"]

	cclosure_marshal_VOID__BOOLEAN: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__BOOLEAN"]

	cclosure_marshal_VOID__BOOLEANv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__BOOLEANv"]

	cclosure_marshal_VOID__CHAR: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__CHAR"]

	cclosure_marshal_VOID__CHARv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__CHARv"]

	cclosure_marshal_VOID__UCHAR: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UCHAR"]

	cclosure_marshal_VOID__UCHARv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UCHARv"]

	cclosure_marshal_VOID__INT: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__INT"]

	cclosure_marshal_VOID__INTv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__INTv"]

	cclosure_marshal_VOID__UINT: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UINT"]

	cclosure_marshal_VOID__UINTv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UINTv"]

	cclosure_marshal_VOID__LONG: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__LONG"]

	cclosure_marshal_VOID__LONGv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__LONGv"]

	cclosure_marshal_VOID__ULONG: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__ULONG"]

	cclosure_marshal_VOID__ULONGv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__ULONGv"]

	cclosure_marshal_VOID__ENUM: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__ENUM"]

	cclosure_marshal_VOID__ENUMv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__ENUMv"]

	cclosure_marshal_VOID__FLAGS: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__FLAGS"]

	cclosure_marshal_VOID__FLAGSv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__FLAGSv"]

	cclosure_marshal_VOID__FLOAT: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__FLOAT"]

	cclosure_marshal_VOID__FLOATv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__FLOATv"]

	cclosure_marshal_VOID__DOUBLE: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__DOUBLE"]

	cclosure_marshal_VOID__DOUBLEv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__DOUBLEv"]

	cclosure_marshal_VOID__STRING: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__STRING"]

	cclosure_marshal_VOID__STRINGv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__STRINGv"]

	cclosure_marshal_VOID__PARAM: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__PARAM"]

	cclosure_marshal_VOID__PARAMv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__PARAMv"]

	cclosure_marshal_VOID__BOXED: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__BOXED"]

	cclosure_marshal_VOID__BOXEDv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__BOXEDv"]

	cclosure_marshal_VOID__POINTER: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__POINTER"]

	cclosure_marshal_VOID__POINTERv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__POINTERv"]

	cclosure_marshal_VOID__OBJECT: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__OBJECT"]

	cclosure_marshal_VOID__OBJECTv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__OBJECTv"]

	cclosure_marshal_VOID__VARIANT: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__VARIANT"]

	cclosure_marshal_VOID__VARIANTv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__VARIANTv"]

	cclosure_marshal_VOID__UINT_POINTER: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UINT_POINTER"]

	cclosure_marshal_VOID__UINT_POINTERv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_VOID__UINT_POINTERv"]

	cclosure_marshal_BOOLEAN__FLAGS: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_BOOLEAN__FLAGS"]

	cclosure_marshal_BOOLEAN__FLAGSv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_BOOLEAN__FLAGSv"]

	cclosure_marshal_STRING__OBJECT_POINTER: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_STRING__OBJECT_POINTER"]

	cclosure_marshal_STRING__OBJECT_POINTERv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_STRING__OBJECT_POINTERv"]

	cclosure_marshal_BOOLEAN__BOXED_BOXED: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		n_param_values [uint32]
		param_values [pointer]
		invocation_hint [pointer]
		marshal_data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_BOOLEAN__BOXED_BOXED"]

	cclosure_marshal_BOOLEAN__BOXED_BOXEDv: make routine! compose/deep [[
		closure [pointer]
		return_value [pointer]
		instance [pointer]
		args [int32]
		marshal_data [pointer]
		n_params [int32]
		param_types [pointer]
		return: [void]
		abi: default
	] (gobject) "g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv"]

	signal_newv: make routine! compose/deep [[
		signal_name [pointer]
		itype [uint64]
		signal_flags [int32]
		class_closure [pointer]
		accumulator [pointer]
		accu_data [pointer]
		c_marshaller [pointer]
		return_type [uint64]
		n_params [uint32]
		param_types [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_newv"]

	signal_new_valist: make routine! compose/deep [[
		signal_name [pointer]
		itype [uint64]
		signal_flags [int32]
		class_closure [pointer]
		accumulator [pointer]
		accu_data [pointer]
		c_marshaller [pointer]
		return_type [uint64]
		n_params [uint32]
		args [int32]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_new_valist"]

	signal_new: make routine! compose/deep [[
		signal_name [pointer]
		itype [uint64]
		signal_flags [int32]
		class_offset [uint32]
		accumulator [pointer]
		accu_data [pointer]
		c_marshaller [pointer]
		return_type [uint64]
		n_params [uint32]
		...
		return: [uint32]
		abi: default
	] (gobject) "g_signal_new"]

	signal_new_class_handler: make routine! compose/deep [[
		signal_name [pointer]
		itype [uint64]
		signal_flags [int32]
		class_handler [pointer]
		accumulator [pointer]
		accu_data [pointer]
		c_marshaller [pointer]
		return_type [uint64]
		n_params [uint32]
		...
		return: [uint32]
		abi: default
	] (gobject) "g_signal_new_class_handler"]

	signal_set_va_marshaller: make routine! compose/deep [[
		signal_id [uint32]
		instance_type [uint64]
		va_marshaller [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_set_va_marshaller"]

	signal_emitv: make routine! compose/deep [[
		instance_and_params [pointer]
		signal_id [uint32]
		detail [uint32]
		return_value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_emitv"]

	signal_emit_valist: make routine! compose/deep [[
		instance [pointer]
		signal_id [uint32]
		detail [uint32]
		var_args [int32]
		return: [void]
		abi: default
	] (gobject) "g_signal_emit_valist"]

	signal_emit: make routine! compose/deep [[
		instance [pointer]
		signal_id [uint32]
		detail [uint32]
		...
		return: [void]
		abi: default
	] (gobject) "g_signal_emit"]

	signal_emit_by_name: make routine! compose/deep [[
		instance [pointer]
		detailed_signal [pointer]
		...
		return: [void]
		abi: default
	] (gobject) "g_signal_emit_by_name"]

	signal_lookup: make routine! compose/deep [[
		name [pointer]
		itype [uint64]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_lookup"]

	signal_name: make routine! compose/deep [[
		signal_id [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_signal_name"]

	signal_query: make routine! compose/deep [[
		signal_id [uint32]
		query [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_query"]

	signal_list_ids: make routine! compose/deep [[
		itype [uint64]
		n_ids [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_signal_list_ids"]

	signal_parse_name: make routine! compose/deep [[
		detailed_signal [pointer]
		itype [uint64]
		signal_id_p [pointer]
		detail_p [pointer]
		force_detail_quark [int32]
		return: [int32]
		abi: default
	] (gobject) "g_signal_parse_name"]

	signal_get_invocation_hint: make routine! compose/deep [[
		instance [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_signal_get_invocation_hint"]

	signal_stop_emission: make routine! compose/deep [[
		instance [pointer]
		signal_id [uint32]
		detail [uint32]
		return: [void]
		abi: default
	] (gobject) "g_signal_stop_emission"]

	signal_stop_emission_by_name: make routine! compose/deep [[
		instance [pointer]
		detailed_signal [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_stop_emission_by_name"]

	signal_add_emission_hook: make routine! compose/deep [[
		signal_id [uint32]
		detail [uint32]
		hook_func [pointer]
		hook_data [pointer]
		data_destroy [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_add_emission_hook"]

	signal_remove_emission_hook: make routine! compose/deep [[
		signal_id [uint32]
		hook_id [uint64]
		return: [void]
		abi: default
	] (gobject) "g_signal_remove_emission_hook"]

	signal_has_handler_pending: make routine! compose/deep [[
		instance [pointer]
		signal_id [uint32]
		detail [uint32]
		may_be_blocked [int32]
		return: [int32]
		abi: default
	] (gobject) "g_signal_has_handler_pending"]

	signal_connect_closure_by_id: make routine! compose/deep [[
		instance [pointer]
		signal_id [uint32]
		detail [uint32]
		closure [pointer]
		after [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_connect_closure_by_id"]

	signal_connect_closure: make routine! compose/deep [[
		instance [pointer]
		detailed_signal [pointer]
		closure [pointer]
		after [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_connect_closure"]

	signal_connect_data: make routine! compose/deep [[
		instance [pointer]
		detailed_signal [pointer]
		c_handler [pointer]
		data [pointer]
		destroy_data [pointer]
		connect_flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_connect_data"]

	signal_handler_block: make routine! compose/deep [[
		instance [pointer]
		handler_id [uint64]
		return: [void]
		abi: default
	] (gobject) "g_signal_handler_block"]

	signal_handler_unblock: make routine! compose/deep [[
		instance [pointer]
		handler_id [uint64]
		return: [void]
		abi: default
	] (gobject) "g_signal_handler_unblock"]

	signal_handler_disconnect: make routine! compose/deep [[
		instance [pointer]
		handler_id [uint64]
		return: [void]
		abi: default
	] (gobject) "g_signal_handler_disconnect"]

	signal_handler_is_connected: make routine! compose/deep [[
		instance [pointer]
		handler_id [uint64]
		return: [int32]
		abi: default
	] (gobject) "g_signal_handler_is_connected"]

	signal_handler_find: make routine! compose/deep [[
		instance [pointer]
		mask [int32]
		signal_id [uint32]
		detail [uint32]
		closure [pointer]
		func [pointer]
		data [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_handler_find"]

	signal_handlers_block_matched: make routine! compose/deep [[
		instance [pointer]
		mask [int32]
		signal_id [uint32]
		detail [uint32]
		closure [pointer]
		func [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_handlers_block_matched"]

	signal_handlers_unblock_matched: make routine! compose/deep [[
		instance [pointer]
		mask [int32]
		signal_id [uint32]
		detail [uint32]
		closure [pointer]
		func [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_handlers_unblock_matched"]

	signal_handlers_disconnect_matched: make routine! compose/deep [[
		instance [pointer]
		mask [int32]
		signal_id [uint32]
		detail [uint32]
		closure [pointer]
		func [pointer]
		data [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_signal_handlers_disconnect_matched"]

	signal_override_class_closure: make routine! compose/deep [[
		signal_id [uint32]
		instance_type [uint64]
		class_closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_override_class_closure"]

	signal_override_class_handler: make routine! compose/deep [[
		signal_name [pointer]
		instance_type [uint64]
		class_handler [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_override_class_handler"]

	signal_chain_from_overridden: make routine! compose/deep [[
		instance_and_params [pointer]
		return_value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_chain_from_overridden"]

	signal_chain_from_overridden_handler: make routine! compose/deep [[
		instance [pointer]
		...
		return: [void]
		abi: default
	] (gobject) "g_signal_chain_from_overridden_handler"]

	signal_accumulator_true_handled: make routine! compose/deep [[
		ihint [pointer]
		return_accu [pointer]
		handler_return [pointer]
		dummy [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_signal_accumulator_true_handled"]

	signal_accumulator_first_wins: make routine! compose/deep [[
		ihint [pointer]
		return_accu [pointer]
		handler_return [pointer]
		dummy [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_signal_accumulator_first_wins"]

	signal_handlers_destroy: make routine! compose/deep [[
		instance [pointer]
		return: [void]
		abi: default
	] (gobject) "g_signal_handlers_destroy"]

	date_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_date_get_type"]

	strv_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_strv_get_type"]

	gstring_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_gstring_get_type"]

	hash_table_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_hash_table_get_type"]

	array_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_array_get_type"]

	byte_array_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_byte_array_get_type"]

	ptr_array_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_ptr_array_get_type"]

	bytes_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_bytes_get_type"]

	variant_type_get_gtype: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_variant_type_get_gtype"]

	regex_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_regex_get_type"]

	match_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_match_info_get_type"]

	error_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_error_get_type"]

	date_time_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_date_time_get_type"]

	time_zone_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_time_zone_get_type"]

	io_channel_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_io_channel_get_type"]

	io_condition_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_io_condition_get_type"]

	variant_builder_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_variant_builder_get_type"]

	variant_dict_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_variant_dict_get_type"]

	key_file_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_key_file_get_type"]

	main_loop_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_main_loop_get_type"]

	main_context_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_main_context_get_type"]

	source_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_source_get_type"]

	pollfd_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_pollfd_get_type"]

	thread_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_thread_get_type"]

	checksum_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_checksum_get_type"]

	markup_parse_context_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_markup_parse_context_get_type"]

	mapped_file_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_mapped_file_get_type"]

	boxed_copy: make routine! compose/deep [[
		boxed_type [uint64]
		src_boxed [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_boxed_copy"]

	boxed_free: make routine! compose/deep [[
		boxed_type [uint64]
		boxed [pointer]
		return: [void]
		abi: default
	] (gobject) "g_boxed_free"]

	value_set_boxed: make routine! compose/deep [[
		value [pointer]
		v_boxed [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_boxed"]

	value_set_static_boxed: make routine! compose/deep [[
		value [pointer]
		v_boxed [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_static_boxed"]

	value_take_boxed: make routine! compose/deep [[
		value [pointer]
		v_boxed [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_take_boxed"]

	value_get_boxed: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_boxed"]

	value_dup_boxed: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_dup_boxed"]

	boxed_type_register_static: make routine! compose/deep [[
		name [pointer]
		boxed_copy [pointer]
		boxed_free [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_boxed_type_register_static"]

	closure_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_closure_get_type"]

	value_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_value_get_type"]

	initially_unowned_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_initially_unowned_get_type"]

	object_class_install_property: make routine! compose/deep [[
		oclass [pointer]
		property_id [uint32]
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_class_install_property"]

	object_class_find_property: make routine! compose/deep [[
		oclass [pointer]
		property_name [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_class_find_property"]

	object_class_list_properties: make routine! compose/deep [[
		oclass [pointer]
		n_properties [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_class_list_properties"]

	object_class_override_property: make routine! compose/deep [[
		oclass [pointer]
		property_id [uint32]
		name [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_class_override_property"]

	object_class_install_properties: make routine! compose/deep [[
		oclass [pointer]
		n_pspecs [uint32]
		pspecs [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_class_install_properties"]

	object_interface_install_property: make routine! compose/deep [[
		g_iface [pointer]
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_interface_install_property"]

	object_interface_find_property: make routine! compose/deep [[
		g_iface [pointer]
		property_name [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_interface_find_property"]

	object_interface_list_properties: make routine! compose/deep [[
		g_iface [pointer]
		n_properties_p [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_interface_list_properties"]

	object_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_object_get_type"]

	object_new: make routine! compose/deep [[
		object_type [uint64]
		first_property_name [pointer]
		...
		return: [pointer]
		abi: default
	] (gobject) "g_object_new"]

	object_newv: make routine! compose/deep [[
		object_type [uint64]
		n_parameters [uint32]
		parameters [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_newv"]

	object_new_valist: make routine! compose/deep [[
		object_type [uint64]
		first_property_name [pointer]
		var_args [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_object_new_valist"]

	object_set: make routine! compose/deep [[
		object [pointer]
		first_property_name [pointer]
		...
		return: [void]
		abi: default
	] (gobject) "g_object_set"]

	object_get: make routine! compose/deep [[
		object [pointer]
		first_property_name [pointer]
		...
		return: [void]
		abi: default
	] (gobject) "g_object_get"]

	object_connect: make routine! compose/deep [[
		object [pointer]
		signal_spec [pointer]
		...
		return: [pointer]
		abi: default
	] (gobject) "g_object_connect"]

	object_disconnect: make routine! compose/deep [[
		object [pointer]
		signal_spec [pointer]
		...
		return: [void]
		abi: default
	] (gobject) "g_object_disconnect"]

	object_set_valist: make routine! compose/deep [[
		object [pointer]
		first_property_name [pointer]
		var_args [int32]
		return: [void]
		abi: default
	] (gobject) "g_object_set_valist"]

	object_get_valist: make routine! compose/deep [[
		object [pointer]
		first_property_name [pointer]
		var_args [int32]
		return: [void]
		abi: default
	] (gobject) "g_object_get_valist"]

	object_set_property: make routine! compose/deep [[
		object [pointer]
		property_name [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_set_property"]

	object_get_property: make routine! compose/deep [[
		object [pointer]
		property_name [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_get_property"]

	object_freeze_notify: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_freeze_notify"]

	object_notify: make routine! compose/deep [[
		object [pointer]
		property_name [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_notify"]

	object_notify_by_pspec: make routine! compose/deep [[
		object [pointer]
		pspec [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_notify_by_pspec"]

	object_thaw_notify: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_thaw_notify"]

	object_is_floating: make routine! compose/deep [[
		object [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_object_is_floating"]

	object_ref_sink: make routine! compose/deep [[
		object [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_ref_sink"]

	object_ref: make routine! compose/deep [[
		object [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_ref"]

	object_unref: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_unref"]

	object_weak_ref: make routine! compose/deep [[
		object [pointer]
		notify [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_weak_ref"]

	object_weak_unref: make routine! compose/deep [[
		object [pointer]
		notify [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_weak_unref"]

	object_add_weak_pointer: make routine! compose/deep [[
		object [pointer]
		weak_pointer_location [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_add_weak_pointer"]

	object_remove_weak_pointer: make routine! compose/deep [[
		object [pointer]
		weak_pointer_location [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_remove_weak_pointer"]

	object_add_toggle_ref: make routine! compose/deep [[
		object [pointer]
		notify [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_add_toggle_ref"]

	object_remove_toggle_ref: make routine! compose/deep [[
		object [pointer]
		notify [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_remove_toggle_ref"]

	object_get_qdata: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_object_get_qdata"]

	object_set_qdata: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_set_qdata"]

	object_set_qdata_full: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		data [pointer]
		destroy [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_set_qdata_full"]

	object_steal_qdata: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_object_steal_qdata"]

	object_dup_qdata: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		dup_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_dup_qdata"]

	object_replace_qdata: make routine! compose/deep [[
		object [pointer]
		quark [uint32]
		oldval [pointer]
		newval [pointer]
		destroy [pointer]
		old_destroy [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_object_replace_qdata"]

	object_get_data: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_get_data"]

	object_set_data: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_set_data"]

	object_set_data_full: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		data [pointer]
		destroy [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_set_data_full"]

	object_steal_data: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_steal_data"]

	object_dup_data: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		dup_func [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_dup_data"]

	object_replace_data: make routine! compose/deep [[
		object [pointer]
		key [pointer]
		oldval [pointer]
		newval [pointer]
		destroy [pointer]
		old_destroy [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_object_replace_data"]

	object_watch_closure: make routine! compose/deep [[
		object [pointer]
		closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_watch_closure"]

	cclosure_new_object: make routine! compose/deep [[
		callback_func [pointer]
		object [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_cclosure_new_object"]

	cclosure_new_object_swap: make routine! compose/deep [[
		callback_func [pointer]
		object [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_cclosure_new_object_swap"]

	closure_new_object: make routine! compose/deep [[
		sizeof_closure [uint32]
		object [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_closure_new_object"]

	value_set_object: make routine! compose/deep [[
		value [pointer]
		v_object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_object"]

	value_get_object: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_object"]

	value_dup_object: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_dup_object"]

	signal_connect_object: make routine! compose/deep [[
		instance [pointer]
		detailed_signal [pointer]
		c_handler [pointer]
		gobject [pointer]
		connect_flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_signal_connect_object"]

	object_force_floating: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_force_floating"]

	object_run_dispose: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_object_run_dispose"]

	value_take_object: make routine! compose/deep [[
		value [pointer]
		v_object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_take_object"]

	clear_object: make routine! compose/deep [[
		object_ptr [pointer]
		return: [void]
		abi: default
	] (gobject) "g_clear_object"]

	weak_ref_init: make routine! compose/deep [[
		weak_ref [pointer]
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_weak_ref_init"]

	weak_ref_clear: make routine! compose/deep [[
		weak_ref [pointer]
		return: [void]
		abi: default
	] (gobject) "g_weak_ref_clear"]

	weak_ref_get: make routine! compose/deep [[
		weak_ref [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_weak_ref_get"]

	weak_ref_set: make routine! compose/deep [[
		weak_ref [pointer]
		object [pointer]
		return: [void]
		abi: default
	] (gobject) "g_weak_ref_set"]

	binding_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_binding_flags_get_type"]

	binding_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_binding_get_type"]

	binding_get_flags: make routine! compose/deep [[
		binding [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_binding_get_flags"]

	binding_get_source: make routine! compose/deep [[
		binding [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_binding_get_source"]

	binding_get_target: make routine! compose/deep [[
		binding [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_binding_get_target"]

	binding_get_source_property: make routine! compose/deep [[
		binding [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_binding_get_source_property"]

	binding_get_target_property: make routine! compose/deep [[
		binding [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_binding_get_target_property"]

	binding_unbind: make routine! compose/deep [[
		binding [pointer]
		return: [void]
		abi: default
	] (gobject) "g_binding_unbind"]

	object_bind_property: make routine! compose/deep [[
		source [pointer]
		source_property [pointer]
		target [pointer]
		target_property [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_object_bind_property"]

	object_bind_property_full: make routine! compose/deep [[
		source [pointer]
		source_property [pointer]
		target [pointer]
		target_property [pointer]
		flags [int32]
		transform_to [pointer]
		transform_from [pointer]
		user_data [pointer]
		notify [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_bind_property_full"]

	object_bind_property_with_closures: make routine! compose/deep [[
		source [pointer]
		source_property [pointer]
		target [pointer]
		target_property [pointer]
		flags [int32]
		transform_to [pointer]
		transform_from [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_object_bind_property_with_closures"]

	enum_get_value: make routine! compose/deep [[
		enum_class [pointer]
		value [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_enum_get_value"]

	enum_get_value_by_name: make routine! compose/deep [[
		enum_class [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_enum_get_value_by_name"]

	enum_get_value_by_nick: make routine! compose/deep [[
		enum_class [pointer]
		nick [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_enum_get_value_by_nick"]

	flags_get_first_value: make routine! compose/deep [[
		flags_class [pointer]
		value [uint32]
		return: [pointer]
		abi: default
	] (gobject) "g_flags_get_first_value"]

	flags_get_value_by_name: make routine! compose/deep [[
		flags_class [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_flags_get_value_by_name"]

	flags_get_value_by_nick: make routine! compose/deep [[
		flags_class [pointer]
		nick [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_flags_get_value_by_nick"]

	value_set_enum: make routine! compose/deep [[
		value [pointer]
		v_enum [int32]
		return: [void]
		abi: default
	] (gobject) "g_value_set_enum"]

	value_get_enum: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_value_get_enum"]

	value_set_flags: make routine! compose/deep [[
		value [pointer]
		v_flags [uint32]
		return: [void]
		abi: default
	] (gobject) "g_value_set_flags"]

	value_get_flags: make routine! compose/deep [[
		value [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_value_get_flags"]

	enum_register_static: make routine! compose/deep [[
		name [pointer]
		const_static_values [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_enum_register_static"]

	flags_register_static: make routine! compose/deep [[
		name [pointer]
		const_static_values [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_flags_register_static"]

	enum_complete_type_info: make routine! compose/deep [[
		g_enum_type [uint64]
		info [pointer]
		const_values [pointer]
		return: [void]
		abi: default
	] (gobject) "g_enum_complete_type_info"]

	flags_complete_type_info: make routine! compose/deep [[
		g_flags_type [uint64]
		info [pointer]
		const_values [pointer]
		return: [void]
		abi: default
	] (gobject) "g_flags_complete_type_info"]

	param_spec_char: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [int8]
		maximum [int8]
		default_value [int8]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_char"]

	param_spec_uchar: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [uint8]
		maximum [uint8]
		default_value [uint8]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_uchar"]

	param_spec_boolean: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		default_value [int32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_boolean"]

	param_spec_int: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [int32]
		maximum [int32]
		default_value [int32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_int"]

	param_spec_uint: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [uint32]
		maximum [uint32]
		default_value [uint32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_uint"]

	param_spec_long: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [int64]
		maximum [int64]
		default_value [int64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_long"]

	param_spec_ulong: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [uint64]
		maximum [uint64]
		default_value [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_ulong"]

	param_spec_int64: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [int64]
		maximum [int64]
		default_value [int64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_int64"]

	param_spec_uint64: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [uint64]
		maximum [uint64]
		default_value [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_uint64"]

	param_spec_unichar: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		default_value [uint32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_unichar"]

	param_spec_enum: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		enum_type [uint64]
		default_value [int32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_enum"]

	param_spec_flags: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		flags_type [uint64]
		default_value [uint32]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_flags"]

	param_spec_float: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [float]
		maximum [float]
		default_value [float]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_float"]

	param_spec_double: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		minimum [double]
		maximum [double]
		default_value [double]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_double"]

	param_spec_string: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		default_value [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_string"]

	param_spec_param: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		param_type [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_param"]

	param_spec_boxed: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		boxed_type [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_boxed"]

	param_spec_pointer: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_pointer"]

	param_spec_value_array: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		element_spec [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_value_array"]

	param_spec_object: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		object_type [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_object"]

	param_spec_override: make routine! compose/deep [[
		name [pointer]
		overridden [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_override"]

	param_spec_gtype: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		is_a_type [uint64]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_gtype"]

	param_spec_variant: make routine! compose/deep [[
		name [pointer]
		nick [pointer]
		blurb [pointer]
		type [pointer]
		default_value [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gobject) "g_param_spec_variant"]

	source_set_closure: make routine! compose/deep [[
		source [pointer]
		closure [pointer]
		return: [void]
		abi: default
	] (gobject) "g_source_set_closure"]

	source_set_dummy_callback: make routine! compose/deep [[
		source [pointer]
		return: [void]
		abi: default
	] (gobject) "g_source_set_dummy_callback"]

	type_module_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_type_module_get_type"]

	type_module_use: make routine! compose/deep [[
		module [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_type_module_use"]

	type_module_unuse: make routine! compose/deep [[
		module [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_module_unuse"]

	type_module_set_name: make routine! compose/deep [[
		module [pointer]
		name [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_module_set_name"]

	type_module_register_type: make routine! compose/deep [[
		module [pointer]
		parent_type [uint64]
		type_name [pointer]
		type_info [pointer]
		flags [int32]
		return: [uint64]
		abi: default
	] (gobject) "g_type_module_register_type"]

	type_module_add_interface: make routine! compose/deep [[
		module [pointer]
		instance_type [uint64]
		interface_type [uint64]
		interface_info [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_module_add_interface"]

	type_module_register_enum: make routine! compose/deep [[
		module [pointer]
		name [pointer]
		const_static_values [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_type_module_register_enum"]

	type_module_register_flags: make routine! compose/deep [[
		module [pointer]
		name [pointer]
		const_static_values [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_type_module_register_flags"]

	type_plugin_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_type_plugin_get_type"]

	type_plugin_use: make routine! compose/deep [[
		plugin [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_plugin_use"]

	type_plugin_unuse: make routine! compose/deep [[
		plugin [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_plugin_unuse"]

	type_plugin_complete_type_info: make routine! compose/deep [[
		plugin [pointer]
		g_type [uint64]
		info [pointer]
		value_table [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_plugin_complete_type_info"]

	type_plugin_complete_interface_info: make routine! compose/deep [[
		plugin [pointer]
		instance_type [uint64]
		interface_type [uint64]
		info [pointer]
		return: [void]
		abi: default
	] (gobject) "g_type_plugin_complete_interface_info"]

	value_set_schar: make routine! compose/deep [[
		value [pointer]
		v_char [int8]
		return: [void]
		abi: default
	] (gobject) "g_value_set_schar"]

	value_get_schar: make routine! compose/deep [[
		value [pointer]
		return: [int8]
		abi: default
	] (gobject) "g_value_get_schar"]

	value_set_uchar: make routine! compose/deep [[
		value [pointer]
		v_uchar [uint8]
		return: [void]
		abi: default
	] (gobject) "g_value_set_uchar"]

	value_get_uchar: make routine! compose/deep [[
		value [pointer]
		return: [uint8]
		abi: default
	] (gobject) "g_value_get_uchar"]

	value_set_boolean: make routine! compose/deep [[
		value [pointer]
		v_boolean [int32]
		return: [void]
		abi: default
	] (gobject) "g_value_set_boolean"]

	value_get_boolean: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_value_get_boolean"]

	value_set_int: make routine! compose/deep [[
		value [pointer]
		v_int [int32]
		return: [void]
		abi: default
	] (gobject) "g_value_set_int"]

	value_get_int: make routine! compose/deep [[
		value [pointer]
		return: [int32]
		abi: default
	] (gobject) "g_value_get_int"]

	value_set_uint: make routine! compose/deep [[
		value [pointer]
		v_uint [uint32]
		return: [void]
		abi: default
	] (gobject) "g_value_set_uint"]

	value_get_uint: make routine! compose/deep [[
		value [pointer]
		return: [uint32]
		abi: default
	] (gobject) "g_value_get_uint"]

	value_set_long: make routine! compose/deep [[
		value [pointer]
		v_long [int64]
		return: [void]
		abi: default
	] (gobject) "g_value_set_long"]

	value_get_long: make routine! compose/deep [[
		value [pointer]
		return: [int64]
		abi: default
	] (gobject) "g_value_get_long"]

	value_set_ulong: make routine! compose/deep [[
		value [pointer]
		v_ulong [uint64]
		return: [void]
		abi: default
	] (gobject) "g_value_set_ulong"]

	value_get_ulong: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_value_get_ulong"]

	value_set_int64: make routine! compose/deep [[
		value [pointer]
		v_int64 [int64]
		return: [void]
		abi: default
	] (gobject) "g_value_set_int64"]

	value_get_int64: make routine! compose/deep [[
		value [pointer]
		return: [int64]
		abi: default
	] (gobject) "g_value_get_int64"]

	value_set_uint64: make routine! compose/deep [[
		value [pointer]
		v_uint64 [uint64]
		return: [void]
		abi: default
	] (gobject) "g_value_set_uint64"]

	value_get_uint64: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_value_get_uint64"]

	value_set_float: make routine! compose/deep [[
		value [pointer]
		v_float [float]
		return: [void]
		abi: default
	] (gobject) "g_value_set_float"]

	value_get_float: make routine! compose/deep [[
		value [pointer]
		return: [float]
		abi: default
	] (gobject) "g_value_get_float"]

	value_set_double: make routine! compose/deep [[
		value [pointer]
		v_double [double]
		return: [void]
		abi: default
	] (gobject) "g_value_set_double"]

	value_get_double: make routine! compose/deep [[
		value [pointer]
		return: [double]
		abi: default
	] (gobject) "g_value_get_double"]

	value_set_string: make routine! compose/deep [[
		value [pointer]
		v_string [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_string"]

	value_set_static_string: make routine! compose/deep [[
		value [pointer]
		v_string [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_static_string"]

	value_get_string: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_string"]

	value_dup_string: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_dup_string"]

	value_set_pointer: make routine! compose/deep [[
		value [pointer]
		v_pointer [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_pointer"]

	value_get_pointer: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_pointer"]

	gtype_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gobject) "g_gtype_get_type"]

	value_set_gtype: make routine! compose/deep [[
		value [pointer]
		v_gtype [uint64]
		return: [void]
		abi: default
	] (gobject) "g_value_set_gtype"]

	value_get_gtype: make routine! compose/deep [[
		value [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_value_get_gtype"]

	value_set_variant: make routine! compose/deep [[
		value [pointer]
		variant [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_set_variant"]

	value_take_variant: make routine! compose/deep [[
		value [pointer]
		variant [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_take_variant"]

	value_get_variant: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_get_variant"]

	value_dup_variant: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_value_dup_variant"]

	pointer_type_register_static: make routine! compose/deep [[
		name [pointer]
		return: [uint64]
		abi: default
	] (gobject) "g_pointer_type_register_static"]

	strdup_value_contents: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gobject) "g_strdup_value_contents"]

	value_take_string: make routine! compose/deep [[
		value [pointer]
		v_string [pointer]
		return: [void]
		abi: default
	] (gobject) "g_value_take_string"]

	module_supported: make routine! compose/deep [[
		return: [int32]
		abi: default
	] (gmodule) "g_module_supported"]

	module_open: make routine! compose/deep [[
		file_name [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gmodule) "g_module_open"]

	module_close: make routine! compose/deep [[
		module [pointer]
		return: [int32]
		abi: default
	] (gmodule) "g_module_close"]

	module_make_resident: make routine! compose/deep [[
		module [pointer]
		return: [void]
		abi: default
	] (gmodule) "g_module_make_resident"]

	module_error: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gmodule) "g_module_error"]

	module_symbol: make routine! compose/deep [[
		module [pointer]
		symbol_name [pointer]
		symbol [pointer]
		return: [int32]
		abi: default
	] (gmodule) "g_module_symbol"]

	module_name: make routine! compose/deep [[
		module [pointer]
		return: [pointer]
		abi: default
	] (gmodule) "g_module_name"]

	module_build_path: make routine! compose/deep [[
		directory [pointer]
		module_name [pointer]
		return: [pointer]
		abi: default
	] (gmodule) "g_module_build_path"]

	action_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_action_get_type"]

	action_get_name: make routine! compose/deep [[
		action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_get_name"]

	action_get_parameter_type: make routine! compose/deep [[
		action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_get_parameter_type"]

	action_get_state_type: make routine! compose/deep [[
		action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_get_state_type"]

	action_get_state_hint: make routine! compose/deep [[
		action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_get_state_hint"]

	action_get_enabled: make routine! compose/deep [[
		action [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_get_enabled"]

	action_get_state: make routine! compose/deep [[
		action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_get_state"]

	action_change_state: make routine! compose/deep [[
		action [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_change_state"]

	action_activate: make routine! compose/deep [[
		action [pointer]
		parameter [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_activate"]

	action_name_is_valid: make routine! compose/deep [[
		action_name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_name_is_valid"]

	action_parse_detailed_name: make routine! compose/deep [[
		detailed_name [pointer]
		action_name [pointer]
		target_value [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_parse_detailed_name"]

	action_print_detailed_name: make routine! compose/deep [[
		action_name [pointer]
		target_value [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_print_detailed_name"]

	action_group_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_action_group_get_type"]

	action_group_has_action: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_group_has_action"]

	action_group_list_actions: make routine! compose/deep [[
		action_group [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_group_list_actions"]

	action_group_get_action_parameter_type: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_group_get_action_parameter_type"]

	action_group_get_action_state_type: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_group_get_action_state_type"]

	action_group_get_action_state_hint: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_group_get_action_state_hint"]

	action_group_get_action_enabled: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_group_get_action_enabled"]

	action_group_get_action_state: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_group_get_action_state"]

	action_group_change_action_state: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_group_change_action_state"]

	action_group_activate_action: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		parameter [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_group_activate_action"]

	action_group_action_added: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_group_action_added"]

	action_group_action_removed: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_group_action_removed"]

	action_group_action_enabled_changed: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		enabled [int32]
		return: [void]
		abi: default
	] (gio) "g_action_group_action_enabled_changed"]

	action_group_action_state_changed: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		state [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_group_action_state_changed"]

	action_group_query_action: make routine! compose/deep [[
		action_group [pointer]
		action_name [pointer]
		enabled [pointer]
		parameter_type [pointer]
		state_type [pointer]
		state_hint [pointer]
		state [pointer]
		return: [int32]
		abi: default
	] (gio) "g_action_group_query_action"]

	dbus_connection_export_action_group: make routine! compose/deep [[
		connection [pointer]
		object_path [pointer]
		action_group [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_export_action_group"]

	dbus_connection_unexport_action_group: make routine! compose/deep [[
		connection [pointer]
		export_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_unexport_action_group"]

	action_map_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_action_map_get_type"]

	action_map_lookup_action: make routine! compose/deep [[
		action_map [pointer]
		action_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_action_map_lookup_action"]

	action_map_add_action: make routine! compose/deep [[
		action_map [pointer]
		action [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_map_add_action"]

	action_map_remove_action: make routine! compose/deep [[
		action_map [pointer]
		action_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_map_remove_action"]

	action_map_add_action_entries: make routine! compose/deep [[
		action_map [pointer]
		entries [pointer]
		n_entries [int32]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_action_map_add_action_entries"]

	app_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_app_info_get_type"]

	app_info_create_from_commandline: make routine! compose/deep [[
		commandline [pointer]
		application_name [pointer]
		flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_create_from_commandline"]

	app_info_dup: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_dup"]

	app_info_equal: make routine! compose/deep [[
		appinfo1 [pointer]
		appinfo2 [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_equal"]

	app_info_get_id: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_id"]

	app_info_get_name: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_name"]

	app_info_get_display_name: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_display_name"]

	app_info_get_description: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_description"]

	app_info_get_executable: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_executable"]

	app_info_get_commandline: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_commandline"]

	app_info_get_icon: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_icon"]

	app_info_launch: make routine! compose/deep [[
		appinfo [pointer]
		files [pointer]
		launch_context [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_launch"]

	app_info_supports_uris: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_supports_uris"]

	app_info_supports_files: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_supports_files"]

	app_info_launch_uris: make routine! compose/deep [[
		appinfo [pointer]
		uris [pointer]
		launch_context [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_launch_uris"]

	app_info_should_show: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_should_show"]

	app_info_set_as_default_for_type: make routine! compose/deep [[
		appinfo [pointer]
		content_type [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_set_as_default_for_type"]

	app_info_set_as_default_for_extension: make routine! compose/deep [[
		appinfo [pointer]
		extension [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_set_as_default_for_extension"]

	app_info_add_supports_type: make routine! compose/deep [[
		appinfo [pointer]
		content_type [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_add_supports_type"]

	app_info_can_remove_supports_type: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_can_remove_supports_type"]

	app_info_remove_supports_type: make routine! compose/deep [[
		appinfo [pointer]
		content_type [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_remove_supports_type"]

	app_info_get_supported_types: make routine! compose/deep [[
		appinfo [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_supported_types"]

	app_info_can_delete: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_can_delete"]

	app_info_delete: make routine! compose/deep [[
		appinfo [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_delete"]

	app_info_set_as_last_used_for_type: make routine! compose/deep [[
		appinfo [pointer]
		content_type [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_set_as_last_used_for_type"]

	app_info_get_all: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_all"]

	app_info_get_all_for_type: make routine! compose/deep [[
		content_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_all_for_type"]

	app_info_get_recommended_for_type: make routine! compose/deep [[
		content_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_recommended_for_type"]

	app_info_get_fallback_for_type: make routine! compose/deep [[
		content_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_fallback_for_type"]

	app_info_reset_type_associations: make routine! compose/deep [[
		content_type [pointer]
		return: [void]
		abi: default
	] (gio) "g_app_info_reset_type_associations"]

	app_info_get_default_for_type: make routine! compose/deep [[
		content_type [pointer]
		must_support_uris [int32]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_default_for_type"]

	app_info_get_default_for_uri_scheme: make routine! compose/deep [[
		uri_scheme [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_info_get_default_for_uri_scheme"]

	app_info_launch_default_for_uri: make routine! compose/deep [[
		uri [pointer]
		launch_context [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_app_info_launch_default_for_uri"]

	app_launch_context_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_app_launch_context_get_type"]

	app_launch_context_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_app_launch_context_new"]

	app_launch_context_setenv: make routine! compose/deep [[
		context [pointer]
		variable [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_app_launch_context_setenv"]

	app_launch_context_unsetenv: make routine! compose/deep [[
		context [pointer]
		variable [pointer]
		return: [void]
		abi: default
	] (gio) "g_app_launch_context_unsetenv"]

	app_launch_context_get_environment: make routine! compose/deep [[
		context [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_launch_context_get_environment"]

	app_launch_context_get_display: make routine! compose/deep [[
		context [pointer]
		info [pointer]
		files [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_launch_context_get_display"]

	app_launch_context_get_startup_notify_id: make routine! compose/deep [[
		context [pointer]
		info [pointer]
		files [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_app_launch_context_get_startup_notify_id"]

	app_launch_context_launch_failed: make routine! compose/deep [[
		context [pointer]
		startup_notify_id [pointer]
		return: [void]
		abi: default
	] (gio) "g_app_launch_context_launch_failed"]

	app_info_monitor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_app_info_monitor_get_type"]

	app_info_monitor_get: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_app_info_monitor_get"]

	application_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_application_get_type"]

	application_id_is_valid: make routine! compose/deep [[
		application_id [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_id_is_valid"]

	application_new: make routine! compose/deep [[
		application_id [pointer]
		flags [int32]
		return: [pointer]
		abi: default
	] (gio) "g_application_new"]

	application_get_application_id: make routine! compose/deep [[
		application [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_get_application_id"]

	application_set_application_id: make routine! compose/deep [[
		application [pointer]
		application_id [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_set_application_id"]

	application_get_dbus_connection: make routine! compose/deep [[
		application [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_get_dbus_connection"]

	application_get_dbus_object_path: make routine! compose/deep [[
		application [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_get_dbus_object_path"]

	application_get_inactivity_timeout: make routine! compose/deep [[
		application [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_application_get_inactivity_timeout"]

	application_set_inactivity_timeout: make routine! compose/deep [[
		application [pointer]
		inactivity_timeout [uint32]
		return: [void]
		abi: default
	] (gio) "g_application_set_inactivity_timeout"]

	application_get_flags: make routine! compose/deep [[
		application [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_get_flags"]

	application_set_flags: make routine! compose/deep [[
		application [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_application_set_flags"]

	application_get_resource_base_path: make routine! compose/deep [[
		application [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_get_resource_base_path"]

	application_set_resource_base_path: make routine! compose/deep [[
		application [pointer]
		resource_path [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_set_resource_base_path"]

	application_add_main_option_entries: make routine! compose/deep [[
		application [pointer]
		entries [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_add_main_option_entries"]

	application_add_main_option: make routine! compose/deep [[
		application [pointer]
		long_name [pointer]
		short_name [int8]
		flags [int32]
		arg [int32]
		description [pointer]
		arg_description [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_add_main_option"]

	application_add_option_group: make routine! compose/deep [[
		application [pointer]
		group [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_add_option_group"]

	application_get_is_registered: make routine! compose/deep [[
		application [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_get_is_registered"]

	application_get_is_remote: make routine! compose/deep [[
		application [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_get_is_remote"]

	application_register: make routine! compose/deep [[
		application [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_register"]

	application_hold: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_hold"]

	application_release: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_release"]

	application_activate: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_activate"]

	application_open: make routine! compose/deep [[
		application [pointer]
		files [pointer]
		n_files [int32]
		hint [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_open"]

	application_run: make routine! compose/deep [[
		application [pointer]
		argc [int32]
		argv [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_run"]

	application_quit: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_quit"]

	application_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_application_get_default"]

	application_set_default: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_set_default"]

	application_mark_busy: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_mark_busy"]

	application_unmark_busy: make routine! compose/deep [[
		application [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_unmark_busy"]

	application_send_notification: make routine! compose/deep [[
		application [pointer]
		id [pointer]
		notification [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_send_notification"]

	application_withdraw_notification: make routine! compose/deep [[
		application [pointer]
		id [pointer]
		return: [void]
		abi: default
	] (gio) "g_application_withdraw_notification"]

	application_command_line_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_application_command_line_get_type"]

	application_command_line_get_arguments: make routine! compose/deep [[
		cmdline [pointer]
		argc [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_arguments"]

	application_command_line_get_options_dict: make routine! compose/deep [[
		cmdline [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_options_dict"]

	application_command_line_get_stdin: make routine! compose/deep [[
		cmdline [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_stdin"]

	application_command_line_get_environ: make routine! compose/deep [[
		cmdline [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_environ"]

	application_command_line_getenv: make routine! compose/deep [[
		cmdline [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_getenv"]

	application_command_line_get_cwd: make routine! compose/deep [[
		cmdline [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_cwd"]

	application_command_line_get_is_remote: make routine! compose/deep [[
		cmdline [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_command_line_get_is_remote"]

	application_command_line_print: make routine! compose/deep [[
		cmdline [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_application_command_line_print"]

	application_command_line_printerr: make routine! compose/deep [[
		cmdline [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_application_command_line_printerr"]

	application_command_line_get_exit_status: make routine! compose/deep [[
		cmdline [pointer]
		return: [int32]
		abi: default
	] (gio) "g_application_command_line_get_exit_status"]

	application_command_line_set_exit_status: make routine! compose/deep [[
		cmdline [pointer]
		exit_status [int32]
		return: [void]
		abi: default
	] (gio) "g_application_command_line_set_exit_status"]

	application_command_line_get_platform_data: make routine! compose/deep [[
		cmdline [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_get_platform_data"]

	application_command_line_create_file_for_arg: make routine! compose/deep [[
		cmdline [pointer]
		arg [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_application_command_line_create_file_for_arg"]

	initable_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_initable_get_type"]

	initable_init: make routine! compose/deep [[
		initable [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_initable_init"]

	initable_new: make routine! compose/deep [[
		object_type [uint64]
		cancellable [pointer]
		error [pointer]
		first_property_name [pointer]
		...
		return: [pointer]
		abi: default
	] (gio) "g_initable_new"]

	initable_newv: make routine! compose/deep [[
		object_type [uint64]
		n_parameters [uint32]
		parameters [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_initable_newv"]

	initable_new_valist: make routine! compose/deep [[
		object_type [uint64]
		first_property_name [pointer]
		var_args [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_initable_new_valist"]

	async_initable_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_async_initable_get_type"]

	async_initable_init_async: make routine! compose/deep [[
		initable [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_async_initable_init_async"]

	async_initable_init_finish: make routine! compose/deep [[
		initable [pointer]
		res [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_async_initable_init_finish"]

	async_initable_new_async: make routine! compose/deep [[
		object_type [uint64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		first_property_name [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_async_initable_new_async"]

	async_initable_newv_async: make routine! compose/deep [[
		object_type [uint64]
		n_parameters [uint32]
		parameters [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_async_initable_newv_async"]

	async_initable_new_valist_async: make routine! compose/deep [[
		object_type [uint64]
		first_property_name [pointer]
		var_args [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_async_initable_new_valist_async"]

	async_initable_new_finish: make routine! compose/deep [[
		initable [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_async_initable_new_finish"]

	async_result_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_async_result_get_type"]

	async_result_get_user_data: make routine! compose/deep [[
		res [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_async_result_get_user_data"]

	async_result_get_source_object: make routine! compose/deep [[
		res [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_async_result_get_source_object"]

	async_result_legacy_propagate_error: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_async_result_legacy_propagate_error"]

	async_result_is_tagged: make routine! compose/deep [[
		res [pointer]
		source_tag [pointer]
		return: [int32]
		abi: default
	] (gio) "g_async_result_is_tagged"]

	input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_input_stream_get_type"]

	input_stream_read: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_input_stream_read"]

	input_stream_read_all: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		bytes_read [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_read_all"]

	input_stream_read_bytes: make routine! compose/deep [[
		stream [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_input_stream_read_bytes"]

	input_stream_skip: make routine! compose/deep [[
		stream [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_input_stream_skip"]

	input_stream_close: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_close"]

	input_stream_read_async: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_input_stream_read_async"]

	input_stream_read_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_input_stream_read_finish"]

	input_stream_read_bytes_async: make routine! compose/deep [[
		stream [pointer]
		count [uint64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_input_stream_read_bytes_async"]

	input_stream_read_bytes_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_input_stream_read_bytes_finish"]

	input_stream_skip_async: make routine! compose/deep [[
		stream [pointer]
		count [uint64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_input_stream_skip_async"]

	input_stream_skip_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_input_stream_skip_finish"]

	input_stream_close_async: make routine! compose/deep [[
		stream [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_input_stream_close_async"]

	input_stream_close_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_close_finish"]

	input_stream_is_closed: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_is_closed"]

	input_stream_has_pending: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_has_pending"]

	input_stream_set_pending: make routine! compose/deep [[
		stream [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_input_stream_set_pending"]

	input_stream_clear_pending: make routine! compose/deep [[
		stream [pointer]
		return: [void]
		abi: default
	] (gio) "g_input_stream_clear_pending"]

	filter_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_filter_input_stream_get_type"]

	filter_input_stream_get_base_stream: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_filter_input_stream_get_base_stream"]

	filter_input_stream_get_close_base_stream: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_filter_input_stream_get_close_base_stream"]

	filter_input_stream_set_close_base_stream: make routine! compose/deep [[
		stream [pointer]
		close_base [int32]
		return: [void]
		abi: default
	] (gio) "g_filter_input_stream_set_close_base_stream"]

	buffered_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_buffered_input_stream_get_type"]

	buffered_input_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_buffered_input_stream_new"]

	buffered_input_stream_new_sized: make routine! compose/deep [[
		base_stream [pointer]
		size [uint64]
		return: [pointer]
		abi: default
	] (gio) "g_buffered_input_stream_new_sized"]

	buffered_input_stream_get_buffer_size: make routine! compose/deep [[
		stream [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_buffered_input_stream_get_buffer_size"]

	buffered_input_stream_set_buffer_size: make routine! compose/deep [[
		stream [pointer]
		size [uint64]
		return: [void]
		abi: default
	] (gio) "g_buffered_input_stream_set_buffer_size"]

	buffered_input_stream_get_available: make routine! compose/deep [[
		stream [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_buffered_input_stream_get_available"]

	buffered_input_stream_peek: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		offset [uint64]
		count [uint64]
		return: [uint64]
		abi: default
	] (gio) "g_buffered_input_stream_peek"]

	buffered_input_stream_peek_buffer: make routine! compose/deep [[
		stream [pointer]
		count [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_buffered_input_stream_peek_buffer"]

	buffered_input_stream_fill: make routine! compose/deep [[
		stream [pointer]
		count [int64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_buffered_input_stream_fill"]

	buffered_input_stream_fill_async: make routine! compose/deep [[
		stream [pointer]
		count [int64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_buffered_input_stream_fill_async"]

	buffered_input_stream_fill_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_buffered_input_stream_fill_finish"]

	buffered_input_stream_read_byte: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_buffered_input_stream_read_byte"]

	output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_output_stream_get_type"]

	output_stream_write: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_write"]

	output_stream_write_all: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		bytes_written [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_write_all"]

	output_stream_printf: make routine! compose/deep [[
		stream [pointer]
		bytes_written [pointer]
		cancellable [pointer]
		error [pointer]
		format [pointer]
		...
		return: [int32]
		abi: default
	] (gio) "g_output_stream_printf"]

	output_stream_vprintf: make routine! compose/deep [[
		stream [pointer]
		bytes_written [pointer]
		cancellable [pointer]
		error [pointer]
		format [pointer]
		args [int32]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_vprintf"]

	output_stream_write_bytes: make routine! compose/deep [[
		stream [pointer]
		bytes [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_write_bytes"]

	output_stream_splice: make routine! compose/deep [[
		stream [pointer]
		source [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_splice"]

	output_stream_flush: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_flush"]

	output_stream_close: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_close"]

	output_stream_write_async: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_write_async"]

	output_stream_write_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_write_finish"]

	output_stream_write_bytes_async: make routine! compose/deep [[
		stream [pointer]
		bytes [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_write_bytes_async"]

	output_stream_write_bytes_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_write_bytes_finish"]

	output_stream_splice_async: make routine! compose/deep [[
		stream [pointer]
		source [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_splice_async"]

	output_stream_splice_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_output_stream_splice_finish"]

	output_stream_flush_async: make routine! compose/deep [[
		stream [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_flush_async"]

	output_stream_flush_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_flush_finish"]

	output_stream_close_async: make routine! compose/deep [[
		stream [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_close_async"]

	output_stream_close_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_close_finish"]

	output_stream_is_closed: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_is_closed"]

	output_stream_is_closing: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_is_closing"]

	output_stream_has_pending: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_has_pending"]

	output_stream_set_pending: make routine! compose/deep [[
		stream [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_output_stream_set_pending"]

	output_stream_clear_pending: make routine! compose/deep [[
		stream [pointer]
		return: [void]
		abi: default
	] (gio) "g_output_stream_clear_pending"]

	filter_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_filter_output_stream_get_type"]

	filter_output_stream_get_base_stream: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_filter_output_stream_get_base_stream"]

	filter_output_stream_get_close_base_stream: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_filter_output_stream_get_close_base_stream"]

	filter_output_stream_set_close_base_stream: make routine! compose/deep [[
		stream [pointer]
		close_base [int32]
		return: [void]
		abi: default
	] (gio) "g_filter_output_stream_set_close_base_stream"]

	buffered_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_buffered_output_stream_get_type"]

	buffered_output_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_buffered_output_stream_new"]

	buffered_output_stream_new_sized: make routine! compose/deep [[
		base_stream [pointer]
		size [uint64]
		return: [pointer]
		abi: default
	] (gio) "g_buffered_output_stream_new_sized"]

	buffered_output_stream_get_buffer_size: make routine! compose/deep [[
		stream [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_buffered_output_stream_get_buffer_size"]

	buffered_output_stream_set_buffer_size: make routine! compose/deep [[
		stream [pointer]
		size [uint64]
		return: [void]
		abi: default
	] (gio) "g_buffered_output_stream_set_buffer_size"]

	buffered_output_stream_get_auto_grow: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_buffered_output_stream_get_auto_grow"]

	buffered_output_stream_set_auto_grow: make routine! compose/deep [[
		stream [pointer]
		auto_grow [int32]
		return: [void]
		abi: default
	] (gio) "g_buffered_output_stream_set_auto_grow"]

	bytes_icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_bytes_icon_get_type"]

	bytes_icon_new: make routine! compose/deep [[
		bytes [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_bytes_icon_new"]

	bytes_icon_get_bytes: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_bytes_icon_get_bytes"]

	cancellable_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_cancellable_get_type"]

	cancellable_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_cancellable_new"]

	cancellable_is_cancelled: make routine! compose/deep [[
		cancellable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_cancellable_is_cancelled"]

	cancellable_set_error_if_cancelled: make routine! compose/deep [[
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_cancellable_set_error_if_cancelled"]

	cancellable_get_fd: make routine! compose/deep [[
		cancellable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_cancellable_get_fd"]

	cancellable_make_pollfd: make routine! compose/deep [[
		cancellable [pointer]
		pollfd [pointer]
		return: [int32]
		abi: default
	] (gio) "g_cancellable_make_pollfd"]

	cancellable_release_fd: make routine! compose/deep [[
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_cancellable_release_fd"]

	cancellable_source_new: make routine! compose/deep [[
		cancellable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_cancellable_source_new"]

	cancellable_get_current: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_cancellable_get_current"]

	cancellable_push_current: make routine! compose/deep [[
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_cancellable_push_current"]

	cancellable_pop_current: make routine! compose/deep [[
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_cancellable_pop_current"]

	cancellable_reset: make routine! compose/deep [[
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_cancellable_reset"]

	cancellable_connect: make routine! compose/deep [[
		cancellable [pointer]
		callback [pointer]
		data [pointer]
		data_destroy_func [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_cancellable_connect"]

	cancellable_disconnect: make routine! compose/deep [[
		cancellable [pointer]
		handler_id [uint64]
		return: [void]
		abi: default
	] (gio) "g_cancellable_disconnect"]

	cancellable_cancel: make routine! compose/deep [[
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_cancellable_cancel"]

	converter_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_converter_get_type"]

	converter_convert: make routine! compose/deep [[
		converter [pointer]
		inbuf [pointer]
		inbuf_size [uint64]
		outbuf [pointer]
		outbuf_size [uint64]
		flags [int32]
		bytes_read [pointer]
		bytes_written [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_converter_convert"]

	converter_reset: make routine! compose/deep [[
		converter [pointer]
		return: [void]
		abi: default
	] (gio) "g_converter_reset"]

	charset_converter_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_charset_converter_get_type"]

	charset_converter_new: make routine! compose/deep [[
		to_charset [pointer]
		from_charset [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_charset_converter_new"]

	charset_converter_set_use_fallback: make routine! compose/deep [[
		converter [pointer]
		use_fallback [int32]
		return: [void]
		abi: default
	] (gio) "g_charset_converter_set_use_fallback"]

	charset_converter_get_use_fallback: make routine! compose/deep [[
		converter [pointer]
		return: [int32]
		abi: default
	] (gio) "g_charset_converter_get_use_fallback"]

	charset_converter_get_num_fallbacks: make routine! compose/deep [[
		converter [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_charset_converter_get_num_fallbacks"]

	content_type_equals: make routine! compose/deep [[
		type1 [pointer]
		type2 [pointer]
		return: [int32]
		abi: default
	] (gio) "g_content_type_equals"]

	content_type_is_a: make routine! compose/deep [[
		type [pointer]
		supertype [pointer]
		return: [int32]
		abi: default
	] (gio) "g_content_type_is_a"]

	content_type_is_unknown: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (gio) "g_content_type_is_unknown"]

	content_type_get_description: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_get_description"]

	content_type_get_mime_type: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_get_mime_type"]

	content_type_get_icon: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_get_icon"]

	content_type_get_symbolic_icon: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_get_symbolic_icon"]

	content_type_get_generic_icon_name: make routine! compose/deep [[
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_get_generic_icon_name"]

	content_type_can_be_executable: make routine! compose/deep [[
		type [pointer]
		return: [int32]
		abi: default
	] (gio) "g_content_type_can_be_executable"]

	content_type_from_mime_type: make routine! compose/deep [[
		mime_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_from_mime_type"]

	content_type_guess: make routine! compose/deep [[
		filename [pointer]
		data [pointer]
		data_size [uint64]
		result_uncertain [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_guess"]

	content_type_guess_for_tree: make routine! compose/deep [[
		root [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_content_type_guess_for_tree"]

	content_types_get_registered: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_content_types_get_registered"]

	converter_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_converter_input_stream_get_type"]

	converter_input_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		converter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_converter_input_stream_new"]

	converter_input_stream_get_converter: make routine! compose/deep [[
		converter_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_converter_input_stream_get_converter"]

	converter_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_converter_output_stream_get_type"]

	converter_output_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		converter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_converter_output_stream_new"]

	converter_output_stream_get_converter: make routine! compose/deep [[
		converter_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_converter_output_stream_get_converter"]

	credentials_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_credentials_get_type"]

	credentials_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_credentials_new"]

	credentials_to_string: make routine! compose/deep [[
		credentials [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_credentials_to_string"]

	credentials_get_native: make routine! compose/deep [[
		credentials [pointer]
		native_type [int32]
		return: [pointer]
		abi: default
	] (gio) "g_credentials_get_native"]

	credentials_set_native: make routine! compose/deep [[
		credentials [pointer]
		native_type [int32]
		native [pointer]
		return: [void]
		abi: default
	] (gio) "g_credentials_set_native"]

	credentials_is_same_user: make routine! compose/deep [[
		credentials [pointer]
		other_credentials [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_credentials_is_same_user"]

	credentials_get_unix_pid: make routine! compose/deep [[
		credentials [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_credentials_get_unix_pid"]

	credentials_get_unix_user: make routine! compose/deep [[
		credentials [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_credentials_get_unix_user"]

	credentials_set_unix_user: make routine! compose/deep [[
		credentials [pointer]
		uid [uint32]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_credentials_set_unix_user"]

	data_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_data_input_stream_get_type"]

	data_input_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_new"]

	data_input_stream_set_byte_order: make routine! compose/deep [[
		stream [pointer]
		order [int32]
		return: [void]
		abi: default
	] (gio) "g_data_input_stream_set_byte_order"]

	data_input_stream_get_byte_order: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_input_stream_get_byte_order"]

	data_input_stream_set_newline_type: make routine! compose/deep [[
		stream [pointer]
		type [int32]
		return: [void]
		abi: default
	] (gio) "g_data_input_stream_set_newline_type"]

	data_input_stream_get_newline_type: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_input_stream_get_newline_type"]

	data_input_stream_read_byte: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [uint8]
		abi: default
	] (gio) "g_data_input_stream_read_byte"]

	data_input_stream_read_int16: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int16]
		abi: default
	] (gio) "g_data_input_stream_read_int16"]

	data_input_stream_read_uint16: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_data_input_stream_read_uint16"]

	data_input_stream_read_int32: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_input_stream_read_int32"]

	data_input_stream_read_uint32: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_data_input_stream_read_uint32"]

	data_input_stream_read_int64: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_data_input_stream_read_int64"]

	data_input_stream_read_uint64: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_data_input_stream_read_uint64"]

	data_input_stream_read_line: make routine! compose/deep [[
		stream [pointer]
		length [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_line"]

	data_input_stream_read_line_utf8: make routine! compose/deep [[
		stream [pointer]
		length [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_line_utf8"]

	data_input_stream_read_line_async: make routine! compose/deep [[
		stream [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_data_input_stream_read_line_async"]

	data_input_stream_read_line_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_line_finish"]

	data_input_stream_read_line_finish_utf8: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_line_finish_utf8"]

	data_input_stream_read_until: make routine! compose/deep [[
		stream [pointer]
		stop_chars [pointer]
		length [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_until"]

	data_input_stream_read_until_async: make routine! compose/deep [[
		stream [pointer]
		stop_chars [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_data_input_stream_read_until_async"]

	data_input_stream_read_until_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_until_finish"]

	data_input_stream_read_upto: make routine! compose/deep [[
		stream [pointer]
		stop_chars [pointer]
		stop_chars_len [int64]
		length [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_upto"]

	data_input_stream_read_upto_async: make routine! compose/deep [[
		stream [pointer]
		stop_chars [pointer]
		stop_chars_len [int64]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_data_input_stream_read_upto_async"]

	data_input_stream_read_upto_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		length [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_input_stream_read_upto_finish"]

	data_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_data_output_stream_get_type"]

	data_output_stream_new: make routine! compose/deep [[
		base_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_data_output_stream_new"]

	data_output_stream_set_byte_order: make routine! compose/deep [[
		stream [pointer]
		order [int32]
		return: [void]
		abi: default
	] (gio) "g_data_output_stream_set_byte_order"]

	data_output_stream_get_byte_order: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_get_byte_order"]

	data_output_stream_put_byte: make routine! compose/deep [[
		stream [pointer]
		data [uint8]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_byte"]

	data_output_stream_put_int16: make routine! compose/deep [[
		stream [pointer]
		data [int16]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_int16"]

	data_output_stream_put_uint16: make routine! compose/deep [[
		stream [pointer]
		data [uint16]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_uint16"]

	data_output_stream_put_int32: make routine! compose/deep [[
		stream [pointer]
		data [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_int32"]

	data_output_stream_put_uint32: make routine! compose/deep [[
		stream [pointer]
		data [uint32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_uint32"]

	data_output_stream_put_int64: make routine! compose/deep [[
		stream [pointer]
		data [int64]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_int64"]

	data_output_stream_put_uint64: make routine! compose/deep [[
		stream [pointer]
		data [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_uint64"]

	data_output_stream_put_string: make routine! compose/deep [[
		stream [pointer]
		str [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_data_output_stream_put_string"]

	dbus_address_escape_value: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_address_escape_value"]

	dbus_is_address: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_address"]

	dbus_is_supported_address: make routine! compose/deep [[
		string [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_supported_address"]

	dbus_address_get_stream: make routine! compose/deep [[
		address [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_address_get_stream"]

	dbus_address_get_stream_finish: make routine! compose/deep [[
		res [pointer]
		out_guid [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_address_get_stream_finish"]

	dbus_address_get_stream_sync: make routine! compose/deep [[
		address [pointer]
		out_guid [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_address_get_stream_sync"]

	dbus_address_get_for_bus_sync: make routine! compose/deep [[
		bus_type [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_address_get_for_bus_sync"]

	dbus_auth_observer_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_auth_observer_get_type"]

	dbus_auth_observer_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_dbus_auth_observer_new"]

	dbus_auth_observer_authorize_authenticated_peer: make routine! compose/deep [[
		observer [pointer]
		stream [pointer]
		credentials [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_auth_observer_authorize_authenticated_peer"]

	dbus_auth_observer_allow_mechanism: make routine! compose/deep [[
		observer [pointer]
		mechanism [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_auth_observer_allow_mechanism"]

	dbus_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_connection_get_type"]

	bus_get: make routine! compose/deep [[
		bus_type [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_bus_get"]

	bus_get_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_bus_get_finish"]

	bus_get_sync: make routine! compose/deep [[
		bus_type [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_bus_get_sync"]

	dbus_connection_new: make routine! compose/deep [[
		stream [pointer]
		guid [pointer]
		flags [int32]
		observer [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_new"]

	dbus_connection_new_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_new_finish"]

	dbus_connection_new_sync: make routine! compose/deep [[
		stream [pointer]
		guid [pointer]
		flags [int32]
		observer [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_new_sync"]

	dbus_connection_new_for_address: make routine! compose/deep [[
		address [pointer]
		flags [int32]
		observer [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_new_for_address"]

	dbus_connection_new_for_address_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_new_for_address_finish"]

	dbus_connection_new_for_address_sync: make routine! compose/deep [[
		address [pointer]
		flags [int32]
		observer [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_new_for_address_sync"]

	dbus_connection_start_message_processing: make routine! compose/deep [[
		connection [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_start_message_processing"]

	dbus_connection_is_closed: make routine! compose/deep [[
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_is_closed"]

	dbus_connection_get_stream: make routine! compose/deep [[
		connection [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_get_stream"]

	dbus_connection_get_guid: make routine! compose/deep [[
		connection [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_get_guid"]

	dbus_connection_get_unique_name: make routine! compose/deep [[
		connection [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_get_unique_name"]

	dbus_connection_get_peer_credentials: make routine! compose/deep [[
		connection [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_get_peer_credentials"]

	dbus_connection_get_last_serial: make routine! compose/deep [[
		connection [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_get_last_serial"]

	dbus_connection_get_exit_on_close: make routine! compose/deep [[
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_get_exit_on_close"]

	dbus_connection_set_exit_on_close: make routine! compose/deep [[
		connection [pointer]
		exit_on_close [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_set_exit_on_close"]

	dbus_connection_get_capabilities: make routine! compose/deep [[
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_get_capabilities"]

	dbus_connection_close: make routine! compose/deep [[
		connection [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_close"]

	dbus_connection_close_finish: make routine! compose/deep [[
		connection [pointer]
		res [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_close_finish"]

	dbus_connection_close_sync: make routine! compose/deep [[
		connection [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_close_sync"]

	dbus_connection_flush: make routine! compose/deep [[
		connection [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_flush"]

	dbus_connection_flush_finish: make routine! compose/deep [[
		connection [pointer]
		res [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_flush_finish"]

	dbus_connection_flush_sync: make routine! compose/deep [[
		connection [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_flush_sync"]

	dbus_connection_send_message: make routine! compose/deep [[
		connection [pointer]
		message [pointer]
		flags [int32]
		out_serial [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_send_message"]

	dbus_connection_send_message_with_reply: make routine! compose/deep [[
		connection [pointer]
		message [pointer]
		flags [int32]
		timeout_msec [int32]
		out_serial [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_send_message_with_reply"]

	dbus_connection_send_message_with_reply_finish: make routine! compose/deep [[
		connection [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_send_message_with_reply_finish"]

	dbus_connection_send_message_with_reply_sync: make routine! compose/deep [[
		connection [pointer]
		message [pointer]
		flags [int32]
		timeout_msec [int32]
		out_serial [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_send_message_with_reply_sync"]

	dbus_connection_emit_signal: make routine! compose/deep [[
		connection [pointer]
		destination_bus_name [pointer]
		object_path [pointer]
		interface_name [pointer]
		signal_name [pointer]
		parameters [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_emit_signal"]

	dbus_connection_call: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		interface_name [pointer]
		method_name [pointer]
		parameters [pointer]
		reply_type [pointer]
		flags [int32]
		timeout_msec [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_call"]

	dbus_connection_call_finish: make routine! compose/deep [[
		connection [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_call_finish"]

	dbus_connection_call_sync: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		interface_name [pointer]
		method_name [pointer]
		parameters [pointer]
		reply_type [pointer]
		flags [int32]
		timeout_msec [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_call_sync"]

	dbus_connection_call_with_unix_fd_list: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		interface_name [pointer]
		method_name [pointer]
		parameters [pointer]
		reply_type [pointer]
		flags [int32]
		timeout_msec [int32]
		fd_list [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_call_with_unix_fd_list"]

	dbus_connection_call_with_unix_fd_list_finish: make routine! compose/deep [[
		connection [pointer]
		out_fd_list [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_call_with_unix_fd_list_finish"]

	dbus_connection_call_with_unix_fd_list_sync: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		interface_name [pointer]
		method_name [pointer]
		parameters [pointer]
		reply_type [pointer]
		flags [int32]
		timeout_msec [int32]
		fd_list [pointer]
		out_fd_list [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_connection_call_with_unix_fd_list_sync"]

	dbus_connection_register_object: make routine! compose/deep [[
		connection [pointer]
		object_path [pointer]
		interface_info [pointer]
		vtable [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_register_object"]

	dbus_connection_unregister_object: make routine! compose/deep [[
		connection [pointer]
		registration_id [uint32]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_unregister_object"]

	dbus_connection_register_subtree: make routine! compose/deep [[
		connection [pointer]
		object_path [pointer]
		vtable [pointer]
		flags [int32]
		user_data [pointer]
		user_data_free_func [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_register_subtree"]

	dbus_connection_unregister_subtree: make routine! compose/deep [[
		connection [pointer]
		registration_id [uint32]
		return: [int32]
		abi: default
	] (gio) "g_dbus_connection_unregister_subtree"]

	dbus_connection_signal_subscribe: make routine! compose/deep [[
		connection [pointer]
		sender [pointer]
		interface_name [pointer]
		member [pointer]
		object_path [pointer]
		arg0 [pointer]
		flags [int32]
		callback [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_signal_subscribe"]

	dbus_connection_signal_unsubscribe: make routine! compose/deep [[
		connection [pointer]
		subscription_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_signal_unsubscribe"]

	dbus_connection_add_filter: make routine! compose/deep [[
		connection [pointer]
		filter_function [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_add_filter"]

	dbus_connection_remove_filter: make routine! compose/deep [[
		connection [pointer]
		filter_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_remove_filter"]

	dbus_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gio) "g_dbus_error_quark"]

	dbus_error_is_remote_error: make routine! compose/deep [[
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_error_is_remote_error"]

	dbus_error_get_remote_error: make routine! compose/deep [[
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_error_get_remote_error"]

	dbus_error_strip_remote_error: make routine! compose/deep [[
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_error_strip_remote_error"]

	dbus_error_register_error: make routine! compose/deep [[
		error_domain [uint32]
		error_code [int32]
		dbus_error_name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_error_register_error"]

	dbus_error_unregister_error: make routine! compose/deep [[
		error_domain [uint32]
		error_code [int32]
		dbus_error_name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_error_unregister_error"]

	dbus_error_register_error_domain: make routine! compose/deep [[
		error_domain_quark_name [pointer]
		quark_volatile [pointer]
		entries [pointer]
		num_entries [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_error_register_error_domain"]

	dbus_error_new_for_dbus_error: make routine! compose/deep [[
		dbus_error_name [pointer]
		dbus_error_message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_error_new_for_dbus_error"]

	dbus_error_set_dbus_error: make routine! compose/deep [[
		error [pointer]
		dbus_error_name [pointer]
		dbus_error_message [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_dbus_error_set_dbus_error"]

	dbus_error_set_dbus_error_valist: make routine! compose/deep [[
		error [pointer]
		dbus_error_name [pointer]
		dbus_error_message [pointer]
		format [pointer]
		var_args [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_error_set_dbus_error_valist"]

	dbus_error_encode_gerror: make routine! compose/deep [[
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_error_encode_gerror"]

	dbus_annotation_info_lookup: make routine! compose/deep [[
		annotations [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_annotation_info_lookup"]

	dbus_interface_info_lookup_method: make routine! compose/deep [[
		info [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_info_lookup_method"]

	dbus_interface_info_lookup_signal: make routine! compose/deep [[
		info [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_info_lookup_signal"]

	dbus_interface_info_lookup_property: make routine! compose/deep [[
		info [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_info_lookup_property"]

	dbus_interface_info_cache_build: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_info_cache_build"]

	dbus_interface_info_cache_release: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_info_cache_release"]

	dbus_interface_info_generate_xml: make routine! compose/deep [[
		info [pointer]
		indent [uint32]
		string_builder [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_info_generate_xml"]

	dbus_node_info_new_for_xml: make routine! compose/deep [[
		xml_data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_node_info_new_for_xml"]

	dbus_node_info_lookup_interface: make routine! compose/deep [[
		info [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_node_info_lookup_interface"]

	dbus_node_info_generate_xml: make routine! compose/deep [[
		info [pointer]
		indent [uint32]
		string_builder [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_node_info_generate_xml"]

	dbus_node_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_node_info_ref"]

	dbus_interface_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_info_ref"]

	dbus_method_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_info_ref"]

	dbus_signal_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_signal_info_ref"]

	dbus_property_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_property_info_ref"]

	dbus_arg_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_arg_info_ref"]

	dbus_annotation_info_ref: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_annotation_info_ref"]

	dbus_node_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_node_info_unref"]

	dbus_interface_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_info_unref"]

	dbus_method_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_info_unref"]

	dbus_signal_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_signal_info_unref"]

	dbus_property_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_property_info_unref"]

	dbus_arg_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_arg_info_unref"]

	dbus_annotation_info_unref: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_annotation_info_unref"]

	dbus_node_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_node_info_get_type"]

	dbus_interface_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_interface_info_get_type"]

	dbus_method_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_method_info_get_type"]

	dbus_signal_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_signal_info_get_type"]

	dbus_property_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_property_info_get_type"]

	dbus_arg_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_arg_info_get_type"]

	dbus_annotation_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_annotation_info_get_type"]

	dbus_message_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_message_get_type"]

	dbus_message_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new"]

	dbus_message_new_signal: make routine! compose/deep [[
		path [pointer]
		interface_ [pointer]
		signal [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_signal"]

	dbus_message_new_method_call: make routine! compose/deep [[
		name [pointer]
		path [pointer]
		interface_ [pointer]
		method [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_method_call"]

	dbus_message_new_method_reply: make routine! compose/deep [[
		method_call_message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_method_reply"]

	dbus_message_new_method_error: make routine! compose/deep [[
		method_call_message [pointer]
		error_name [pointer]
		error_message_format [pointer]
		...
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_method_error"]

	dbus_message_new_method_error_valist: make routine! compose/deep [[
		method_call_message [pointer]
		error_name [pointer]
		error_message_format [pointer]
		var_args [int32]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_method_error_valist"]

	dbus_message_new_method_error_literal: make routine! compose/deep [[
		method_call_message [pointer]
		error_name [pointer]
		error_message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_method_error_literal"]

	dbus_message_print: make routine! compose/deep [[
		message [pointer]
		indent [uint32]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_print"]

	dbus_message_get_locked: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_message_get_locked"]

	dbus_message_lock: make routine! compose/deep [[
		message [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_lock"]

	dbus_message_copy: make routine! compose/deep [[
		message [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_copy"]

	dbus_message_get_byte_order: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_message_get_byte_order"]

	dbus_message_set_byte_order: make routine! compose/deep [[
		message [pointer]
		byte_order [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_byte_order"]

	dbus_message_get_message_type: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_message_get_message_type"]

	dbus_message_set_message_type: make routine! compose/deep [[
		message [pointer]
		type [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_message_type"]

	dbus_message_get_flags: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_message_get_flags"]

	dbus_message_set_flags: make routine! compose/deep [[
		message [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_flags"]

	dbus_message_get_serial: make routine! compose/deep [[
		message [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_message_get_serial"]

	dbus_message_set_serial: make routine! compose/deep [[
		message [pointer]
		serial [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_serial"]

	dbus_message_get_header: make routine! compose/deep [[
		message [pointer]
		header_field [int32]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_header"]

	dbus_message_set_header: make routine! compose/deep [[
		message [pointer]
		header_field [int32]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_header"]

	dbus_message_get_header_fields: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_header_fields"]

	dbus_message_get_body: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_body"]

	dbus_message_set_body: make routine! compose/deep [[
		message [pointer]
		body [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_body"]

	dbus_message_get_unix_fd_list: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_unix_fd_list"]

	dbus_message_set_unix_fd_list: make routine! compose/deep [[
		message [pointer]
		fd_list [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_unix_fd_list"]

	dbus_message_get_reply_serial: make routine! compose/deep [[
		message [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_message_get_reply_serial"]

	dbus_message_set_reply_serial: make routine! compose/deep [[
		message [pointer]
		value [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_reply_serial"]

	dbus_message_get_interface: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_interface"]

	dbus_message_set_interface: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_interface"]

	dbus_message_get_member: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_member"]

	dbus_message_set_member: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_member"]

	dbus_message_get_path: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_path"]

	dbus_message_set_path: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_path"]

	dbus_message_get_sender: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_sender"]

	dbus_message_set_sender: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_sender"]

	dbus_message_get_destination: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_destination"]

	dbus_message_set_destination: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_destination"]

	dbus_message_get_error_name: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_error_name"]

	dbus_message_set_error_name: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_error_name"]

	dbus_message_get_signature: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_signature"]

	dbus_message_set_signature: make routine! compose/deep [[
		message [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_signature"]

	dbus_message_get_num_unix_fds: make routine! compose/deep [[
		message [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_message_get_num_unix_fds"]

	dbus_message_set_num_unix_fds: make routine! compose/deep [[
		message [pointer]
		value [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_message_set_num_unix_fds"]

	dbus_message_get_arg0: make routine! compose/deep [[
		message [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_get_arg0"]

	dbus_message_new_from_blob: make routine! compose/deep [[
		blob [pointer]
		blob_len [uint64]
		capabilities [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_new_from_blob"]

	dbus_message_bytes_needed: make routine! compose/deep [[
		blob [pointer]
		blob_len [uint64]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_dbus_message_bytes_needed"]

	dbus_message_to_blob: make routine! compose/deep [[
		message [pointer]
		out_size [pointer]
		capabilities [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_message_to_blob"]

	dbus_message_to_gerror: make routine! compose/deep [[
		message [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_message_to_gerror"]

	dbus_method_invocation_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_method_invocation_get_type"]

	dbus_method_invocation_get_sender: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_sender"]

	dbus_method_invocation_get_object_path: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_object_path"]

	dbus_method_invocation_get_interface_name: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_interface_name"]

	dbus_method_invocation_get_method_name: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_method_name"]

	dbus_method_invocation_get_method_info: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_method_info"]

	dbus_method_invocation_get_property_info: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_property_info"]

	dbus_method_invocation_get_connection: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_connection"]

	dbus_method_invocation_get_message: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_message"]

	dbus_method_invocation_get_parameters: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_parameters"]

	dbus_method_invocation_get_user_data: make routine! compose/deep [[
		invocation [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_method_invocation_get_user_data"]

	dbus_method_invocation_return_value: make routine! compose/deep [[
		invocation [pointer]
		parameters [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_value"]

	dbus_method_invocation_return_value_with_unix_fd_list: make routine! compose/deep [[
		invocation [pointer]
		parameters [pointer]
		fd_list [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_value_with_unix_fd_list"]

	dbus_method_invocation_return_error: make routine! compose/deep [[
		invocation [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_error"]

	dbus_method_invocation_return_error_valist: make routine! compose/deep [[
		invocation [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		var_args [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_error_valist"]

	dbus_method_invocation_return_error_literal: make routine! compose/deep [[
		invocation [pointer]
		domain [uint32]
		code [int32]
		message [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_error_literal"]

	dbus_method_invocation_return_gerror: make routine! compose/deep [[
		invocation [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_gerror"]

	dbus_method_invocation_take_error: make routine! compose/deep [[
		invocation [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_take_error"]

	dbus_method_invocation_return_dbus_error: make routine! compose/deep [[
		invocation [pointer]
		error_name [pointer]
		error_message [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_method_invocation_return_dbus_error"]

	bus_own_name: make routine! compose/deep [[
		bus_type [int32]
		name [pointer]
		flags [int32]
		bus_acquired_handler [pointer]
		name_acquired_handler [pointer]
		name_lost_handler [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_own_name"]

	bus_own_name_on_connection: make routine! compose/deep [[
		connection [pointer]
		name [pointer]
		flags [int32]
		name_acquired_handler [pointer]
		name_lost_handler [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_own_name_on_connection"]

	bus_own_name_with_closures: make routine! compose/deep [[
		bus_type [int32]
		name [pointer]
		flags [int32]
		bus_acquired_closure [pointer]
		name_acquired_closure [pointer]
		name_lost_closure [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_own_name_with_closures"]

	bus_own_name_on_connection_with_closures: make routine! compose/deep [[
		connection [pointer]
		name [pointer]
		flags [int32]
		name_acquired_closure [pointer]
		name_lost_closure [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_own_name_on_connection_with_closures"]

	bus_unown_name: make routine! compose/deep [[
		owner_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_bus_unown_name"]

	bus_watch_name: make routine! compose/deep [[
		bus_type [int32]
		name [pointer]
		flags [int32]
		name_appeared_handler [pointer]
		name_vanished_handler [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_watch_name"]

	bus_watch_name_on_connection: make routine! compose/deep [[
		connection [pointer]
		name [pointer]
		flags [int32]
		name_appeared_handler [pointer]
		name_vanished_handler [pointer]
		user_data [pointer]
		user_data_free_func [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_watch_name_on_connection"]

	bus_watch_name_with_closures: make routine! compose/deep [[
		bus_type [int32]
		name [pointer]
		flags [int32]
		name_appeared_closure [pointer]
		name_vanished_closure [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_watch_name_with_closures"]

	bus_watch_name_on_connection_with_closures: make routine! compose/deep [[
		connection [pointer]
		name [pointer]
		flags [int32]
		name_appeared_closure [pointer]
		name_vanished_closure [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_bus_watch_name_on_connection_with_closures"]

	bus_unwatch_name: make routine! compose/deep [[
		watcher_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_bus_unwatch_name"]

	dbus_proxy_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_proxy_get_type"]

	dbus_proxy_new: make routine! compose/deep [[
		connection [pointer]
		flags [int32]
		info [pointer]
		name [pointer]
		object_path [pointer]
		interface_name [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_new"]

	dbus_proxy_new_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_new_finish"]

	dbus_proxy_new_sync: make routine! compose/deep [[
		connection [pointer]
		flags [int32]
		info [pointer]
		name [pointer]
		object_path [pointer]
		interface_name [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_new_sync"]

	dbus_proxy_new_for_bus: make routine! compose/deep [[
		bus_type [int32]
		flags [int32]
		info [pointer]
		name [pointer]
		object_path [pointer]
		interface_name [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_new_for_bus"]

	dbus_proxy_new_for_bus_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_new_for_bus_finish"]

	dbus_proxy_new_for_bus_sync: make routine! compose/deep [[
		bus_type [int32]
		flags [int32]
		info [pointer]
		name [pointer]
		object_path [pointer]
		interface_name [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_new_for_bus_sync"]

	dbus_proxy_get_connection: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_connection"]

	dbus_proxy_get_flags: make routine! compose/deep [[
		proxy [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_proxy_get_flags"]

	dbus_proxy_get_name: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_name"]

	dbus_proxy_get_name_owner: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_name_owner"]

	dbus_proxy_get_object_path: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_object_path"]

	dbus_proxy_get_interface_name: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_interface_name"]

	dbus_proxy_get_default_timeout: make routine! compose/deep [[
		proxy [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_proxy_get_default_timeout"]

	dbus_proxy_set_default_timeout: make routine! compose/deep [[
		proxy [pointer]
		timeout_msec [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_set_default_timeout"]

	dbus_proxy_get_interface_info: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_interface_info"]

	dbus_proxy_set_interface_info: make routine! compose/deep [[
		proxy [pointer]
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_set_interface_info"]

	dbus_proxy_get_cached_property: make routine! compose/deep [[
		proxy [pointer]
		property_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_cached_property"]

	dbus_proxy_set_cached_property: make routine! compose/deep [[
		proxy [pointer]
		property_name [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_set_cached_property"]

	dbus_proxy_get_cached_property_names: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_get_cached_property_names"]

	dbus_proxy_call: make routine! compose/deep [[
		proxy [pointer]
		method_name [pointer]
		parameters [pointer]
		flags [int32]
		timeout_msec [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_call"]

	dbus_proxy_call_finish: make routine! compose/deep [[
		proxy [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_call_finish"]

	dbus_proxy_call_sync: make routine! compose/deep [[
		proxy [pointer]
		method_name [pointer]
		parameters [pointer]
		flags [int32]
		timeout_msec [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_call_sync"]

	dbus_proxy_call_with_unix_fd_list: make routine! compose/deep [[
		proxy [pointer]
		method_name [pointer]
		parameters [pointer]
		flags [int32]
		timeout_msec [int32]
		fd_list [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_proxy_call_with_unix_fd_list"]

	dbus_proxy_call_with_unix_fd_list_finish: make routine! compose/deep [[
		proxy [pointer]
		out_fd_list [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_call_with_unix_fd_list_finish"]

	dbus_proxy_call_with_unix_fd_list_sync: make routine! compose/deep [[
		proxy [pointer]
		method_name [pointer]
		parameters [pointer]
		flags [int32]
		timeout_msec [int32]
		fd_list [pointer]
		out_fd_list [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_proxy_call_with_unix_fd_list_sync"]

	dbus_server_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_server_get_type"]

	dbus_server_new_sync: make routine! compose/deep [[
		address [pointer]
		flags [int32]
		guid [pointer]
		observer [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_server_new_sync"]

	dbus_server_get_client_address: make routine! compose/deep [[
		server [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_server_get_client_address"]

	dbus_server_get_guid: make routine! compose/deep [[
		server [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_server_get_guid"]

	dbus_server_get_flags: make routine! compose/deep [[
		server [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_server_get_flags"]

	dbus_server_start: make routine! compose/deep [[
		server [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_server_start"]

	dbus_server_stop: make routine! compose/deep [[
		server [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_server_stop"]

	dbus_server_is_active: make routine! compose/deep [[
		server [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_server_is_active"]

	dbus_is_guid: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_guid"]

	dbus_generate_guid: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_dbus_generate_guid"]

	dbus_is_name: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_name"]

	dbus_is_unique_name: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_unique_name"]

	dbus_is_member_name: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_member_name"]

	dbus_is_interface_name: make routine! compose/deep [[
		string [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_is_interface_name"]

	dbus_gvariant_to_gvalue: make routine! compose/deep [[
		value [pointer]
		out_gvalue [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_gvariant_to_gvalue"]

	dbus_gvalue_to_gvariant: make routine! compose/deep [[
		gvalue [pointer]
		type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_gvalue_to_gvariant"]

	drive_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_drive_get_type"]

	drive_get_name: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_name"]

	drive_get_icon: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_icon"]

	drive_get_symbolic_icon: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_symbolic_icon"]

	drive_has_volumes: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_has_volumes"]

	drive_get_volumes: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_volumes"]

	drive_is_media_removable: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_is_media_removable"]

	drive_has_media: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_has_media"]

	drive_is_media_check_automatic: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_is_media_check_automatic"]

	drive_can_poll_for_media: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_can_poll_for_media"]

	drive_can_eject: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_can_eject"]

	drive_poll_for_media: make routine! compose/deep [[
		drive [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_drive_poll_for_media"]

	drive_poll_for_media_finish: make routine! compose/deep [[
		drive [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_poll_for_media_finish"]

	drive_get_identifier: make routine! compose/deep [[
		drive [pointer]
		kind [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_identifier"]

	drive_enumerate_identifiers: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_enumerate_identifiers"]

	drive_get_start_stop_type: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_get_start_stop_type"]

	drive_can_start: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_can_start"]

	drive_can_start_degraded: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_can_start_degraded"]

	drive_start: make routine! compose/deep [[
		drive [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_drive_start"]

	drive_start_finish: make routine! compose/deep [[
		drive [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_start_finish"]

	drive_can_stop: make routine! compose/deep [[
		drive [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_can_stop"]

	drive_stop: make routine! compose/deep [[
		drive [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_drive_stop"]

	drive_stop_finish: make routine! compose/deep [[
		drive [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_stop_finish"]

	drive_eject_with_operation: make routine! compose/deep [[
		drive [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_drive_eject_with_operation"]

	drive_eject_with_operation_finish: make routine! compose/deep [[
		drive [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_drive_eject_with_operation_finish"]

	drive_get_sort_key: make routine! compose/deep [[
		drive [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_drive_get_sort_key"]

	icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_icon_get_type"]

	icon_hash: make routine! compose/deep [[
		icon [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_icon_hash"]

	icon_equal: make routine! compose/deep [[
		icon1 [pointer]
		icon2 [pointer]
		return: [int32]
		abi: default
	] (gio) "g_icon_equal"]

	icon_to_string: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_icon_to_string"]

	icon_new_for_string: make routine! compose/deep [[
		str [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_icon_new_for_string"]

	icon_serialize: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_icon_serialize"]

	icon_deserialize: make routine! compose/deep [[
		value [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_icon_deserialize"]

	emblem_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_emblem_get_type"]

	emblem_new: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_emblem_new"]

	emblem_new_with_origin: make routine! compose/deep [[
		icon [pointer]
		origin [int32]
		return: [pointer]
		abi: default
	] (gio) "g_emblem_new_with_origin"]

	emblem_get_icon: make routine! compose/deep [[
		emblem [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_emblem_get_icon"]

	emblem_get_origin: make routine! compose/deep [[
		emblem [pointer]
		return: [int32]
		abi: default
	] (gio) "g_emblem_get_origin"]

	emblemed_icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_emblemed_icon_get_type"]

	emblemed_icon_new: make routine! compose/deep [[
		icon [pointer]
		emblem [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_emblemed_icon_new"]

	emblemed_icon_get_icon: make routine! compose/deep [[
		emblemed [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_emblemed_icon_get_icon"]

	emblemed_icon_get_emblems: make routine! compose/deep [[
		emblemed [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_emblemed_icon_get_emblems"]

	emblemed_icon_add_emblem: make routine! compose/deep [[
		emblemed [pointer]
		emblem [pointer]
		return: [void]
		abi: default
	] (gio) "g_emblemed_icon_add_emblem"]

	emblemed_icon_clear_emblems: make routine! compose/deep [[
		emblemed [pointer]
		return: [void]
		abi: default
	] (gio) "g_emblemed_icon_clear_emblems"]

	file_attribute_info_list_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_attribute_info_list_get_type"]

	file_attribute_info_list_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_info_list_new"]

	file_attribute_info_list_ref: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_info_list_ref"]

	file_attribute_info_list_unref: make routine! compose/deep [[
		list [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_attribute_info_list_unref"]

	file_attribute_info_list_dup: make routine! compose/deep [[
		list [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_info_list_dup"]

	file_attribute_info_list_lookup: make routine! compose/deep [[
		list [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_info_list_lookup"]

	file_attribute_info_list_add: make routine! compose/deep [[
		list [pointer]
		name [pointer]
		type [int32]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_file_attribute_info_list_add"]

	file_enumerator_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_enumerator_get_type"]

	file_enumerator_next_file: make routine! compose/deep [[
		enumerator [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerator_next_file"]

	file_enumerator_close: make routine! compose/deep [[
		enumerator [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_enumerator_close"]

	file_enumerator_next_files_async: make routine! compose/deep [[
		enumerator [pointer]
		num_files [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_enumerator_next_files_async"]

	file_enumerator_next_files_finish: make routine! compose/deep [[
		enumerator [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerator_next_files_finish"]

	file_enumerator_close_async: make routine! compose/deep [[
		enumerator [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_enumerator_close_async"]

	file_enumerator_close_finish: make routine! compose/deep [[
		enumerator [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_enumerator_close_finish"]

	file_enumerator_is_closed: make routine! compose/deep [[
		enumerator [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_enumerator_is_closed"]

	file_enumerator_has_pending: make routine! compose/deep [[
		enumerator [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_enumerator_has_pending"]

	file_enumerator_set_pending: make routine! compose/deep [[
		enumerator [pointer]
		pending [int32]
		return: [void]
		abi: default
	] (gio) "g_file_enumerator_set_pending"]

	file_enumerator_get_container: make routine! compose/deep [[
		enumerator [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerator_get_container"]

	file_enumerator_get_child: make routine! compose/deep [[
		enumerator [pointer]
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerator_get_child"]

	file_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_get_type"]

	file_new_for_path: make routine! compose/deep [[
		path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_new_for_path"]

	file_new_for_uri: make routine! compose/deep [[
		uri [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_new_for_uri"]

	file_new_for_commandline_arg: make routine! compose/deep [[
		arg [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_new_for_commandline_arg"]

	file_new_for_commandline_arg_and_cwd: make routine! compose/deep [[
		arg [pointer]
		cwd [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_new_for_commandline_arg_and_cwd"]

	file_new_tmp: make routine! compose/deep [[
		tmpl [pointer]
		iostream [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_new_tmp"]

	file_parse_name: make routine! compose/deep [[
		parse_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_parse_name"]

	file_dup: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_dup"]

	file_hash: make routine! compose/deep [[
		file [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_file_hash"]

	file_equal: make routine! compose/deep [[
		file1 [pointer]
		file2 [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_equal"]

	file_get_basename: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_basename"]

	file_get_path: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_path"]

	file_get_uri: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_uri"]

	file_get_parse_name: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_parse_name"]

	file_get_parent: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_parent"]

	file_has_parent: make routine! compose/deep [[
		file [pointer]
		parent [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_has_parent"]

	file_get_child: make routine! compose/deep [[
		file [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_child"]

	file_get_child_for_display_name: make routine! compose/deep [[
		file [pointer]
		display_name [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_child_for_display_name"]

	file_has_prefix: make routine! compose/deep [[
		file [pointer]
		prefix [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_has_prefix"]

	file_get_relative_path: make routine! compose/deep [[
		parent [pointer]
		descendant [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_relative_path"]

	file_resolve_relative_path: make routine! compose/deep [[
		file [pointer]
		relative_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_resolve_relative_path"]

	file_is_native: make routine! compose/deep [[
		file [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_is_native"]

	file_has_uri_scheme: make routine! compose/deep [[
		file [pointer]
		uri_scheme [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_has_uri_scheme"]

	file_get_uri_scheme: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_get_uri_scheme"]

	file_read: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_read"]

	file_read_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_read_async"]

	file_read_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_read_finish"]

	file_append_to: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_append_to"]

	file_create: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_create"]

	file_replace: make routine! compose/deep [[
		file [pointer]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_replace"]

	file_append_to_async: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_append_to_async"]

	file_append_to_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_append_to_finish"]

	file_create_async: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_create_async"]

	file_create_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_create_finish"]

	file_replace_async: make routine! compose/deep [[
		file [pointer]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_replace_async"]

	file_replace_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_replace_finish"]

	file_open_readwrite: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_open_readwrite"]

	file_open_readwrite_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_open_readwrite_async"]

	file_open_readwrite_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_open_readwrite_finish"]

	file_create_readwrite: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_create_readwrite"]

	file_create_readwrite_async: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_create_readwrite_async"]

	file_create_readwrite_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_create_readwrite_finish"]

	file_replace_readwrite: make routine! compose/deep [[
		file [pointer]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_replace_readwrite"]

	file_replace_readwrite_async: make routine! compose/deep [[
		file [pointer]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_replace_readwrite_async"]

	file_replace_readwrite_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_replace_readwrite_finish"]

	file_query_exists: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_query_exists"]

	file_query_file_type: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_query_file_type"]

	file_query_info: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_info"]

	file_query_info_async: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_query_info_async"]

	file_query_info_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_info_finish"]

	file_query_filesystem_info: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_filesystem_info"]

	file_query_filesystem_info_async: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_query_filesystem_info_async"]

	file_query_filesystem_info_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_filesystem_info_finish"]

	file_find_enclosing_mount: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_find_enclosing_mount"]

	file_find_enclosing_mount_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_find_enclosing_mount_async"]

	file_find_enclosing_mount_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_find_enclosing_mount_finish"]

	file_enumerate_children: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerate_children"]

	file_enumerate_children_async: make routine! compose/deep [[
		file [pointer]
		attributes [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_enumerate_children_async"]

	file_enumerate_children_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_enumerate_children_finish"]

	file_set_display_name: make routine! compose/deep [[
		file [pointer]
		display_name [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_set_display_name"]

	file_set_display_name_async: make routine! compose/deep [[
		file [pointer]
		display_name [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_set_display_name_async"]

	file_set_display_name_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_set_display_name_finish"]

	file_delete: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_delete"]

	file_delete_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_delete_async"]

	file_delete_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_delete_finish"]

	file_trash: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_trash"]

	file_trash_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_trash_async"]

	file_trash_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_trash_finish"]

	file_copy: make routine! compose/deep [[
		source [pointer]
		destination [pointer]
		flags [int32]
		cancellable [pointer]
		progress_callback [pointer]
		progress_callback_data [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_copy"]

	file_copy_async: make routine! compose/deep [[
		source [pointer]
		destination [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		progress_callback [pointer]
		progress_callback_data [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_copy_async"]

	file_copy_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_copy_finish"]

	file_move: make routine! compose/deep [[
		source [pointer]
		destination [pointer]
		flags [int32]
		cancellable [pointer]
		progress_callback [pointer]
		progress_callback_data [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_move"]

	file_make_directory: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_make_directory"]

	file_make_directory_async: make routine! compose/deep [[
		file [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_make_directory_async"]

	file_make_directory_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_make_directory_finish"]

	file_make_directory_with_parents: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_make_directory_with_parents"]

	file_make_symbolic_link: make routine! compose/deep [[
		file [pointer]
		symlink_value [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_make_symbolic_link"]

	file_query_settable_attributes: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_settable_attributes"]

	file_query_writable_namespaces: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_writable_namespaces"]

	file_set_attribute: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		type [int32]
		value_p [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute"]

	file_set_attributes_from_info: make routine! compose/deep [[
		file [pointer]
		info [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attributes_from_info"]

	file_set_attributes_async: make routine! compose/deep [[
		file [pointer]
		info [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_set_attributes_async"]

	file_set_attributes_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		info [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attributes_finish"]

	file_set_attribute_string: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_string"]

	file_set_attribute_byte_string: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_byte_string"]

	file_set_attribute_uint32: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [uint32]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_uint32"]

	file_set_attribute_int32: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [int32]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_int32"]

	file_set_attribute_uint64: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [uint64]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_uint64"]

	file_set_attribute_int64: make routine! compose/deep [[
		file [pointer]
		attribute [pointer]
		value [int64]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_set_attribute_int64"]

	file_mount_enclosing_volume: make routine! compose/deep [[
		location [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_mount_enclosing_volume"]

	file_mount_enclosing_volume_finish: make routine! compose/deep [[
		location [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_mount_enclosing_volume_finish"]

	file_mount_mountable: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_mount_mountable"]

	file_mount_mountable_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_mount_mountable_finish"]

	file_unmount_mountable_with_operation: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_unmount_mountable_with_operation"]

	file_unmount_mountable_with_operation_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_unmount_mountable_with_operation_finish"]

	file_eject_mountable_with_operation: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_eject_mountable_with_operation"]

	file_eject_mountable_with_operation_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_eject_mountable_with_operation_finish"]

	file_copy_attributes: make routine! compose/deep [[
		source [pointer]
		destination [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_copy_attributes"]

	file_monitor_directory: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_monitor_directory"]

	file_monitor_file: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_monitor_file"]

	file_monitor: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_monitor"]

	file_measure_disk_usage: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		cancellable [pointer]
		progress_callback [pointer]
		progress_data [pointer]
		disk_usage [pointer]
		num_dirs [pointer]
		num_files [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_measure_disk_usage"]

	file_measure_disk_usage_async: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		progress_callback [pointer]
		progress_data [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_measure_disk_usage_async"]

	file_measure_disk_usage_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		disk_usage [pointer]
		num_dirs [pointer]
		num_files [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_measure_disk_usage_finish"]

	file_start_mountable: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		start_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_start_mountable"]

	file_start_mountable_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_start_mountable_finish"]

	file_stop_mountable: make routine! compose/deep [[
		file [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_stop_mountable"]

	file_stop_mountable_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_stop_mountable_finish"]

	file_poll_mountable: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_poll_mountable"]

	file_poll_mountable_finish: make routine! compose/deep [[
		file [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_poll_mountable_finish"]

	file_query_default_handler: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_query_default_handler"]

	file_load_contents: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		contents [pointer]
		length [pointer]
		etag_out [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_load_contents"]

	file_load_contents_async: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_load_contents_async"]

	file_load_contents_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		contents [pointer]
		length [pointer]
		etag_out [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_load_contents_finish"]

	file_load_partial_contents_async: make routine! compose/deep [[
		file [pointer]
		cancellable [pointer]
		read_more_callback [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_load_partial_contents_async"]

	file_load_partial_contents_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		contents [pointer]
		length [pointer]
		etag_out [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_load_partial_contents_finish"]

	file_replace_contents: make routine! compose/deep [[
		file [pointer]
		contents [pointer]
		length [uint64]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		new_etag [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_replace_contents"]

	file_replace_contents_async: make routine! compose/deep [[
		file [pointer]
		contents [pointer]
		length [uint64]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_replace_contents_async"]

	file_replace_contents_bytes_async: make routine! compose/deep [[
		file [pointer]
		contents [pointer]
		etag [pointer]
		make_backup [int32]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_replace_contents_bytes_async"]

	file_replace_contents_finish: make routine! compose/deep [[
		file [pointer]
		res [pointer]
		new_etag [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_replace_contents_finish"]

	file_supports_thread_contexts: make routine! compose/deep [[
		file [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_supports_thread_contexts"]

	file_icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_icon_get_type"]

	file_icon_new: make routine! compose/deep [[
		file [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_icon_new"]

	file_icon_get_file: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_icon_get_file"]

	file_info_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_info_get_type"]

	file_info_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_file_info_new"]

	file_info_dup: make routine! compose/deep [[
		other [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_dup"]

	file_info_copy_into: make routine! compose/deep [[
		src_info [pointer]
		dest_info [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_copy_into"]

	file_info_has_attribute: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_has_attribute"]

	file_info_has_namespace: make routine! compose/deep [[
		info [pointer]
		name_space [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_has_namespace"]

	file_info_list_attributes: make routine! compose/deep [[
		info [pointer]
		name_space [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_list_attributes"]

	file_info_get_attribute_data: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		type [pointer]
		value_pp [pointer]
		status [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_attribute_data"]

	file_info_get_attribute_type: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_attribute_type"]

	file_info_remove_attribute: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_remove_attribute"]

	file_info_get_attribute_status: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_attribute_status"]

	file_info_set_attribute_status: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		status [int32]
		return: [int32]
		abi: default
	] (gio) "g_file_info_set_attribute_status"]

	file_info_get_attribute_as_string: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_attribute_as_string"]

	file_info_get_attribute_string: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_attribute_string"]

	file_info_get_attribute_byte_string: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_attribute_byte_string"]

	file_info_get_attribute_boolean: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_attribute_boolean"]

	file_info_get_attribute_uint32: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_file_info_get_attribute_uint32"]

	file_info_get_attribute_int32: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_attribute_int32"]

	file_info_get_attribute_uint64: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_file_info_get_attribute_uint64"]

	file_info_get_attribute_int64: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [int64]
		abi: default
	] (gio) "g_file_info_get_attribute_int64"]

	file_info_get_attribute_object: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_attribute_object"]

	file_info_get_attribute_stringv: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_attribute_stringv"]

	file_info_set_attribute: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		type [int32]
		value_p [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute"]

	file_info_set_attribute_string: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_string"]

	file_info_set_attribute_byte_string: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_byte_string"]

	file_info_set_attribute_boolean: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_boolean"]

	file_info_set_attribute_uint32: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [uint32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_uint32"]

	file_info_set_attribute_int32: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_int32"]

	file_info_set_attribute_uint64: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [uint64]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_uint64"]

	file_info_set_attribute_int64: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [int64]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_int64"]

	file_info_set_attribute_object: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_object"]

	file_info_set_attribute_stringv: make routine! compose/deep [[
		info [pointer]
		attribute [pointer]
		attr_value [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_stringv"]

	file_info_clear_status: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_clear_status"]

	file_info_get_deletion_date: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_deletion_date"]

	file_info_get_file_type: make routine! compose/deep [[
		info [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_file_type"]

	file_info_get_is_hidden: make routine! compose/deep [[
		info [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_is_hidden"]

	file_info_get_is_backup: make routine! compose/deep [[
		info [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_is_backup"]

	file_info_get_is_symlink: make routine! compose/deep [[
		info [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_is_symlink"]

	file_info_get_name: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_name"]

	file_info_get_display_name: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_display_name"]

	file_info_get_edit_name: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_edit_name"]

	file_info_get_icon: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_icon"]

	file_info_get_symbolic_icon: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_symbolic_icon"]

	file_info_get_content_type: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_content_type"]

	file_info_get_size: make routine! compose/deep [[
		info [pointer]
		return: [int64]
		abi: default
	] (gio) "g_file_info_get_size"]

	file_info_get_modification_time: make routine! compose/deep [[
		info [pointer]
		result [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_get_modification_time"]

	file_info_get_symlink_target: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_symlink_target"]

	file_info_get_etag: make routine! compose/deep [[
		info [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_info_get_etag"]

	file_info_get_sort_order: make routine! compose/deep [[
		info [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_info_get_sort_order"]

	file_info_set_attribute_mask: make routine! compose/deep [[
		info [pointer]
		mask [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_attribute_mask"]

	file_info_unset_attribute_mask: make routine! compose/deep [[
		info [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_unset_attribute_mask"]

	file_info_set_file_type: make routine! compose/deep [[
		info [pointer]
		type [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_file_type"]

	file_info_set_is_hidden: make routine! compose/deep [[
		info [pointer]
		is_hidden [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_is_hidden"]

	file_info_set_is_symlink: make routine! compose/deep [[
		info [pointer]
		is_symlink [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_is_symlink"]

	file_info_set_name: make routine! compose/deep [[
		info [pointer]
		name [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_name"]

	file_info_set_display_name: make routine! compose/deep [[
		info [pointer]
		display_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_display_name"]

	file_info_set_edit_name: make routine! compose/deep [[
		info [pointer]
		edit_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_edit_name"]

	file_info_set_icon: make routine! compose/deep [[
		info [pointer]
		icon [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_icon"]

	file_info_set_symbolic_icon: make routine! compose/deep [[
		info [pointer]
		icon [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_symbolic_icon"]

	file_info_set_content_type: make routine! compose/deep [[
		info [pointer]
		content_type [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_content_type"]

	file_info_set_size: make routine! compose/deep [[
		info [pointer]
		size [int64]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_size"]

	file_info_set_modification_time: make routine! compose/deep [[
		info [pointer]
		mtime [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_modification_time"]

	file_info_set_symlink_target: make routine! compose/deep [[
		info [pointer]
		symlink_target [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_symlink_target"]

	file_info_set_sort_order: make routine! compose/deep [[
		info [pointer]
		sort_order [int32]
		return: [void]
		abi: default
	] (gio) "g_file_info_set_sort_order"]

	file_attribute_matcher_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_attribute_matcher_get_type"]

	file_attribute_matcher_new: make routine! compose/deep [[
		attributes [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_matcher_new"]

	file_attribute_matcher_ref: make routine! compose/deep [[
		matcher [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_matcher_ref"]

	file_attribute_matcher_unref: make routine! compose/deep [[
		matcher [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_attribute_matcher_unref"]

	file_attribute_matcher_subtract: make routine! compose/deep [[
		matcher [pointer]
		subtract [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_matcher_subtract"]

	file_attribute_matcher_matches: make routine! compose/deep [[
		matcher [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_attribute_matcher_matches"]

	file_attribute_matcher_matches_only: make routine! compose/deep [[
		matcher [pointer]
		attribute [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_attribute_matcher_matches_only"]

	file_attribute_matcher_enumerate_namespace: make routine! compose/deep [[
		matcher [pointer]
		ns [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_attribute_matcher_enumerate_namespace"]

	file_attribute_matcher_enumerate_next: make routine! compose/deep [[
		matcher [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_matcher_enumerate_next"]

	file_attribute_matcher_to_string: make routine! compose/deep [[
		matcher [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_attribute_matcher_to_string"]

	file_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_input_stream_get_type"]

	file_input_stream_query_info: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_input_stream_query_info"]

	file_input_stream_query_info_async: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_input_stream_query_info_async"]

	file_input_stream_query_info_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_input_stream_query_info_finish"]

	io_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gio) "g_io_error_quark"]

	io_error_from_errno: make routine! compose/deep [[
		err_no [int32]
		return: [int32]
		abi: default
	] (gio) "g_io_error_from_errno"]

	io_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_io_stream_get_type"]

	io_stream_get_input_stream: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_stream_get_input_stream"]

	io_stream_get_output_stream: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_stream_get_output_stream"]

	io_stream_splice_async: make routine! compose/deep [[
		stream1 [pointer]
		stream2 [pointer]
		flags [int32]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_stream_splice_async"]

	io_stream_splice_finish: make routine! compose/deep [[
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_splice_finish"]

	io_stream_close: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_close"]

	io_stream_close_async: make routine! compose/deep [[
		stream [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_stream_close_async"]

	io_stream_close_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_close_finish"]

	io_stream_is_closed: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_is_closed"]

	io_stream_has_pending: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_has_pending"]

	io_stream_set_pending: make routine! compose/deep [[
		stream [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_stream_set_pending"]

	io_stream_clear_pending: make routine! compose/deep [[
		stream [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_stream_clear_pending"]

	file_io_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_io_stream_get_type"]

	file_io_stream_query_info: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_io_stream_query_info"]

	file_io_stream_query_info_async: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_io_stream_query_info_async"]

	file_io_stream_query_info_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_io_stream_query_info_finish"]

	file_io_stream_get_etag: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_io_stream_get_etag"]

	file_monitor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_monitor_get_type"]

	file_monitor_cancel: make routine! compose/deep [[
		monitor [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_monitor_cancel"]

	file_monitor_is_cancelled: make routine! compose/deep [[
		monitor [pointer]
		return: [int32]
		abi: default
	] (gio) "g_file_monitor_is_cancelled"]

	file_monitor_set_rate_limit: make routine! compose/deep [[
		monitor [pointer]
		limit_msecs [int32]
		return: [void]
		abi: default
	] (gio) "g_file_monitor_set_rate_limit"]

	file_monitor_emit_event: make routine! compose/deep [[
		monitor [pointer]
		child [pointer]
		other_file [pointer]
		event_type [int32]
		return: [void]
		abi: default
	] (gio) "g_file_monitor_emit_event"]

	filename_completer_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_filename_completer_get_type"]

	filename_completer_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_filename_completer_new"]

	filename_completer_get_completion_suffix: make routine! compose/deep [[
		completer [pointer]
		initial_text [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_filename_completer_get_completion_suffix"]

	filename_completer_get_completions: make routine! compose/deep [[
		completer [pointer]
		initial_text [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_filename_completer_get_completions"]

	filename_completer_set_dirs_only: make routine! compose/deep [[
		completer [pointer]
		dirs_only [int32]
		return: [void]
		abi: default
	] (gio) "g_filename_completer_set_dirs_only"]

	file_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_output_stream_get_type"]

	file_output_stream_query_info: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_output_stream_query_info"]

	file_output_stream_query_info_async: make routine! compose/deep [[
		stream [pointer]
		attributes [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_file_output_stream_query_info_async"]

	file_output_stream_query_info_finish: make routine! compose/deep [[
		stream [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_output_stream_query_info_finish"]

	file_output_stream_get_etag: make routine! compose/deep [[
		stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_file_output_stream_get_etag"]

	inet_address_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_inet_address_get_type"]

	inet_address_new_from_string: make routine! compose/deep [[
		string [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_new_from_string"]

	inet_address_new_from_bytes: make routine! compose/deep [[
		bytes [pointer]
		family [int32]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_new_from_bytes"]

	inet_address_new_loopback: make routine! compose/deep [[
		family [int32]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_new_loopback"]

	inet_address_new_any: make routine! compose/deep [[
		family [int32]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_new_any"]

	inet_address_equal: make routine! compose/deep [[
		address [pointer]
		other_address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_equal"]

	inet_address_to_string: make routine! compose/deep [[
		address [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_to_string"]

	inet_address_to_bytes: make routine! compose/deep [[
		address [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_to_bytes"]

	inet_address_get_native_size: make routine! compose/deep [[
		address [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_inet_address_get_native_size"]

	inet_address_get_family: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_family"]

	inet_address_get_is_any: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_any"]

	inet_address_get_is_loopback: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_loopback"]

	inet_address_get_is_link_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_link_local"]

	inet_address_get_is_site_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_site_local"]

	inet_address_get_is_multicast: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_multicast"]

	inet_address_get_is_mc_global: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_mc_global"]

	inet_address_get_is_mc_link_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_mc_link_local"]

	inet_address_get_is_mc_node_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_mc_node_local"]

	inet_address_get_is_mc_org_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_mc_org_local"]

	inet_address_get_is_mc_site_local: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_get_is_mc_site_local"]

	inet_address_mask_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_inet_address_mask_get_type"]

	inet_address_mask_new: make routine! compose/deep [[
		addr [pointer]
		length [uint32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_mask_new"]

	inet_address_mask_new_from_string: make routine! compose/deep [[
		mask_string [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_mask_new_from_string"]

	inet_address_mask_to_string: make routine! compose/deep [[
		mask [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_mask_to_string"]

	inet_address_mask_get_family: make routine! compose/deep [[
		mask [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_mask_get_family"]

	inet_address_mask_get_address: make routine! compose/deep [[
		mask [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_address_mask_get_address"]

	inet_address_mask_get_length: make routine! compose/deep [[
		mask [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_inet_address_mask_get_length"]

	inet_address_mask_matches: make routine! compose/deep [[
		mask [pointer]
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_mask_matches"]

	inet_address_mask_equal: make routine! compose/deep [[
		mask [pointer]
		mask2 [pointer]
		return: [int32]
		abi: default
	] (gio) "g_inet_address_mask_equal"]

	socket_address_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_address_get_type"]

	socket_address_get_family: make routine! compose/deep [[
		address [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_address_get_family"]

	socket_address_new_from_native: make routine! compose/deep [[
		native [pointer]
		len [uint64]
		return: [pointer]
		abi: default
	] (gio) "g_socket_address_new_from_native"]

	socket_address_to_native: make routine! compose/deep [[
		address [pointer]
		dest [pointer]
		destlen [uint64]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_address_to_native"]

	socket_address_get_native_size: make routine! compose/deep [[
		address [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_address_get_native_size"]

	inet_socket_address_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_inet_socket_address_get_type"]

	inet_socket_address_new: make routine! compose/deep [[
		address [pointer]
		port [uint16]
		return: [pointer]
		abi: default
	] (gio) "g_inet_socket_address_new"]

	inet_socket_address_new_from_string: make routine! compose/deep [[
		address [pointer]
		port [uint32]
		return: [pointer]
		abi: default
	] (gio) "g_inet_socket_address_new_from_string"]

	inet_socket_address_get_address: make routine! compose/deep [[
		address [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_inet_socket_address_get_address"]

	inet_socket_address_get_port: make routine! compose/deep [[
		address [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_inet_socket_address_get_port"]

	inet_socket_address_get_flowinfo: make routine! compose/deep [[
		address [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_inet_socket_address_get_flowinfo"]

	inet_socket_address_get_scope_id: make routine! compose/deep [[
		address [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_inet_socket_address_get_scope_id"]

	app_info_create_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_app_info_create_flags_get_type"]

	converter_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_converter_flags_get_type"]

	converter_result_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_converter_result_get_type"]

	data_stream_byte_order_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_data_stream_byte_order_get_type"]

	data_stream_newline_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_data_stream_newline_type_get_type"]

	file_attribute_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_attribute_type_get_type"]

	file_attribute_info_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_attribute_info_flags_get_type"]

	file_attribute_status_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_attribute_status_get_type"]

	file_query_info_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_query_info_flags_get_type"]

	file_create_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_create_flags_get_type"]

	file_measure_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_measure_flags_get_type"]

	mount_mount_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_mount_mount_flags_get_type"]

	mount_unmount_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_mount_unmount_flags_get_type"]

	drive_start_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_drive_start_flags_get_type"]

	drive_start_stop_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_drive_start_stop_type_get_type"]

	file_copy_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_copy_flags_get_type"]

	file_monitor_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_monitor_flags_get_type"]

	file_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_type_get_type"]

	filesystem_preview_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_filesystem_preview_type_get_type"]

	file_monitor_event_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_file_monitor_event_get_type"]

	io_error_enum_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_io_error_enum_get_type"]

	ask_password_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_ask_password_flags_get_type"]

	password_save_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_password_save_get_type"]

	mount_operation_result_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_mount_operation_result_get_type"]

	output_stream_splice_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_output_stream_splice_flags_get_type"]

	io_stream_splice_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_io_stream_splice_flags_get_type"]

	emblem_origin_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_emblem_origin_get_type"]

	resolver_error_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resolver_error_get_type"]

	resolver_record_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resolver_record_type_get_type"]

	resource_error_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resource_error_get_type"]

	resource_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resource_flags_get_type"]

	resource_lookup_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resource_lookup_flags_get_type"]

	socket_family_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_family_get_type"]

	socket_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_type_get_type"]

	socket_msg_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_msg_flags_get_type"]

	socket_protocol_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_protocol_get_type"]

	zlib_compressor_format_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_zlib_compressor_format_get_type"]

	unix_socket_address_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_unix_socket_address_type_get_type"]

	bus_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_bus_type_get_type"]

	bus_name_owner_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_bus_name_owner_flags_get_type"]

	bus_name_watcher_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_bus_name_watcher_flags_get_type"]

	dbus_proxy_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_proxy_flags_get_type"]

	dbus_error_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_error_get_type"]

	dbus_connection_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_connection_flags_get_type"]

	dbus_capability_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_capability_flags_get_type"]

	dbus_call_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_call_flags_get_type"]

	dbus_message_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_message_type_get_type"]

	dbus_message_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_message_flags_get_type"]

	dbus_message_header_field_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_message_header_field_get_type"]

	dbus_property_info_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_property_info_flags_get_type"]

	dbus_subtree_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_subtree_flags_get_type"]

	dbus_server_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_server_flags_get_type"]

	dbus_signal_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_signal_flags_get_type"]

	dbus_send_message_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_send_message_flags_get_type"]

	credentials_type_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_credentials_type_get_type"]

	dbus_message_byte_order_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_message_byte_order_get_type"]

	application_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_application_flags_get_type"]

	tls_error_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_error_get_type"]

	tls_certificate_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_certificate_flags_get_type"]

	tls_authentication_mode_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_authentication_mode_get_type"]

	tls_rehandshake_mode_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_rehandshake_mode_get_type"]

	tls_password_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_password_flags_get_type"]

	tls_interaction_result_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_interaction_result_get_type"]

	dbus_interface_skeleton_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_interface_skeleton_flags_get_type"]

	dbus_object_manager_client_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_manager_client_flags_get_type"]

	tls_database_verify_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_database_verify_flags_get_type"]

	tls_database_lookup_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_database_lookup_flags_get_type"]

	tls_certificate_request_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_certificate_request_flags_get_type"]

	io_module_scope_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_io_module_scope_flags_get_type"]

	socket_client_event_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_client_event_get_type"]

	test_dbus_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_test_dbus_flags_get_type"]

	subprocess_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_subprocess_flags_get_type"]

	notification_priority_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_notification_priority_get_type"]

	settings_bind_flags_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_settings_bind_flags_get_type"]

	io_module_scope_new: make routine! compose/deep [[
		flags [int32]
		return: [pointer]
		abi: default
	] (gio) "g_io_module_scope_new"]

	io_module_scope_free: make routine! compose/deep [[
		scope [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_module_scope_free"]

	io_module_scope_block: make routine! compose/deep [[
		scope [pointer]
		basename [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_module_scope_block"]

	io_module_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_io_module_get_type"]

	io_module_new: make routine! compose/deep [[
		filename [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_module_new"]

	io_modules_scan_all_in_directory: make routine! compose/deep [[
		dirname [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_modules_scan_all_in_directory"]

	io_modules_load_all_in_directory: make routine! compose/deep [[
		dirname [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_modules_load_all_in_directory"]

	io_modules_scan_all_in_directory_with_scope: make routine! compose/deep [[
		dirname [pointer]
		scope [pointer]
		return: [void]
		abi: default
	] (gio) "g_io_modules_scan_all_in_directory_with_scope"]

	io_modules_load_all_in_directory_with_scope: make routine! compose/deep [[
		dirname [pointer]
		scope [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_modules_load_all_in_directory_with_scope"]

	io_extension_point_register: make routine! compose/deep [[
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_point_register"]

	io_extension_point_lookup: make routine! compose/deep [[
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_point_lookup"]

	io_extension_point_set_required_type: make routine! compose/deep [[
		extension_point [pointer]
		type [uint64]
		return: [void]
		abi: default
	] (gio) "g_io_extension_point_set_required_type"]

	io_extension_point_get_required_type: make routine! compose/deep [[
		extension_point [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_io_extension_point_get_required_type"]

	io_extension_point_get_extensions: make routine! compose/deep [[
		extension_point [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_point_get_extensions"]

	io_extension_point_get_extension_by_name: make routine! compose/deep [[
		extension_point [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_point_get_extension_by_name"]

	io_extension_point_implement: make routine! compose/deep [[
		extension_point_name [pointer]
		type [uint64]
		extension_name [pointer]
		priority [int32]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_point_implement"]

	io_extension_get_type: make routine! compose/deep [[
		extension [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_io_extension_get_type"]

	io_extension_get_name: make routine! compose/deep [[
		extension [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_get_name"]

	io_extension_get_priority: make routine! compose/deep [[
		extension [pointer]
		return: [int32]
		abi: default
	] (gio) "g_io_extension_get_priority"]

	io_extension_ref_class: make routine! compose/deep [[
		extension [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_io_extension_ref_class"]

	loadable_icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_loadable_icon_get_type"]

	loadable_icon_load: make routine! compose/deep [[
		icon [pointer]
		size [int32]
		type [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_loadable_icon_load"]

	loadable_icon_load_async: make routine! compose/deep [[
		icon [pointer]
		size [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_loadable_icon_load_async"]

	loadable_icon_load_finish: make routine! compose/deep [[
		icon [pointer]
		res [pointer]
		type [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_loadable_icon_load_finish"]

	memory_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_memory_input_stream_get_type"]

	memory_input_stream_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_memory_input_stream_new"]

	memory_input_stream_new_from_data: make routine! compose/deep [[
		data [pointer]
		len [int64]
		destroy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_input_stream_new_from_data"]

	memory_input_stream_new_from_bytes: make routine! compose/deep [[
		bytes [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_input_stream_new_from_bytes"]

	memory_input_stream_add_data: make routine! compose/deep [[
		stream [pointer]
		data [pointer]
		len [int64]
		destroy [pointer]
		return: [void]
		abi: default
	] (gio) "g_memory_input_stream_add_data"]

	memory_input_stream_add_bytes: make routine! compose/deep [[
		stream [pointer]
		bytes [pointer]
		return: [void]
		abi: default
	] (gio) "g_memory_input_stream_add_bytes"]

	memory_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_memory_output_stream_get_type"]

	memory_output_stream_new: make routine! compose/deep [[
		data [pointer]
		size [uint64]
		realloc_function [pointer]
		destroy_function [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_output_stream_new"]

	memory_output_stream_new_resizable: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_memory_output_stream_new_resizable"]

	memory_output_stream_get_data: make routine! compose/deep [[
		ostream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_output_stream_get_data"]

	memory_output_stream_get_size: make routine! compose/deep [[
		ostream [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_memory_output_stream_get_size"]

	memory_output_stream_get_data_size: make routine! compose/deep [[
		ostream [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_memory_output_stream_get_data_size"]

	memory_output_stream_steal_data: make routine! compose/deep [[
		ostream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_output_stream_steal_data"]

	memory_output_stream_steal_as_bytes: make routine! compose/deep [[
		ostream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_memory_output_stream_steal_as_bytes"]

	mount_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_mount_get_type"]

	mount_get_root: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_root"]

	mount_get_default_location: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_default_location"]

	mount_get_name: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_name"]

	mount_get_icon: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_icon"]

	mount_get_symbolic_icon: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_symbolic_icon"]

	mount_get_uuid: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_uuid"]

	mount_get_volume: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_volume"]

	mount_get_drive: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_drive"]

	mount_can_unmount: make routine! compose/deep [[
		mount [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_can_unmount"]

	mount_can_eject: make routine! compose/deep [[
		mount [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_can_eject"]

	mount_remount: make routine! compose/deep [[
		mount [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_remount"]

	mount_remount_finish: make routine! compose/deep [[
		mount [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_remount_finish"]

	mount_guess_content_type: make routine! compose/deep [[
		mount [pointer]
		force_rescan [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_guess_content_type"]

	mount_guess_content_type_finish: make routine! compose/deep [[
		mount [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_guess_content_type_finish"]

	mount_guess_content_type_sync: make routine! compose/deep [[
		mount [pointer]
		force_rescan [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_guess_content_type_sync"]

	mount_is_shadowed: make routine! compose/deep [[
		mount [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_is_shadowed"]

	mount_shadow: make routine! compose/deep [[
		mount [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_shadow"]

	mount_unshadow: make routine! compose/deep [[
		mount [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_unshadow"]

	mount_unmount_with_operation: make routine! compose/deep [[
		mount [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_unmount_with_operation"]

	mount_unmount_with_operation_finish: make routine! compose/deep [[
		mount [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_unmount_with_operation_finish"]

	mount_eject_with_operation: make routine! compose/deep [[
		mount [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_eject_with_operation"]

	mount_eject_with_operation_finish: make routine! compose/deep [[
		mount [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_eject_with_operation_finish"]

	mount_get_sort_key: make routine! compose/deep [[
		mount [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_get_sort_key"]

	mount_operation_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_mount_operation_get_type"]

	mount_operation_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_mount_operation_new"]

	mount_operation_get_username: make routine! compose/deep [[
		op [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_operation_get_username"]

	mount_operation_set_username: make routine! compose/deep [[
		op [pointer]
		username [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_username"]

	mount_operation_get_password: make routine! compose/deep [[
		op [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_operation_get_password"]

	mount_operation_set_password: make routine! compose/deep [[
		op [pointer]
		password [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_password"]

	mount_operation_get_anonymous: make routine! compose/deep [[
		op [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_operation_get_anonymous"]

	mount_operation_set_anonymous: make routine! compose/deep [[
		op [pointer]
		anonymous [int32]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_anonymous"]

	mount_operation_get_domain: make routine! compose/deep [[
		op [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_mount_operation_get_domain"]

	mount_operation_set_domain: make routine! compose/deep [[
		op [pointer]
		domain [pointer]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_domain"]

	mount_operation_get_password_save: make routine! compose/deep [[
		op [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_operation_get_password_save"]

	mount_operation_set_password_save: make routine! compose/deep [[
		op [pointer]
		save [int32]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_password_save"]

	mount_operation_get_choice: make routine! compose/deep [[
		op [pointer]
		return: [int32]
		abi: default
	] (gio) "g_mount_operation_get_choice"]

	mount_operation_set_choice: make routine! compose/deep [[
		op [pointer]
		choice [int32]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_set_choice"]

	mount_operation_reply: make routine! compose/deep [[
		op [pointer]
		result [int32]
		return: [void]
		abi: default
	] (gio) "g_mount_operation_reply"]

	volume_monitor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_volume_monitor_get_type"]

	volume_monitor_get: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get"]

	volume_monitor_get_connected_drives: make routine! compose/deep [[
		volume_monitor [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get_connected_drives"]

	volume_monitor_get_volumes: make routine! compose/deep [[
		volume_monitor [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get_volumes"]

	volume_monitor_get_mounts: make routine! compose/deep [[
		volume_monitor [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get_mounts"]

	volume_monitor_get_volume_for_uuid: make routine! compose/deep [[
		volume_monitor [pointer]
		uuid [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get_volume_for_uuid"]

	volume_monitor_get_mount_for_uuid: make routine! compose/deep [[
		volume_monitor [pointer]
		uuid [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_monitor_get_mount_for_uuid"]

	native_volume_monitor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_native_volume_monitor_get_type"]

	network_address_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_network_address_get_type"]

	network_address_new: make routine! compose/deep [[
		hostname [pointer]
		port [uint16]
		return: [pointer]
		abi: default
	] (gio) "g_network_address_new"]

	network_address_parse: make routine! compose/deep [[
		host_and_port [pointer]
		default_port [uint16]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_address_parse"]

	network_address_parse_uri: make routine! compose/deep [[
		uri [pointer]
		default_port [uint16]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_address_parse_uri"]

	network_address_get_hostname: make routine! compose/deep [[
		addr [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_address_get_hostname"]

	network_address_get_port: make routine! compose/deep [[
		addr [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_network_address_get_port"]

	network_address_get_scheme: make routine! compose/deep [[
		addr [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_address_get_scheme"]

	network_monitor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_network_monitor_get_type"]

	network_monitor_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_network_monitor_get_default"]

	network_monitor_get_network_available: make routine! compose/deep [[
		monitor [pointer]
		return: [int32]
		abi: default
	] (gio) "g_network_monitor_get_network_available"]

	network_monitor_can_reach: make routine! compose/deep [[
		monitor [pointer]
		connectable [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_network_monitor_can_reach"]

	network_monitor_can_reach_async: make routine! compose/deep [[
		monitor [pointer]
		connectable [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_network_monitor_can_reach_async"]

	network_monitor_can_reach_finish: make routine! compose/deep [[
		monitor [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_network_monitor_can_reach_finish"]

	network_service_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_network_service_get_type"]

	network_service_new: make routine! compose/deep [[
		service [pointer]
		protocol [pointer]
		domain [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_service_new"]

	network_service_get_service: make routine! compose/deep [[
		srv [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_service_get_service"]

	network_service_get_protocol: make routine! compose/deep [[
		srv [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_service_get_protocol"]

	network_service_get_domain: make routine! compose/deep [[
		srv [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_service_get_domain"]

	network_service_get_scheme: make routine! compose/deep [[
		srv [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_network_service_get_scheme"]

	network_service_set_scheme: make routine! compose/deep [[
		srv [pointer]
		scheme [pointer]
		return: [void]
		abi: default
	] (gio) "g_network_service_set_scheme"]

	permission_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_permission_get_type"]

	permission_acquire: make routine! compose/deep [[
		permission [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_acquire"]

	permission_acquire_async: make routine! compose/deep [[
		permission [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_permission_acquire_async"]

	permission_acquire_finish: make routine! compose/deep [[
		permission [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_acquire_finish"]

	permission_release: make routine! compose/deep [[
		permission [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_release"]

	permission_release_async: make routine! compose/deep [[
		permission [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_permission_release_async"]

	permission_release_finish: make routine! compose/deep [[
		permission [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_release_finish"]

	permission_get_allowed: make routine! compose/deep [[
		permission [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_get_allowed"]

	permission_get_can_acquire: make routine! compose/deep [[
		permission [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_get_can_acquire"]

	permission_get_can_release: make routine! compose/deep [[
		permission [pointer]
		return: [int32]
		abi: default
	] (gio) "g_permission_get_can_release"]

	permission_impl_update: make routine! compose/deep [[
		permission [pointer]
		allowed [int32]
		can_acquire [int32]
		can_release [int32]
		return: [void]
		abi: default
	] (gio) "g_permission_impl_update"]

	pollable_input_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_pollable_input_stream_get_type"]

	pollable_input_stream_can_poll: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_pollable_input_stream_can_poll"]

	pollable_input_stream_is_readable: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_pollable_input_stream_is_readable"]

	pollable_input_stream_create_source: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_pollable_input_stream_create_source"]

	pollable_input_stream_read_nonblocking: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_pollable_input_stream_read_nonblocking"]

	pollable_output_stream_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_pollable_output_stream_get_type"]

	pollable_output_stream_can_poll: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_pollable_output_stream_can_poll"]

	pollable_output_stream_is_writable: make routine! compose/deep [[
		stream [pointer]
		return: [int32]
		abi: default
	] (gio) "g_pollable_output_stream_is_writable"]

	pollable_output_stream_create_source: make routine! compose/deep [[
		stream [pointer]
		cancellable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_pollable_output_stream_create_source"]

	pollable_output_stream_write_nonblocking: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_pollable_output_stream_write_nonblocking"]

	pollable_source_new: make routine! compose/deep [[
		pollable_stream [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_pollable_source_new"]

	pollable_source_new_full: make routine! compose/deep [[
		pollable_stream [pointer]
		child_source [pointer]
		cancellable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_pollable_source_new_full"]

	pollable_stream_read: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		blocking [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_pollable_stream_read"]

	pollable_stream_write: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		blocking [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_pollable_stream_write"]

	pollable_stream_write_all: make routine! compose/deep [[
		stream [pointer]
		buffer [pointer]
		count [uint64]
		blocking [int32]
		bytes_written [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_pollable_stream_write_all"]

	property_action_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_property_action_get_type"]

	property_action_new: make routine! compose/deep [[
		name [pointer]
		object [pointer]
		property_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_property_action_new"]

	proxy_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_proxy_get_type"]

	proxy_get_default_for_protocol: make routine! compose/deep [[
		protocol [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_get_default_for_protocol"]

	proxy_connect: make routine! compose/deep [[
		proxy [pointer]
		connection [pointer]
		proxy_address [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_connect"]

	proxy_connect_async: make routine! compose/deep [[
		proxy [pointer]
		connection [pointer]
		proxy_address [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_proxy_connect_async"]

	proxy_connect_finish: make routine! compose/deep [[
		proxy [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_connect_finish"]

	proxy_supports_hostname: make routine! compose/deep [[
		proxy [pointer]
		return: [int32]
		abi: default
	] (gio) "g_proxy_supports_hostname"]

	proxy_address_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_proxy_address_get_type"]

	proxy_address_new: make routine! compose/deep [[
		inetaddr [pointer]
		port [uint16]
		protocol [pointer]
		dest_hostname [pointer]
		dest_port [uint16]
		username [pointer]
		password [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_new"]

	proxy_address_get_protocol: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_protocol"]

	proxy_address_get_destination_protocol: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_destination_protocol"]

	proxy_address_get_destination_hostname: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_destination_hostname"]

	proxy_address_get_destination_port: make routine! compose/deep [[
		proxy [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_proxy_address_get_destination_port"]

	proxy_address_get_username: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_username"]

	proxy_address_get_password: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_password"]

	proxy_address_get_uri: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_address_get_uri"]

	socket_address_enumerator_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_address_enumerator_get_type"]

	socket_address_enumerator_next: make routine! compose/deep [[
		enumerator [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_address_enumerator_next"]

	socket_address_enumerator_next_async: make routine! compose/deep [[
		enumerator [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_address_enumerator_next_async"]

	socket_address_enumerator_next_finish: make routine! compose/deep [[
		enumerator [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_address_enumerator_next_finish"]

	proxy_address_enumerator_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_proxy_address_enumerator_get_type"]

	proxy_resolver_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_proxy_resolver_get_type"]

	proxy_resolver_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_proxy_resolver_get_default"]

	proxy_resolver_is_supported: make routine! compose/deep [[
		resolver [pointer]
		return: [int32]
		abi: default
	] (gio) "g_proxy_resolver_is_supported"]

	proxy_resolver_lookup: make routine! compose/deep [[
		resolver [pointer]
		uri [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_resolver_lookup"]

	proxy_resolver_lookup_async: make routine! compose/deep [[
		resolver [pointer]
		uri [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_proxy_resolver_lookup_async"]

	proxy_resolver_lookup_finish: make routine! compose/deep [[
		resolver [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_proxy_resolver_lookup_finish"]

	resolver_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resolver_get_type"]

	resolver_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_resolver_get_default"]

	resolver_set_default: make routine! compose/deep [[
		resolver [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_set_default"]

	resolver_lookup_by_name: make routine! compose/deep [[
		resolver [pointer]
		hostname [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_by_name"]

	resolver_lookup_by_name_async: make routine! compose/deep [[
		resolver [pointer]
		hostname [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_lookup_by_name_async"]

	resolver_lookup_by_name_finish: make routine! compose/deep [[
		resolver [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_by_name_finish"]

	resolver_free_addresses: make routine! compose/deep [[
		addresses [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_free_addresses"]

	resolver_lookup_by_address: make routine! compose/deep [[
		resolver [pointer]
		address [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_by_address"]

	resolver_lookup_by_address_async: make routine! compose/deep [[
		resolver [pointer]
		address [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_lookup_by_address_async"]

	resolver_lookup_by_address_finish: make routine! compose/deep [[
		resolver [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_by_address_finish"]

	resolver_lookup_service: make routine! compose/deep [[
		resolver [pointer]
		service [pointer]
		protocol [pointer]
		domain [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_service"]

	resolver_lookup_service_async: make routine! compose/deep [[
		resolver [pointer]
		service [pointer]
		protocol [pointer]
		domain [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_lookup_service_async"]

	resolver_lookup_service_finish: make routine! compose/deep [[
		resolver [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_service_finish"]

	resolver_lookup_records: make routine! compose/deep [[
		resolver [pointer]
		rrname [pointer]
		record_type [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_records"]

	resolver_lookup_records_async: make routine! compose/deep [[
		resolver [pointer]
		rrname [pointer]
		record_type [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_lookup_records_async"]

	resolver_lookup_records_finish: make routine! compose/deep [[
		resolver [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resolver_lookup_records_finish"]

	resolver_free_targets: make routine! compose/deep [[
		targets [pointer]
		return: [void]
		abi: default
	] (gio) "g_resolver_free_targets"]

	resolver_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gio) "g_resolver_error_quark"]

	resource_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gio) "g_resource_error_quark"]

	resource_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_resource_get_type"]

	resource_new_from_data: make routine! compose/deep [[
		data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_new_from_data"]

	resource_ref: make routine! compose/deep [[
		resource [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_ref"]

	resource_unref: make routine! compose/deep [[
		resource [pointer]
		return: [void]
		abi: default
	] (gio) "g_resource_unref"]

	resource_load: make routine! compose/deep [[
		filename [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_load"]

	resource_open_stream: make routine! compose/deep [[
		resource [pointer]
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_open_stream"]

	resource_lookup_data: make routine! compose/deep [[
		resource [pointer]
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_lookup_data"]

	resource_enumerate_children: make routine! compose/deep [[
		resource [pointer]
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resource_enumerate_children"]

	resource_get_info: make routine! compose/deep [[
		resource [pointer]
		path [pointer]
		lookup_flags [int32]
		size [pointer]
		flags [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_resource_get_info"]

	resources_register: make routine! compose/deep [[
		resource [pointer]
		return: [void]
		abi: default
	] (gio) "g_resources_register"]

	resources_unregister: make routine! compose/deep [[
		resource [pointer]
		return: [void]
		abi: default
	] (gio) "g_resources_unregister"]

	resources_open_stream: make routine! compose/deep [[
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resources_open_stream"]

	resources_lookup_data: make routine! compose/deep [[
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resources_lookup_data"]

	resources_enumerate_children: make routine! compose/deep [[
		path [pointer]
		lookup_flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_resources_enumerate_children"]

	resources_get_info: make routine! compose/deep [[
		path [pointer]
		lookup_flags [int32]
		size [pointer]
		flags [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_resources_get_info"]

	static_resource_init: make routine! compose/deep [[
		static_resource [pointer]
		return: [void]
		abi: default
	] (gio) "g_static_resource_init"]

	static_resource_fini: make routine! compose/deep [[
		static_resource [pointer]
		return: [void]
		abi: default
	] (gio) "g_static_resource_fini"]

	static_resource_get_resource: make routine! compose/deep [[
		static_resource [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_static_resource_get_resource"]

	seekable_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_seekable_get_type"]

	seekable_tell: make routine! compose/deep [[
		seekable [pointer]
		return: [int64]
		abi: default
	] (gio) "g_seekable_tell"]

	seekable_can_seek: make routine! compose/deep [[
		seekable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_seekable_can_seek"]

	seekable_seek: make routine! compose/deep [[
		seekable [pointer]
		offset [int64]
		type [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_seekable_seek"]

	seekable_can_truncate: make routine! compose/deep [[
		seekable [pointer]
		return: [int32]
		abi: default
	] (gio) "g_seekable_can_truncate"]

	seekable_truncate: make routine! compose/deep [[
		seekable [pointer]
		offset [int64]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_seekable_truncate"]

	settings_schema_source_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_settings_schema_source_get_type"]

	settings_schema_source_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_source_get_default"]

	settings_schema_source_ref: make routine! compose/deep [[
		source [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_source_ref"]

	settings_schema_source_unref: make routine! compose/deep [[
		source [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_schema_source_unref"]

	settings_schema_source_new_from_directory: make routine! compose/deep [[
		directory [pointer]
		parent [pointer]
		trusted [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_source_new_from_directory"]

	settings_schema_source_lookup: make routine! compose/deep [[
		source [pointer]
		schema_id [pointer]
		recursive [int32]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_source_lookup"]

	settings_schema_source_list_schemas: make routine! compose/deep [[
		source [pointer]
		recursive [int32]
		non_relocatable [pointer]
		relocatable [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_schema_source_list_schemas"]

	settings_schema_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_settings_schema_get_type"]

	settings_schema_ref: make routine! compose/deep [[
		schema [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_ref"]

	settings_schema_unref: make routine! compose/deep [[
		schema [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_schema_unref"]

	settings_schema_get_id: make routine! compose/deep [[
		schema [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_get_id"]

	settings_schema_get_path: make routine! compose/deep [[
		schema [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_get_path"]

	settings_schema_get_key: make routine! compose/deep [[
		schema [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_get_key"]

	settings_schema_has_key: make routine! compose/deep [[
		schema [pointer]
		name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_schema_has_key"]

	settings_schema_key_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_settings_schema_key_get_type"]

	settings_schema_key_ref: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_ref"]

	settings_schema_key_unref: make routine! compose/deep [[
		key [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_schema_key_unref"]

	settings_schema_key_get_value_type: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_get_value_type"]

	settings_schema_key_get_default_value: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_get_default_value"]

	settings_schema_key_get_range: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_get_range"]

	settings_schema_key_range_check: make routine! compose/deep [[
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_schema_key_range_check"]

	settings_schema_key_get_summary: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_get_summary"]

	settings_schema_key_get_description: make routine! compose/deep [[
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_schema_key_get_description"]

	settings_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_settings_get_type"]

	settings_new: make routine! compose/deep [[
		schema_id [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_new"]

	settings_new_with_path: make routine! compose/deep [[
		schema_id [pointer]
		path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_new_with_path"]

	settings_new_with_backend: make routine! compose/deep [[
		schema_id [pointer]
		backend [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_new_with_backend"]

	settings_new_with_backend_and_path: make routine! compose/deep [[
		schema_id [pointer]
		backend [pointer]
		path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_new_with_backend_and_path"]

	settings_new_full: make routine! compose/deep [[
		schema [pointer]
		backend [pointer]
		path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_new_full"]

	settings_list_children: make routine! compose/deep [[
		settings [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_list_children"]

	settings_list_keys: make routine! compose/deep [[
		settings [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_list_keys"]

	settings_set_value: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_value"]

	settings_get_value: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_value"]

	settings_get_user_value: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_user_value"]

	settings_get_default_value: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_default_value"]

	settings_set: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		format [pointer]
		...
		return: [int32]
		abi: default
	] (gio) "g_settings_set"]

	settings_get: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_settings_get"]

	settings_reset: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_reset"]

	settings_get_int: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_get_int"]

	settings_set_int: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [int32]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_int"]

	settings_get_uint: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_settings_get_uint"]

	settings_set_uint: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [uint32]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_uint"]

	settings_get_string: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_string"]

	settings_set_string: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_string"]

	settings_get_boolean: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_get_boolean"]

	settings_set_boolean: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [int32]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_boolean"]

	settings_get_double: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [double]
		abi: default
	] (gio) "g_settings_get_double"]

	settings_set_double: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [double]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_double"]

	settings_get_strv: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_strv"]

	settings_set_strv: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_strv"]

	settings_get_enum: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_get_enum"]

	settings_set_enum: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [int32]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_enum"]

	settings_get_flags: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_settings_get_flags"]

	settings_set_flags: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		value [uint32]
		return: [int32]
		abi: default
	] (gio) "g_settings_set_flags"]

	settings_get_child: make routine! compose/deep [[
		settings [pointer]
		name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_child"]

	settings_is_writable: make routine! compose/deep [[
		settings [pointer]
		name [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_is_writable"]

	settings_delay: make routine! compose/deep [[
		settings [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_delay"]

	settings_apply: make routine! compose/deep [[
		settings [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_apply"]

	settings_revert: make routine! compose/deep [[
		settings [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_revert"]

	settings_get_has_unapplied: make routine! compose/deep [[
		settings [pointer]
		return: [int32]
		abi: default
	] (gio) "g_settings_get_has_unapplied"]

	settings_sync: make routine! compose/deep [[
		return: [void]
		abi: default
	] (gio) "g_settings_sync"]

	settings_bind: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		object [pointer]
		property [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_settings_bind"]

	settings_bind_with_mapping: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		object [pointer]
		property [pointer]
		flags [int32]
		get_mapping [pointer]
		set_mapping [pointer]
		user_data [pointer]
		destroy [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_bind_with_mapping"]

	settings_bind_writable: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		object [pointer]
		property [pointer]
		inverted [int32]
		return: [void]
		abi: default
	] (gio) "g_settings_bind_writable"]

	settings_unbind: make routine! compose/deep [[
		object [pointer]
		property [pointer]
		return: [void]
		abi: default
	] (gio) "g_settings_unbind"]

	settings_create_action: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_create_action"]

	settings_get_mapped: make routine! compose/deep [[
		settings [pointer]
		key [pointer]
		mapping [pointer]
		user_data [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_settings_get_mapped"]

	simple_action_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_simple_action_get_type"]

	simple_action_new: make routine! compose/deep [[
		name [pointer]
		parameter_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_action_new"]

	simple_action_new_stateful: make routine! compose/deep [[
		name [pointer]
		parameter_type [pointer]
		state [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_action_new_stateful"]

	simple_action_set_enabled: make routine! compose/deep [[
		simple [pointer]
		enabled [int32]
		return: [void]
		abi: default
	] (gio) "g_simple_action_set_enabled"]

	simple_action_set_state: make routine! compose/deep [[
		simple [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_action_set_state"]

	simple_action_group_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_simple_action_group_get_type"]

	simple_action_group_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_simple_action_group_new"]

	simple_async_result_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_simple_async_result_get_type"]

	simple_async_result_new: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		user_data [pointer]
		source_tag [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_new"]

	simple_async_result_new_error: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		user_data [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_new_error"]

	simple_async_result_new_from_error: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		user_data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_new_from_error"]

	simple_async_result_new_take_error: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		user_data [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_new_take_error"]

	simple_async_result_set_op_res_gpointer: make routine! compose/deep [[
		simple [pointer]
		op_res [pointer]
		destroy_op_res [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_op_res_gpointer"]

	simple_async_result_get_op_res_gpointer: make routine! compose/deep [[
		simple [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_get_op_res_gpointer"]

	simple_async_result_set_op_res_gssize: make routine! compose/deep [[
		simple [pointer]
		op_res [int64]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_op_res_gssize"]

	simple_async_result_get_op_res_gssize: make routine! compose/deep [[
		simple [pointer]
		return: [int64]
		abi: default
	] (gio) "g_simple_async_result_get_op_res_gssize"]

	simple_async_result_set_op_res_gboolean: make routine! compose/deep [[
		simple [pointer]
		op_res [int32]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_op_res_gboolean"]

	simple_async_result_get_op_res_gboolean: make routine! compose/deep [[
		simple [pointer]
		return: [int32]
		abi: default
	] (gio) "g_simple_async_result_get_op_res_gboolean"]

	simple_async_result_set_check_cancellable: make routine! compose/deep [[
		simple [pointer]
		check_cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_check_cancellable"]

	simple_async_result_get_source_tag: make routine! compose/deep [[
		simple [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_async_result_get_source_tag"]

	simple_async_result_set_handle_cancellation: make routine! compose/deep [[
		simple [pointer]
		handle_cancellation [int32]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_handle_cancellation"]

	simple_async_result_complete: make routine! compose/deep [[
		simple [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_complete"]

	simple_async_result_complete_in_idle: make routine! compose/deep [[
		simple [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_complete_in_idle"]

	simple_async_result_run_in_thread: make routine! compose/deep [[
		simple [pointer]
		func [pointer]
		io_priority [int32]
		cancellable [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_run_in_thread"]

	simple_async_result_set_from_error: make routine! compose/deep [[
		simple [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_from_error"]

	simple_async_result_take_error: make routine! compose/deep [[
		simple [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_take_error"]

	simple_async_result_propagate_error: make routine! compose/deep [[
		simple [pointer]
		dest [pointer]
		return: [int32]
		abi: default
	] (gio) "g_simple_async_result_propagate_error"]

	simple_async_result_set_error: make routine! compose/deep [[
		simple [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_error"]

	simple_async_result_set_error_va: make routine! compose/deep [[
		simple [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		args [int32]
		return: [void]
		abi: default
	] (gio) "g_simple_async_result_set_error_va"]

	simple_async_result_is_valid: make routine! compose/deep [[
		result [pointer]
		source [pointer]
		source_tag [pointer]
		return: [int32]
		abi: default
	] (gio) "g_simple_async_result_is_valid"]

	simple_async_report_error_in_idle: make routine! compose/deep [[
		object [pointer]
		callback [pointer]
		user_data [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_simple_async_report_error_in_idle"]

	simple_async_report_gerror_in_idle: make routine! compose/deep [[
		object [pointer]
		callback [pointer]
		user_data [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_report_gerror_in_idle"]

	simple_async_report_take_gerror_in_idle: make routine! compose/deep [[
		object [pointer]
		callback [pointer]
		user_data [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_async_report_take_gerror_in_idle"]

	simple_permission_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_simple_permission_get_type"]

	simple_permission_new: make routine! compose/deep [[
		allowed [int32]
		return: [pointer]
		abi: default
	] (gio) "g_simple_permission_new"]

	socket_client_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_client_get_type"]

	socket_client_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_new"]

	socket_client_get_family: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_family"]

	socket_client_set_family: make routine! compose/deep [[
		client [pointer]
		family [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_family"]

	socket_client_get_socket_type: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_socket_type"]

	socket_client_set_socket_type: make routine! compose/deep [[
		client [pointer]
		type [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_socket_type"]

	socket_client_get_protocol: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_protocol"]

	socket_client_set_protocol: make routine! compose/deep [[
		client [pointer]
		protocol [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_protocol"]

	socket_client_get_local_address: make routine! compose/deep [[
		client [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_get_local_address"]

	socket_client_set_local_address: make routine! compose/deep [[
		client [pointer]
		address [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_local_address"]

	socket_client_get_timeout: make routine! compose/deep [[
		client [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_socket_client_get_timeout"]

	socket_client_set_timeout: make routine! compose/deep [[
		client [pointer]
		timeout [uint32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_timeout"]

	socket_client_get_enable_proxy: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_enable_proxy"]

	socket_client_set_enable_proxy: make routine! compose/deep [[
		client [pointer]
		enable [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_enable_proxy"]

	socket_client_get_tls: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_tls"]

	socket_client_set_tls: make routine! compose/deep [[
		client [pointer]
		tls [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_tls"]

	socket_client_get_tls_validation_flags: make routine! compose/deep [[
		client [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_client_get_tls_validation_flags"]

	socket_client_set_tls_validation_flags: make routine! compose/deep [[
		client [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_tls_validation_flags"]

	socket_client_get_proxy_resolver: make routine! compose/deep [[
		client [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_get_proxy_resolver"]

	socket_client_set_proxy_resolver: make routine! compose/deep [[
		client [pointer]
		proxy_resolver [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_set_proxy_resolver"]

	socket_client_connect: make routine! compose/deep [[
		client [pointer]
		connectable [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect"]

	socket_client_connect_to_host: make routine! compose/deep [[
		client [pointer]
		host_and_port [pointer]
		default_port [uint16]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_host"]

	socket_client_connect_to_service: make routine! compose/deep [[
		client [pointer]
		domain [pointer]
		service [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_service"]

	socket_client_connect_to_uri: make routine! compose/deep [[
		client [pointer]
		uri [pointer]
		default_port [uint16]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_uri"]

	socket_client_connect_async: make routine! compose/deep [[
		client [pointer]
		connectable [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_connect_async"]

	socket_client_connect_finish: make routine! compose/deep [[
		client [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_finish"]

	socket_client_connect_to_host_async: make routine! compose/deep [[
		client [pointer]
		host_and_port [pointer]
		default_port [uint16]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_connect_to_host_async"]

	socket_client_connect_to_host_finish: make routine! compose/deep [[
		client [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_host_finish"]

	socket_client_connect_to_service_async: make routine! compose/deep [[
		client [pointer]
		domain [pointer]
		service [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_connect_to_service_async"]

	socket_client_connect_to_service_finish: make routine! compose/deep [[
		client [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_service_finish"]

	socket_client_connect_to_uri_async: make routine! compose/deep [[
		client [pointer]
		uri [pointer]
		default_port [uint16]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_connect_to_uri_async"]

	socket_client_connect_to_uri_finish: make routine! compose/deep [[
		client [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_client_connect_to_uri_finish"]

	socket_client_add_application_proxy: make routine! compose/deep [[
		client [pointer]
		protocol [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_client_add_application_proxy"]

	socket_connectable_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_connectable_get_type"]

	socket_connectable_enumerate: make routine! compose/deep [[
		connectable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connectable_enumerate"]

	socket_connectable_proxy_enumerate: make routine! compose/deep [[
		connectable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connectable_proxy_enumerate"]

	socket_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_get_type"]

	socket_new: make routine! compose/deep [[
		family [int32]
		type [int32]
		protocol [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_new"]

	socket_new_from_fd: make routine! compose/deep [[
		fd [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_new_from_fd"]

	socket_get_fd: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_fd"]

	socket_get_family: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_family"]

	socket_get_socket_type: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_socket_type"]

	socket_get_protocol: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_protocol"]

	socket_get_local_address: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_get_local_address"]

	socket_get_remote_address: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_get_remote_address"]

	socket_set_blocking: make routine! compose/deep [[
		socket [pointer]
		blocking [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_blocking"]

	socket_get_blocking: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_blocking"]

	socket_set_keepalive: make routine! compose/deep [[
		socket [pointer]
		keepalive [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_keepalive"]

	socket_get_keepalive: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_keepalive"]

	socket_get_listen_backlog: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_listen_backlog"]

	socket_set_listen_backlog: make routine! compose/deep [[
		socket [pointer]
		backlog [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_listen_backlog"]

	socket_get_timeout: make routine! compose/deep [[
		socket [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_socket_get_timeout"]

	socket_set_timeout: make routine! compose/deep [[
		socket [pointer]
		timeout [uint32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_timeout"]

	socket_get_ttl: make routine! compose/deep [[
		socket [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_socket_get_ttl"]

	socket_set_ttl: make routine! compose/deep [[
		socket [pointer]
		ttl [uint32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_ttl"]

	socket_get_broadcast: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_broadcast"]

	socket_set_broadcast: make routine! compose/deep [[
		socket [pointer]
		broadcast [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_broadcast"]

	socket_get_multicast_loopback: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_multicast_loopback"]

	socket_set_multicast_loopback: make routine! compose/deep [[
		socket [pointer]
		loopback [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_multicast_loopback"]

	socket_get_multicast_ttl: make routine! compose/deep [[
		socket [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_socket_get_multicast_ttl"]

	socket_set_multicast_ttl: make routine! compose/deep [[
		socket [pointer]
		ttl [uint32]
		return: [void]
		abi: default
	] (gio) "g_socket_set_multicast_ttl"]

	socket_is_connected: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_is_connected"]

	socket_bind: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		allow_reuse [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_bind"]

	socket_join_multicast_group: make routine! compose/deep [[
		socket [pointer]
		group [pointer]
		source_specific [int32]
		iface [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_join_multicast_group"]

	socket_leave_multicast_group: make routine! compose/deep [[
		socket [pointer]
		group [pointer]
		source_specific [int32]
		iface [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_leave_multicast_group"]

	socket_connect: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_connect"]

	socket_check_connect_result: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_check_connect_result"]

	socket_get_available_bytes: make routine! compose/deep [[
		socket [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_get_available_bytes"]

	socket_condition_check: make routine! compose/deep [[
		socket [pointer]
		condition [int32]
		return: [int32]
		abi: default
	] (gio) "g_socket_condition_check"]

	socket_condition_wait: make routine! compose/deep [[
		socket [pointer]
		condition [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_condition_wait"]

	socket_condition_timed_wait: make routine! compose/deep [[
		socket [pointer]
		condition [int32]
		timeout [int64]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_condition_timed_wait"]

	socket_accept: make routine! compose/deep [[
		socket [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_accept"]

	socket_listen: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_listen"]

	socket_receive: make routine! compose/deep [[
		socket [pointer]
		buffer [pointer]
		size [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_receive"]

	socket_receive_from: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		buffer [pointer]
		size [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_receive_from"]

	socket_send: make routine! compose/deep [[
		socket [pointer]
		buffer [pointer]
		size [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_send"]

	socket_send_to: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		buffer [pointer]
		size [uint64]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_send_to"]

	socket_receive_message: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		vectors [pointer]
		num_vectors [int32]
		messages [pointer]
		num_messages [pointer]
		flags [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_receive_message"]

	socket_send_message: make routine! compose/deep [[
		socket [pointer]
		address [pointer]
		vectors [pointer]
		num_vectors [int32]
		messages [pointer]
		num_messages [int32]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_send_message"]

	socket_close: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_close"]

	socket_shutdown: make routine! compose/deep [[
		socket [pointer]
		shutdown_read [int32]
		shutdown_write [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_shutdown"]

	socket_is_closed: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_is_closed"]

	socket_create_source: make routine! compose/deep [[
		socket [pointer]
		condition [int32]
		cancellable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_create_source"]

	socket_speaks_ipv4: make routine! compose/deep [[
		socket [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_speaks_ipv4"]

	socket_get_credentials: make routine! compose/deep [[
		socket [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_get_credentials"]

	socket_receive_with_blocking: make routine! compose/deep [[
		socket [pointer]
		buffer [pointer]
		size [uint64]
		blocking [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_receive_with_blocking"]

	socket_send_with_blocking: make routine! compose/deep [[
		socket [pointer]
		buffer [pointer]
		size [uint64]
		blocking [int32]
		cancellable [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_socket_send_with_blocking"]

	socket_get_option: make routine! compose/deep [[
		socket [pointer]
		level [int32]
		optname [int32]
		value [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_get_option"]

	socket_set_option: make routine! compose/deep [[
		socket [pointer]
		level [int32]
		optname [int32]
		value [int32]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_set_option"]

	socket_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_connection_get_type"]

	socket_connection_is_connected: make routine! compose/deep [[
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_connection_is_connected"]

	socket_connection_connect: make routine! compose/deep [[
		connection [pointer]
		address [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_connection_connect"]

	socket_connection_connect_async: make routine! compose/deep [[
		connection [pointer]
		address [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_connection_connect_async"]

	socket_connection_connect_finish: make routine! compose/deep [[
		connection [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_connection_connect_finish"]

	socket_connection_get_socket: make routine! compose/deep [[
		connection [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connection_get_socket"]

	socket_connection_get_local_address: make routine! compose/deep [[
		connection [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connection_get_local_address"]

	socket_connection_get_remote_address: make routine! compose/deep [[
		connection [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connection_get_remote_address"]

	socket_connection_factory_register_type: make routine! compose/deep [[
		g_type [uint64]
		family [int32]
		type [int32]
		protocol [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_connection_factory_register_type"]

	socket_connection_factory_lookup_type: make routine! compose/deep [[
		family [int32]
		type [int32]
		protocol_id [int32]
		return: [uint64]
		abi: default
	] (gio) "g_socket_connection_factory_lookup_type"]

	socket_connection_factory_create_connection: make routine! compose/deep [[
		socket [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_connection_factory_create_connection"]

	socket_control_message_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_control_message_get_type"]

	socket_control_message_get_size: make routine! compose/deep [[
		message [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_socket_control_message_get_size"]

	socket_control_message_get_level: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_control_message_get_level"]

	socket_control_message_get_msg_type: make routine! compose/deep [[
		message [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_control_message_get_msg_type"]

	socket_control_message_serialize: make routine! compose/deep [[
		message [pointer]
		data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_control_message_serialize"]

	socket_control_message_deserialize: make routine! compose/deep [[
		level [int32]
		type [int32]
		size [uint64]
		data [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_control_message_deserialize"]

	socket_listener_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_listener_get_type"]

	socket_listener_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_socket_listener_new"]

	socket_listener_set_backlog: make routine! compose/deep [[
		listener [pointer]
		listen_backlog [int32]
		return: [void]
		abi: default
	] (gio) "g_socket_listener_set_backlog"]

	socket_listener_add_socket: make routine! compose/deep [[
		listener [pointer]
		socket [pointer]
		source_object [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_listener_add_socket"]

	socket_listener_add_address: make routine! compose/deep [[
		listener [pointer]
		address [pointer]
		type [int32]
		protocol [int32]
		source_object [pointer]
		effective_address [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_listener_add_address"]

	socket_listener_add_inet_port: make routine! compose/deep [[
		listener [pointer]
		port [uint16]
		source_object [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_listener_add_inet_port"]

	socket_listener_add_any_inet_port: make routine! compose/deep [[
		listener [pointer]
		source_object [pointer]
		error [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_socket_listener_add_any_inet_port"]

	socket_listener_accept_socket: make routine! compose/deep [[
		listener [pointer]
		source_object [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_listener_accept_socket"]

	socket_listener_accept_socket_async: make routine! compose/deep [[
		listener [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_listener_accept_socket_async"]

	socket_listener_accept_socket_finish: make routine! compose/deep [[
		listener [pointer]
		result [pointer]
		source_object [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_listener_accept_socket_finish"]

	socket_listener_accept: make routine! compose/deep [[
		listener [pointer]
		source_object [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_listener_accept"]

	socket_listener_accept_async: make routine! compose/deep [[
		listener [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_listener_accept_async"]

	socket_listener_accept_finish: make routine! compose/deep [[
		listener [pointer]
		result [pointer]
		source_object [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_socket_listener_accept_finish"]

	socket_listener_close: make routine! compose/deep [[
		listener [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_listener_close"]

	socket_service_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_socket_service_get_type"]

	socket_service_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_socket_service_new"]

	socket_service_start: make routine! compose/deep [[
		service [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_service_start"]

	socket_service_stop: make routine! compose/deep [[
		service [pointer]
		return: [void]
		abi: default
	] (gio) "g_socket_service_stop"]

	socket_service_is_active: make routine! compose/deep [[
		service [pointer]
		return: [int32]
		abi: default
	] (gio) "g_socket_service_is_active"]

	srv_target_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_srv_target_get_type"]

	srv_target_new: make routine! compose/deep [[
		hostname [pointer]
		port [uint16]
		priority [uint16]
		weight [uint16]
		return: [pointer]
		abi: default
	] (gio) "g_srv_target_new"]

	srv_target_copy: make routine! compose/deep [[
		target [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_srv_target_copy"]

	srv_target_free: make routine! compose/deep [[
		target [pointer]
		return: [void]
		abi: default
	] (gio) "g_srv_target_free"]

	srv_target_get_hostname: make routine! compose/deep [[
		target [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_srv_target_get_hostname"]

	srv_target_get_port: make routine! compose/deep [[
		target [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_srv_target_get_port"]

	srv_target_get_priority: make routine! compose/deep [[
		target [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_srv_target_get_priority"]

	srv_target_get_weight: make routine! compose/deep [[
		target [pointer]
		return: [uint16]
		abi: default
	] (gio) "g_srv_target_get_weight"]

	srv_target_list_sort: make routine! compose/deep [[
		targets [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_srv_target_list_sort"]

	simple_proxy_resolver_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_simple_proxy_resolver_get_type"]

	simple_proxy_resolver_new: make routine! compose/deep [[
		default_proxy [pointer]
		ignore_hosts [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_simple_proxy_resolver_new"]

	simple_proxy_resolver_set_default_proxy: make routine! compose/deep [[
		resolver [pointer]
		default_proxy [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_proxy_resolver_set_default_proxy"]

	simple_proxy_resolver_set_ignore_hosts: make routine! compose/deep [[
		resolver [pointer]
		ignore_hosts [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_proxy_resolver_set_ignore_hosts"]

	simple_proxy_resolver_set_uri_proxy: make routine! compose/deep [[
		resolver [pointer]
		uri_scheme [pointer]
		proxy [pointer]
		return: [void]
		abi: default
	] (gio) "g_simple_proxy_resolver_set_uri_proxy"]

	task_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_task_get_type"]

	task_new: make routine! compose/deep [[
		source_object [pointer]
		cancellable [pointer]
		callback [pointer]
		callback_data [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_new"]

	task_report_error: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		callback_data [pointer]
		source_tag [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_report_error"]

	task_report_new_error: make routine! compose/deep [[
		source_object [pointer]
		callback [pointer]
		callback_data [pointer]
		source_tag [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_task_report_new_error"]

	task_set_task_data: make routine! compose/deep [[
		task [pointer]
		task_data [pointer]
		task_data_destroy [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_set_task_data"]

	task_set_priority: make routine! compose/deep [[
		task [pointer]
		priority [int32]
		return: [void]
		abi: default
	] (gio) "g_task_set_priority"]

	task_set_check_cancellable: make routine! compose/deep [[
		task [pointer]
		check_cancellable [int32]
		return: [void]
		abi: default
	] (gio) "g_task_set_check_cancellable"]

	task_set_source_tag: make routine! compose/deep [[
		task [pointer]
		source_tag [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_set_source_tag"]

	task_get_source_object: make routine! compose/deep [[
		task [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_get_source_object"]

	task_get_task_data: make routine! compose/deep [[
		task [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_get_task_data"]

	task_get_priority: make routine! compose/deep [[
		task [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_get_priority"]

	task_get_context: make routine! compose/deep [[
		task [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_get_context"]

	task_get_cancellable: make routine! compose/deep [[
		task [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_get_cancellable"]

	task_get_check_cancellable: make routine! compose/deep [[
		task [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_get_check_cancellable"]

	task_get_source_tag: make routine! compose/deep [[
		task [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_get_source_tag"]

	task_is_valid: make routine! compose/deep [[
		result [pointer]
		source_object [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_is_valid"]

	task_run_in_thread: make routine! compose/deep [[
		task [pointer]
		task_func [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_run_in_thread"]

	task_run_in_thread_sync: make routine! compose/deep [[
		task [pointer]
		task_func [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_run_in_thread_sync"]

	task_set_return_on_cancel: make routine! compose/deep [[
		task [pointer]
		return_on_cancel [int32]
		return: [int32]
		abi: default
	] (gio) "g_task_set_return_on_cancel"]

	task_get_return_on_cancel: make routine! compose/deep [[
		task [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_get_return_on_cancel"]

	task_attach_source: make routine! compose/deep [[
		task [pointer]
		source [pointer]
		callback [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_attach_source"]

	task_return_pointer: make routine! compose/deep [[
		task [pointer]
		result [pointer]
		result_destroy [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_return_pointer"]

	task_return_boolean: make routine! compose/deep [[
		task [pointer]
		result [int32]
		return: [void]
		abi: default
	] (gio) "g_task_return_boolean"]

	task_return_int: make routine! compose/deep [[
		task [pointer]
		result [int64]
		return: [void]
		abi: default
	] (gio) "g_task_return_int"]

	task_return_error: make routine! compose/deep [[
		task [pointer]
		error [pointer]
		return: [void]
		abi: default
	] (gio) "g_task_return_error"]

	task_return_new_error: make routine! compose/deep [[
		task [pointer]
		domain [uint32]
		code [int32]
		format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_task_return_new_error"]

	task_return_error_if_cancelled: make routine! compose/deep [[
		task [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_return_error_if_cancelled"]

	task_propagate_pointer: make routine! compose/deep [[
		task [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_task_propagate_pointer"]

	task_propagate_boolean: make routine! compose/deep [[
		task [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_propagate_boolean"]

	task_propagate_int: make routine! compose/deep [[
		task [pointer]
		error [pointer]
		return: [int64]
		abi: default
	] (gio) "g_task_propagate_int"]

	task_had_error: make routine! compose/deep [[
		task [pointer]
		return: [int32]
		abi: default
	] (gio) "g_task_had_error"]

	subprocess_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_subprocess_get_type"]

	subprocess_new: make routine! compose/deep [[
		flags [int32]
		error [pointer]
		argv0 [pointer]
		...
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_new"]

	subprocess_newv: make routine! compose/deep [[
		argv [pointer]
		flags [int32]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_newv"]

	subprocess_get_stdin_pipe: make routine! compose/deep [[
		subprocess [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_get_stdin_pipe"]

	subprocess_get_stdout_pipe: make routine! compose/deep [[
		subprocess [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_get_stdout_pipe"]

	subprocess_get_stderr_pipe: make routine! compose/deep [[
		subprocess [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_get_stderr_pipe"]

	subprocess_get_identifier: make routine! compose/deep [[
		subprocess [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_get_identifier"]

	subprocess_send_signal: make routine! compose/deep [[
		subprocess [pointer]
		signal_num [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_send_signal"]

	subprocess_force_exit: make routine! compose/deep [[
		subprocess [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_force_exit"]

	subprocess_wait: make routine! compose/deep [[
		subprocess [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_wait"]

	subprocess_wait_async: make routine! compose/deep [[
		subprocess [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_wait_async"]

	subprocess_wait_finish: make routine! compose/deep [[
		subprocess [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_wait_finish"]

	subprocess_wait_check: make routine! compose/deep [[
		subprocess [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_wait_check"]

	subprocess_wait_check_async: make routine! compose/deep [[
		subprocess [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_wait_check_async"]

	subprocess_wait_check_finish: make routine! compose/deep [[
		subprocess [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_wait_check_finish"]

	subprocess_get_status: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_status"]

	subprocess_get_successful: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_successful"]

	subprocess_get_if_exited: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_if_exited"]

	subprocess_get_exit_status: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_exit_status"]

	subprocess_get_if_signaled: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_if_signaled"]

	subprocess_get_term_sig: make routine! compose/deep [[
		subprocess [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_get_term_sig"]

	subprocess_communicate: make routine! compose/deep [[
		subprocess [pointer]
		stdin_buf [pointer]
		cancellable [pointer]
		stdout_buf [pointer]
		stderr_buf [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_communicate"]

	subprocess_communicate_async: make routine! compose/deep [[
		subprocess [pointer]
		stdin_buf [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_communicate_async"]

	subprocess_communicate_finish: make routine! compose/deep [[
		subprocess [pointer]
		result [pointer]
		stdout_buf [pointer]
		stderr_buf [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_communicate_finish"]

	subprocess_communicate_utf8: make routine! compose/deep [[
		subprocess [pointer]
		stdin_buf [pointer]
		cancellable [pointer]
		stdout_buf [pointer]
		stderr_buf [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_communicate_utf8"]

	subprocess_communicate_utf8_async: make routine! compose/deep [[
		subprocess [pointer]
		stdin_buf [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_communicate_utf8_async"]

	subprocess_communicate_utf8_finish: make routine! compose/deep [[
		subprocess [pointer]
		result [pointer]
		stdout_buf [pointer]
		stderr_buf [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_subprocess_communicate_utf8_finish"]

	subprocess_launcher_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_subprocess_launcher_get_type"]

	subprocess_launcher_new: make routine! compose/deep [[
		flags [int32]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_launcher_new"]

	subprocess_launcher_spawn: make routine! compose/deep [[
		self [pointer]
		error [pointer]
		argv0 [pointer]
		...
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_launcher_spawn"]

	subprocess_launcher_spawnv: make routine! compose/deep [[
		self [pointer]
		argv [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_launcher_spawnv"]

	subprocess_launcher_set_environ: make routine! compose/deep [[
		self [pointer]
		env [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_environ"]

	subprocess_launcher_setenv: make routine! compose/deep [[
		self [pointer]
		variable [pointer]
		value [pointer]
		overwrite [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_setenv"]

	subprocess_launcher_unsetenv: make routine! compose/deep [[
		self [pointer]
		variable [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_unsetenv"]

	subprocess_launcher_getenv: make routine! compose/deep [[
		self [pointer]
		variable [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_subprocess_launcher_getenv"]

	subprocess_launcher_set_cwd: make routine! compose/deep [[
		self [pointer]
		cwd [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_cwd"]

	subprocess_launcher_set_flags: make routine! compose/deep [[
		self [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_flags"]

	subprocess_launcher_set_stdin_file_path: make routine! compose/deep [[
		self [pointer]
		path [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_stdin_file_path"]

	subprocess_launcher_take_stdin_fd: make routine! compose/deep [[
		self [pointer]
		fd [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_take_stdin_fd"]

	subprocess_launcher_set_stdout_file_path: make routine! compose/deep [[
		self [pointer]
		path [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_stdout_file_path"]

	subprocess_launcher_take_stdout_fd: make routine! compose/deep [[
		self [pointer]
		fd [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_take_stdout_fd"]

	subprocess_launcher_set_stderr_file_path: make routine! compose/deep [[
		self [pointer]
		path [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_stderr_file_path"]

	subprocess_launcher_take_stderr_fd: make routine! compose/deep [[
		self [pointer]
		fd [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_take_stderr_fd"]

	subprocess_launcher_take_fd: make routine! compose/deep [[
		self [pointer]
		source_fd [int32]
		target_fd [int32]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_take_fd"]

	subprocess_launcher_set_child_setup: make routine! compose/deep [[
		self [pointer]
		child_setup [pointer]
		user_data [pointer]
		destroy_notify [pointer]
		return: [void]
		abi: default
	] (gio) "g_subprocess_launcher_set_child_setup"]

	tcp_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tcp_connection_get_type"]

	tcp_connection_set_graceful_disconnect: make routine! compose/deep [[
		connection [pointer]
		graceful_disconnect [int32]
		return: [void]
		abi: default
	] (gio) "g_tcp_connection_set_graceful_disconnect"]

	tcp_connection_get_graceful_disconnect: make routine! compose/deep [[
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tcp_connection_get_graceful_disconnect"]

	tcp_wrapper_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tcp_wrapper_connection_get_type"]

	tcp_wrapper_connection_new: make routine! compose/deep [[
		base_io_stream [pointer]
		socket [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tcp_wrapper_connection_new"]

	tcp_wrapper_connection_get_base_io_stream: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tcp_wrapper_connection_get_base_io_stream"]

	test_dbus_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_test_dbus_get_type"]

	test_dbus_new: make routine! compose/deep [[
		flags [int32]
		return: [pointer]
		abi: default
	] (gio) "g_test_dbus_new"]

	test_dbus_get_flags: make routine! compose/deep [[
		self [pointer]
		return: [int32]
		abi: default
	] (gio) "g_test_dbus_get_flags"]

	test_dbus_get_bus_address: make routine! compose/deep [[
		self [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_test_dbus_get_bus_address"]

	test_dbus_add_service_dir: make routine! compose/deep [[
		self [pointer]
		path [pointer]
		return: [void]
		abi: default
	] (gio) "g_test_dbus_add_service_dir"]

	test_dbus_up: make routine! compose/deep [[
		self [pointer]
		return: [void]
		abi: default
	] (gio) "g_test_dbus_up"]

	test_dbus_stop: make routine! compose/deep [[
		self [pointer]
		return: [void]
		abi: default
	] (gio) "g_test_dbus_stop"]

	test_dbus_down: make routine! compose/deep [[
		self [pointer]
		return: [void]
		abi: default
	] (gio) "g_test_dbus_down"]

	test_dbus_unset: make routine! compose/deep [[
		return: [void]
		abi: default
	] (gio) "g_test_dbus_unset"]

	themed_icon_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_themed_icon_get_type"]

	themed_icon_new: make routine! compose/deep [[
		iconname [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_themed_icon_new"]

	themed_icon_new_with_default_fallbacks: make routine! compose/deep [[
		iconname [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_themed_icon_new_with_default_fallbacks"]

	themed_icon_new_from_names: make routine! compose/deep [[
		iconnames [pointer]
		len [int32]
		return: [pointer]
		abi: default
	] (gio) "g_themed_icon_new_from_names"]

	themed_icon_prepend_name: make routine! compose/deep [[
		icon [pointer]
		iconname [pointer]
		return: [void]
		abi: default
	] (gio) "g_themed_icon_prepend_name"]

	themed_icon_append_name: make routine! compose/deep [[
		icon [pointer]
		iconname [pointer]
		return: [void]
		abi: default
	] (gio) "g_themed_icon_append_name"]

	themed_icon_get_names: make routine! compose/deep [[
		icon [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_themed_icon_get_names"]

	threaded_socket_service_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_threaded_socket_service_get_type"]

	threaded_socket_service_new: make routine! compose/deep [[
		max_threads [int32]
		return: [pointer]
		abi: default
	] (gio) "g_threaded_socket_service_new"]

	tls_backend_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_backend_get_type"]

	tls_backend_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_tls_backend_get_default"]

	tls_backend_get_default_database: make routine! compose/deep [[
		backend [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_backend_get_default_database"]

	tls_backend_supports_tls: make routine! compose/deep [[
		backend [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_backend_supports_tls"]

	tls_backend_get_certificate_type: make routine! compose/deep [[
		backend [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_tls_backend_get_certificate_type"]

	tls_backend_get_client_connection_type: make routine! compose/deep [[
		backend [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_tls_backend_get_client_connection_type"]

	tls_backend_get_server_connection_type: make routine! compose/deep [[
		backend [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_tls_backend_get_server_connection_type"]

	tls_backend_get_file_database_type: make routine! compose/deep [[
		backend [pointer]
		return: [uint64]
		abi: default
	] (gio) "g_tls_backend_get_file_database_type"]

	tls_certificate_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_certificate_get_type"]

	tls_certificate_new_from_pem: make routine! compose/deep [[
		data [pointer]
		length [int64]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_certificate_new_from_pem"]

	tls_certificate_new_from_file: make routine! compose/deep [[
		file [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_certificate_new_from_file"]

	tls_certificate_new_from_files: make routine! compose/deep [[
		cert_file [pointer]
		key_file [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_certificate_new_from_files"]

	tls_certificate_list_new_from_file: make routine! compose/deep [[
		file [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_certificate_list_new_from_file"]

	tls_certificate_get_issuer: make routine! compose/deep [[
		cert [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_certificate_get_issuer"]

	tls_certificate_verify: make routine! compose/deep [[
		cert [pointer]
		identity [pointer]
		trusted_ca [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_certificate_verify"]

	tls_certificate_is_same: make routine! compose/deep [[
		cert_one [pointer]
		cert_two [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_certificate_is_same"]

	tls_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_connection_get_type"]

	tls_connection_set_database: make routine! compose/deep [[
		conn [pointer]
		database [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_set_database"]

	tls_connection_get_database: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_connection_get_database"]

	tls_connection_set_certificate: make routine! compose/deep [[
		conn [pointer]
		certificate [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_set_certificate"]

	tls_connection_get_certificate: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_connection_get_certificate"]

	tls_connection_set_interaction: make routine! compose/deep [[
		conn [pointer]
		interaction [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_set_interaction"]

	tls_connection_get_interaction: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_connection_get_interaction"]

	tls_connection_get_peer_certificate: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_connection_get_peer_certificate"]

	tls_connection_get_peer_certificate_errors: make routine! compose/deep [[
		conn [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_get_peer_certificate_errors"]

	tls_connection_set_require_close_notify: make routine! compose/deep [[
		conn [pointer]
		require_close_notify [int32]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_set_require_close_notify"]

	tls_connection_get_require_close_notify: make routine! compose/deep [[
		conn [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_get_require_close_notify"]

	tls_connection_set_rehandshake_mode: make routine! compose/deep [[
		conn [pointer]
		mode [int32]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_set_rehandshake_mode"]

	tls_connection_get_rehandshake_mode: make routine! compose/deep [[
		conn [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_get_rehandshake_mode"]

	tls_connection_handshake: make routine! compose/deep [[
		conn [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_handshake"]

	tls_connection_handshake_async: make routine! compose/deep [[
		conn [pointer]
		io_priority [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_connection_handshake_async"]

	tls_connection_handshake_finish: make routine! compose/deep [[
		conn [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_handshake_finish"]

	tls_error_quark: make routine! compose/deep [[
		return: [uint32]
		abi: default
	] (gio) "g_tls_error_quark"]

	tls_connection_emit_accept_certificate: make routine! compose/deep [[
		conn [pointer]
		peer_cert [pointer]
		errors [int32]
		return: [int32]
		abi: default
	] (gio) "g_tls_connection_emit_accept_certificate"]

	tls_client_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_client_connection_get_type"]

	tls_client_connection_new: make routine! compose/deep [[
		base_io_stream [pointer]
		server_identity [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_client_connection_new"]

	tls_client_connection_get_validation_flags: make routine! compose/deep [[
		conn [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_client_connection_get_validation_flags"]

	tls_client_connection_set_validation_flags: make routine! compose/deep [[
		conn [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_tls_client_connection_set_validation_flags"]

	tls_client_connection_get_server_identity: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_client_connection_get_server_identity"]

	tls_client_connection_set_server_identity: make routine! compose/deep [[
		conn [pointer]
		identity [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_client_connection_set_server_identity"]

	tls_client_connection_get_use_ssl3: make routine! compose/deep [[
		conn [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_client_connection_get_use_ssl3"]

	tls_client_connection_set_use_ssl3: make routine! compose/deep [[
		conn [pointer]
		use_ssl3 [int32]
		return: [void]
		abi: default
	] (gio) "g_tls_client_connection_set_use_ssl3"]

	tls_client_connection_get_accepted_cas: make routine! compose/deep [[
		conn [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_client_connection_get_accepted_cas"]

	tls_database_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_database_get_type"]

	tls_database_verify_chain: make routine! compose/deep [[
		self [pointer]
		chain [pointer]
		purpose [pointer]
		identity [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_database_verify_chain"]

	tls_database_verify_chain_async: make routine! compose/deep [[
		self [pointer]
		chain [pointer]
		purpose [pointer]
		identity [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_database_verify_chain_async"]

	tls_database_verify_chain_finish: make routine! compose/deep [[
		self [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_database_verify_chain_finish"]

	tls_database_create_certificate_handle: make routine! compose/deep [[
		self [pointer]
		certificate [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_create_certificate_handle"]

	tls_database_lookup_certificate_for_handle: make routine! compose/deep [[
		self [pointer]
		handle [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_for_handle"]

	tls_database_lookup_certificate_for_handle_async: make routine! compose/deep [[
		self [pointer]
		handle [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_for_handle_async"]

	tls_database_lookup_certificate_for_handle_finish: make routine! compose/deep [[
		self [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_for_handle_finish"]

	tls_database_lookup_certificate_issuer: make routine! compose/deep [[
		self [pointer]
		certificate [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_issuer"]

	tls_database_lookup_certificate_issuer_async: make routine! compose/deep [[
		self [pointer]
		certificate [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_issuer_async"]

	tls_database_lookup_certificate_issuer_finish: make routine! compose/deep [[
		self [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificate_issuer_finish"]

	tls_database_lookup_certificates_issued_by: make routine! compose/deep [[
		self [pointer]
		issuer_raw_dn [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificates_issued_by"]

	tls_database_lookup_certificates_issued_by_async: make routine! compose/deep [[
		self [pointer]
		issuer_raw_dn [pointer]
		interaction [pointer]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_database_lookup_certificates_issued_by_async"]

	tls_database_lookup_certificates_issued_by_finish: make routine! compose/deep [[
		self [pointer]
		result [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_database_lookup_certificates_issued_by_finish"]

	tls_file_database_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_file_database_get_type"]

	tls_file_database_new: make routine! compose/deep [[
		anchors [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_file_database_new"]

	tls_interaction_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_interaction_get_type"]

	tls_interaction_invoke_ask_password: make routine! compose/deep [[
		interaction [pointer]
		password [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_invoke_ask_password"]

	tls_interaction_ask_password: make routine! compose/deep [[
		interaction [pointer]
		password [pointer]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_ask_password"]

	tls_interaction_ask_password_async: make routine! compose/deep [[
		interaction [pointer]
		password [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_interaction_ask_password_async"]

	tls_interaction_ask_password_finish: make routine! compose/deep [[
		interaction [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_ask_password_finish"]

	tls_interaction_invoke_request_certificate: make routine! compose/deep [[
		interaction [pointer]
		connection [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_invoke_request_certificate"]

	tls_interaction_request_certificate: make routine! compose/deep [[
		interaction [pointer]
		connection [pointer]
		flags [int32]
		cancellable [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_request_certificate"]

	tls_interaction_request_certificate_async: make routine! compose/deep [[
		interaction [pointer]
		connection [pointer]
		flags [int32]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_interaction_request_certificate_async"]

	tls_interaction_request_certificate_finish: make routine! compose/deep [[
		interaction [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_interaction_request_certificate_finish"]

	tls_server_connection_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_server_connection_get_type"]

	tls_server_connection_new: make routine! compose/deep [[
		base_io_stream [pointer]
		certificate [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_server_connection_new"]

	tls_password_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_tls_password_get_type"]

	tls_password_new: make routine! compose/deep [[
		flags [int32]
		description [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_password_new"]

	tls_password_get_value: make routine! compose/deep [[
		password [pointer]
		length [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_password_get_value"]

	tls_password_set_value: make routine! compose/deep [[
		password [pointer]
		value [pointer]
		length [int64]
		return: [void]
		abi: default
	] (gio) "g_tls_password_set_value"]

	tls_password_set_value_full: make routine! compose/deep [[
		password [pointer]
		value [pointer]
		length [int64]
		destroy [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_password_set_value_full"]

	tls_password_get_flags: make routine! compose/deep [[
		password [pointer]
		return: [int32]
		abi: default
	] (gio) "g_tls_password_get_flags"]

	tls_password_set_flags: make routine! compose/deep [[
		password [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_tls_password_set_flags"]

	tls_password_get_description: make routine! compose/deep [[
		password [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_password_get_description"]

	tls_password_set_description: make routine! compose/deep [[
		password [pointer]
		description [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_password_set_description"]

	tls_password_get_warning: make routine! compose/deep [[
		password [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_tls_password_get_warning"]

	tls_password_set_warning: make routine! compose/deep [[
		password [pointer]
		warning [pointer]
		return: [void]
		abi: default
	] (gio) "g_tls_password_set_warning"]

	vfs_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_vfs_get_type"]

	vfs_is_active: make routine! compose/deep [[
		vfs [pointer]
		return: [int32]
		abi: default
	] (gio) "g_vfs_is_active"]

	vfs_get_file_for_path: make routine! compose/deep [[
		vfs [pointer]
		path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_vfs_get_file_for_path"]

	vfs_get_file_for_uri: make routine! compose/deep [[
		vfs [pointer]
		uri [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_vfs_get_file_for_uri"]

	vfs_get_supported_uri_schemes: make routine! compose/deep [[
		vfs [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_vfs_get_supported_uri_schemes"]

	vfs_parse_name: make routine! compose/deep [[
		vfs [pointer]
		parse_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_vfs_parse_name"]

	vfs_get_default: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_vfs_get_default"]

	vfs_get_local: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_vfs_get_local"]

	volume_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_volume_get_type"]

	volume_get_name: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_name"]

	volume_get_icon: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_icon"]

	volume_get_symbolic_icon: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_symbolic_icon"]

	volume_get_uuid: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_uuid"]

	volume_get_drive: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_drive"]

	volume_get_mount: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_mount"]

	volume_can_mount: make routine! compose/deep [[
		volume [pointer]
		return: [int32]
		abi: default
	] (gio) "g_volume_can_mount"]

	volume_can_eject: make routine! compose/deep [[
		volume [pointer]
		return: [int32]
		abi: default
	] (gio) "g_volume_can_eject"]

	volume_should_automount: make routine! compose/deep [[
		volume [pointer]
		return: [int32]
		abi: default
	] (gio) "g_volume_should_automount"]

	volume_mount: make routine! compose/deep [[
		volume [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_volume_mount"]

	volume_mount_finish: make routine! compose/deep [[
		volume [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_volume_mount_finish"]

	volume_get_identifier: make routine! compose/deep [[
		volume [pointer]
		kind [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_identifier"]

	volume_enumerate_identifiers: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_enumerate_identifiers"]

	volume_get_activation_root: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_activation_root"]

	volume_eject_with_operation: make routine! compose/deep [[
		volume [pointer]
		flags [int32]
		mount_operation [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_volume_eject_with_operation"]

	volume_eject_with_operation_finish: make routine! compose/deep [[
		volume [pointer]
		result [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_volume_eject_with_operation_finish"]

	volume_get_sort_key: make routine! compose/deep [[
		volume [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_volume_get_sort_key"]

	zlib_compressor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_zlib_compressor_get_type"]

	zlib_compressor_new: make routine! compose/deep [[
		format [int32]
		level [int32]
		return: [pointer]
		abi: default
	] (gio) "g_zlib_compressor_new"]

	zlib_compressor_get_file_info: make routine! compose/deep [[
		compressor [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_zlib_compressor_get_file_info"]

	zlib_compressor_set_file_info: make routine! compose/deep [[
		compressor [pointer]
		file_info [pointer]
		return: [void]
		abi: default
	] (gio) "g_zlib_compressor_set_file_info"]

	zlib_decompressor_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_zlib_decompressor_get_type"]

	zlib_decompressor_new: make routine! compose/deep [[
		format [int32]
		return: [pointer]
		abi: default
	] (gio) "g_zlib_decompressor_new"]

	zlib_decompressor_get_file_info: make routine! compose/deep [[
		decompressor [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_zlib_decompressor_get_file_info"]

	dbus_interface_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_interface_get_type"]

	dbus_interface_get_info: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_get_info"]

	dbus_interface_get_object: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_get_object"]

	dbus_interface_set_object: make routine! compose/deep [[
		interface_ [pointer]
		object [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_set_object"]

	dbus_interface_dup_object: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_dup_object"]

	dbus_interface_skeleton_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_type"]

	dbus_interface_skeleton_get_flags: make routine! compose/deep [[
		interface_ [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_flags"]

	dbus_interface_skeleton_set_flags: make routine! compose/deep [[
		interface_ [pointer]
		flags [int32]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_skeleton_set_flags"]

	dbus_interface_skeleton_get_info: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_info"]

	dbus_interface_skeleton_get_vtable: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_vtable"]

	dbus_interface_skeleton_get_properties: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_properties"]

	dbus_interface_skeleton_flush: make routine! compose/deep [[
		interface_ [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_skeleton_flush"]

	dbus_interface_skeleton_export: make routine! compose/deep [[
		interface_ [pointer]
		connection [pointer]
		object_path [pointer]
		error [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_interface_skeleton_export"]

	dbus_interface_skeleton_unexport: make routine! compose/deep [[
		interface_ [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_skeleton_unexport"]

	dbus_interface_skeleton_unexport_from_connection: make routine! compose/deep [[
		interface_ [pointer]
		connection [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_interface_skeleton_unexport_from_connection"]

	dbus_interface_skeleton_get_connection: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_connection"]

	dbus_interface_skeleton_get_connections: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_connections"]

	dbus_interface_skeleton_has_connection: make routine! compose/deep [[
		interface_ [pointer]
		connection [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_interface_skeleton_has_connection"]

	dbus_interface_skeleton_get_object_path: make routine! compose/deep [[
		interface_ [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_interface_skeleton_get_object_path"]

	dbus_object_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_get_type"]

	dbus_object_get_object_path: make routine! compose/deep [[
		object [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_get_object_path"]

	dbus_object_get_interfaces: make routine! compose/deep [[
		object [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_get_interfaces"]

	dbus_object_get_interface: make routine! compose/deep [[
		object [pointer]
		interface_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_get_interface"]

	dbus_object_skeleton_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_skeleton_get_type"]

	dbus_object_skeleton_new: make routine! compose/deep [[
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_skeleton_new"]

	dbus_object_skeleton_flush: make routine! compose/deep [[
		object [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_skeleton_flush"]

	dbus_object_skeleton_add_interface: make routine! compose/deep [[
		object [pointer]
		interface_ [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_skeleton_add_interface"]

	dbus_object_skeleton_remove_interface: make routine! compose/deep [[
		object [pointer]
		interface_ [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_skeleton_remove_interface"]

	dbus_object_skeleton_remove_interface_by_name: make routine! compose/deep [[
		object [pointer]
		interface_name [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_skeleton_remove_interface_by_name"]

	dbus_object_skeleton_set_object_path: make routine! compose/deep [[
		object [pointer]
		object_path [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_skeleton_set_object_path"]

	dbus_object_proxy_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_proxy_get_type"]

	dbus_object_proxy_new: make routine! compose/deep [[
		connection [pointer]
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_proxy_new"]

	dbus_object_proxy_get_connection: make routine! compose/deep [[
		proxy [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_proxy_get_connection"]

	dbus_object_manager_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_manager_get_type"]

	dbus_object_manager_get_object_path: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_get_object_path"]

	dbus_object_manager_get_objects: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_get_objects"]

	dbus_object_manager_get_object: make routine! compose/deep [[
		manager [pointer]
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_get_object"]

	dbus_object_manager_get_interface: make routine! compose/deep [[
		manager [pointer]
		object_path [pointer]
		interface_name [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_get_interface"]

	dbus_object_manager_client_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_manager_client_get_type"]

	dbus_object_manager_client_new: make routine! compose/deep [[
		connection [pointer]
		flags [int32]
		name [pointer]
		object_path [pointer]
		get_proxy_type_func [pointer]
		get_proxy_type_user_data [pointer]
		get_proxy_type_destroy_notify [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_manager_client_new"]

	dbus_object_manager_client_new_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_new_finish"]

	dbus_object_manager_client_new_sync: make routine! compose/deep [[
		connection [pointer]
		flags [int32]
		name [pointer]
		object_path [pointer]
		get_proxy_type_func [pointer]
		get_proxy_type_user_data [pointer]
		get_proxy_type_destroy_notify [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_new_sync"]

	dbus_object_manager_client_new_for_bus: make routine! compose/deep [[
		bus_type [int32]
		flags [int32]
		name [pointer]
		object_path [pointer]
		get_proxy_type_func [pointer]
		get_proxy_type_user_data [pointer]
		get_proxy_type_destroy_notify [pointer]
		cancellable [pointer]
		callback [pointer]
		user_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_manager_client_new_for_bus"]

	dbus_object_manager_client_new_for_bus_finish: make routine! compose/deep [[
		res [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_new_for_bus_finish"]

	dbus_object_manager_client_new_for_bus_sync: make routine! compose/deep [[
		bus_type [int32]
		flags [int32]
		name [pointer]
		object_path [pointer]
		get_proxy_type_func [pointer]
		get_proxy_type_user_data [pointer]
		get_proxy_type_destroy_notify [pointer]
		cancellable [pointer]
		error [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_new_for_bus_sync"]

	dbus_object_manager_client_get_connection: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_get_connection"]

	dbus_object_manager_client_get_flags: make routine! compose/deep [[
		manager [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_object_manager_client_get_flags"]

	dbus_object_manager_client_get_name: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_get_name"]

	dbus_object_manager_client_get_name_owner: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_client_get_name_owner"]

	dbus_object_manager_server_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_object_manager_server_get_type"]

	dbus_object_manager_server_new: make routine! compose/deep [[
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_server_new"]

	dbus_object_manager_server_get_connection: make routine! compose/deep [[
		manager [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_object_manager_server_get_connection"]

	dbus_object_manager_server_set_connection: make routine! compose/deep [[
		manager [pointer]
		connection [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_manager_server_set_connection"]

	dbus_object_manager_server_export: make routine! compose/deep [[
		manager [pointer]
		object [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_manager_server_export"]

	dbus_object_manager_server_export_uniquely: make routine! compose/deep [[
		manager [pointer]
		object [pointer]
		return: [void]
		abi: default
	] (gio) "g_dbus_object_manager_server_export_uniquely"]

	dbus_object_manager_server_is_exported: make routine! compose/deep [[
		manager [pointer]
		object [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_object_manager_server_is_exported"]

	dbus_object_manager_server_unexport: make routine! compose/deep [[
		manager [pointer]
		object_path [pointer]
		return: [int32]
		abi: default
	] (gio) "g_dbus_object_manager_server_unexport"]

	dbus_action_group_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_action_group_get_type"]

	dbus_action_group_get: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_action_group_get"]

	remote_action_group_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_remote_action_group_get_type"]

	remote_action_group_activate_action_full: make routine! compose/deep [[
		remote [pointer]
		action_name [pointer]
		parameter [pointer]
		platform_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_remote_action_group_activate_action_full"]

	remote_action_group_change_action_state_full: make routine! compose/deep [[
		remote [pointer]
		action_name [pointer]
		value [pointer]
		platform_data [pointer]
		return: [void]
		abi: default
	] (gio) "g_remote_action_group_change_action_state_full"]

	menu_model_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_menu_model_get_type"]

	menu_model_is_mutable: make routine! compose/deep [[
		model [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_model_is_mutable"]

	menu_model_get_n_items: make routine! compose/deep [[
		model [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_model_get_n_items"]

	menu_model_iterate_item_attributes: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		return: [pointer]
		abi: default
	] (gio) "g_menu_model_iterate_item_attributes"]

	menu_model_get_item_attribute_value: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		attribute [pointer]
		expected_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_model_get_item_attribute_value"]

	menu_model_get_item_attribute: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		attribute [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (gio) "g_menu_model_get_item_attribute"]

	menu_model_iterate_item_links: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		return: [pointer]
		abi: default
	] (gio) "g_menu_model_iterate_item_links"]

	menu_model_get_item_link: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		link [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_model_get_item_link"]

	menu_model_items_changed: make routine! compose/deep [[
		model [pointer]
		position [int32]
		removed [int32]
		added [int32]
		return: [void]
		abi: default
	] (gio) "g_menu_model_items_changed"]

	menu_attribute_iter_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_menu_attribute_iter_get_type"]

	menu_attribute_iter_get_next: make routine! compose/deep [[
		iter [pointer]
		out_name [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_attribute_iter_get_next"]

	menu_attribute_iter_next: make routine! compose/deep [[
		iter [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_attribute_iter_next"]

	menu_attribute_iter_get_name: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_attribute_iter_get_name"]

	menu_attribute_iter_get_value: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_attribute_iter_get_value"]

	menu_link_iter_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_menu_link_iter_get_type"]

	menu_link_iter_get_next: make routine! compose/deep [[
		iter [pointer]
		out_link [pointer]
		value [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_link_iter_get_next"]

	menu_link_iter_next: make routine! compose/deep [[
		iter [pointer]
		return: [int32]
		abi: default
	] (gio) "g_menu_link_iter_next"]

	menu_link_iter_get_name: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_link_iter_get_name"]

	menu_link_iter_get_value: make routine! compose/deep [[
		iter [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_link_iter_get_value"]

	menu_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_menu_get_type"]

	menu_new: make routine! compose/deep [[
		return: [pointer]
		abi: default
	] (gio) "g_menu_new"]

	menu_freeze: make routine! compose/deep [[
		menu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_freeze"]

	menu_insert_item: make routine! compose/deep [[
		menu [pointer]
		position [int32]
		item [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_insert_item"]

	menu_prepend_item: make routine! compose/deep [[
		menu [pointer]
		item [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_prepend_item"]

	menu_append_item: make routine! compose/deep [[
		menu [pointer]
		item [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_append_item"]

	menu_remove: make routine! compose/deep [[
		menu [pointer]
		position [int32]
		return: [void]
		abi: default
	] (gio) "g_menu_remove"]

	menu_remove_all: make routine! compose/deep [[
		menu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_remove_all"]

	menu_insert: make routine! compose/deep [[
		menu [pointer]
		position [int32]
		label [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_insert"]

	menu_prepend: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_prepend"]

	menu_append: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_append"]

	menu_insert_section: make routine! compose/deep [[
		menu [pointer]
		position [int32]
		label [pointer]
		section [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_insert_section"]

	menu_prepend_section: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		section [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_prepend_section"]

	menu_append_section: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		section [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_append_section"]

	menu_insert_submenu: make routine! compose/deep [[
		menu [pointer]
		position [int32]
		label [pointer]
		submenu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_insert_submenu"]

	menu_prepend_submenu: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		submenu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_prepend_submenu"]

	menu_append_submenu: make routine! compose/deep [[
		menu [pointer]
		label [pointer]
		submenu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_append_submenu"]

	menu_item_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_menu_item_get_type"]

	menu_item_new: make routine! compose/deep [[
		label [pointer]
		detailed_action [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_new"]

	menu_item_new_from_model: make routine! compose/deep [[
		model [pointer]
		item_index [int32]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_new_from_model"]

	menu_item_new_submenu: make routine! compose/deep [[
		label [pointer]
		submenu [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_new_submenu"]

	menu_item_new_section: make routine! compose/deep [[
		label [pointer]
		section [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_new_section"]

	menu_item_get_attribute_value: make routine! compose/deep [[
		menu_item [pointer]
		attribute [pointer]
		expected_type [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_get_attribute_value"]

	menu_item_get_attribute: make routine! compose/deep [[
		menu_item [pointer]
		attribute [pointer]
		format_string [pointer]
		...
		return: [int32]
		abi: default
	] (gio) "g_menu_item_get_attribute"]

	menu_item_get_link: make routine! compose/deep [[
		menu_item [pointer]
		link [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_menu_item_get_link"]

	menu_item_set_attribute_value: make routine! compose/deep [[
		menu_item [pointer]
		attribute [pointer]
		value [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_attribute_value"]

	menu_item_set_attribute: make routine! compose/deep [[
		menu_item [pointer]
		attribute [pointer]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_attribute"]

	menu_item_set_link: make routine! compose/deep [[
		menu_item [pointer]
		link [pointer]
		model [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_link"]

	menu_item_set_label: make routine! compose/deep [[
		menu_item [pointer]
		label [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_label"]

	menu_item_set_submenu: make routine! compose/deep [[
		menu_item [pointer]
		submenu [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_submenu"]

	menu_item_set_section: make routine! compose/deep [[
		menu_item [pointer]
		section [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_section"]

	menu_item_set_action_and_target_value: make routine! compose/deep [[
		menu_item [pointer]
		action [pointer]
		target_value [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_action_and_target_value"]

	menu_item_set_action_and_target: make routine! compose/deep [[
		menu_item [pointer]
		action [pointer]
		format_string [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_action_and_target"]

	menu_item_set_detailed_action: make routine! compose/deep [[
		menu_item [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_detailed_action"]

	menu_item_set_icon: make routine! compose/deep [[
		menu_item [pointer]
		icon [pointer]
		return: [void]
		abi: default
	] (gio) "g_menu_item_set_icon"]

	dbus_connection_export_menu_model: make routine! compose/deep [[
		connection [pointer]
		object_path [pointer]
		menu [pointer]
		error [pointer]
		return: [uint32]
		abi: default
	] (gio) "g_dbus_connection_export_menu_model"]

	dbus_connection_unexport_menu_model: make routine! compose/deep [[
		connection [pointer]
		export_id [uint32]
		return: [void]
		abi: default
	] (gio) "g_dbus_connection_unexport_menu_model"]

	dbus_menu_model_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_dbus_menu_model_get_type"]

	dbus_menu_model_get: make routine! compose/deep [[
		connection [pointer]
		bus_name [pointer]
		object_path [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_dbus_menu_model_get"]

	notification_get_type: make routine! compose/deep [[
		return: [uint64]
		abi: default
	] (gio) "g_notification_get_type"]

	notification_new: make routine! compose/deep [[
		title [pointer]
		return: [pointer]
		abi: default
	] (gio) "g_notification_new"]

	notification_set_title: make routine! compose/deep [[
		notification [pointer]
		title [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_set_title"]

	notification_set_body: make routine! compose/deep [[
		notification [pointer]
		body [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_set_body"]

	notification_set_icon: make routine! compose/deep [[
		notification [pointer]
		icon [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_set_icon"]

	notification_set_priority: make routine! compose/deep [[
		notification [pointer]
		priority [int32]
		return: [void]
		abi: default
	] (gio) "g_notification_set_priority"]

	notification_add_button: make routine! compose/deep [[
		notification [pointer]
		label [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_add_button"]

	notification_add_button_with_target: make routine! compose/deep [[
		notification [pointer]
		label [pointer]
		action [pointer]
		target_format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_notification_add_button_with_target"]

	notification_add_button_with_target_value: make routine! compose/deep [[
		notification [pointer]
		label [pointer]
		action [pointer]
		target [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_add_button_with_target_value"]

	notification_set_default_action: make routine! compose/deep [[
		notification [pointer]
		detailed_action [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_set_default_action"]

	notification_set_default_action_and_target: make routine! compose/deep [[
		notification [pointer]
		action [pointer]
		target_format [pointer]
		...
		return: [void]
		abi: default
	] (gio) "g_notification_set_default_action_and_target"]

	notification_set_default_action_and_target_value: make routine! compose/deep [[
		notification [pointer]
		action [pointer]
		target [pointer]
		return: [void]
		abi: default
	] (gio) "g_notification_set_default_action_and_target_value"]


	signal_connect: func [
		instance 		[integer!]
		detailed-signal [integer!]
		handler 		[integer!]
		data 			[integer!]
	][
    	signal_connect_data instance detailed-signal handler data 0 0
	]
]
